
TRC3500_Project_3_ver1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009108  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009298  08009298  0000a298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096ec  080096ec  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080096ec  080096ec  0000a6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096f4  080096f4  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096f4  080096f4  0000a6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096f8  080096f8  0000a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080096fc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003214  200001d4  080098d0  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033e8  080098d0  0000b3e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014415  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a39  00000000  00000000  0001f619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00022058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e73  00000000  00000000  000232f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023515  00000000  00000000  00024163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bd0  00000000  00000000  00047678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbf02  00000000  00000000  0005c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013814a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006020  00000000  00000000  00138190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0013e1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009280 	.word	0x08009280

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009280 	.word	0x08009280

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <HAL_ADC_ConvCpltCallback>:
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//
//	HAL_Delay(0.01); // 1ms sample rate
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <HAL_ADC_ConvCpltCallback+0x24>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d102      	bne.n	8000eec <HAL_ADC_ConvCpltCallback+0x18>
        adc_done = 1; // Set flag when DMA is done
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <HAL_ADC_ConvCpltCallback+0x28>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
    }
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	50040000 	.word	0x50040000
 8000efc:	20001ae0 	.word	0x20001ae0

08000f00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a22      	ldr	r2, [pc, #136]	@ (8000f98 <HAL_UART_RxCpltCallback+0x98>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d13d      	bne.n	8000f8e <HAL_UART_RxCpltCallback+0x8e>
    {
    	start_cycle = 1;
 8000f12:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <HAL_UART_RxCpltCallback+0x9c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
    	snprintf(msg, sizeof(msg), "starting process\n");
 8000f18:	4a21      	ldr	r2, [pc, #132]	@ (8000fa0 <HAL_UART_RxCpltCallback+0xa0>)
 8000f1a:	2140      	movs	r1, #64	@ 0x40
 8000f1c:	4821      	ldr	r0, [pc, #132]	@ (8000fa4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f1e:	f006 f867 	bl	8006ff0 <sniprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f22:	4820      	ldr	r0, [pc, #128]	@ (8000fa4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f24:	f7ff f9a4 	bl	8000270 <strlen>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	491c      	ldr	r1, [pc, #112]	@ (8000fa4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f32:	481d      	ldr	r0, [pc, #116]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xa8>)
 8000f34:	f004 f856 	bl	8004fe4 <HAL_UART_Transmit>
    	HAL_Delay(10000);
 8000f38:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000f3c:	f000 fdd4 	bl	8001ae8 <HAL_Delay>

    	snprintf(msg, sizeof(msg), "reading data\n");
 8000f40:	4a1a      	ldr	r2, [pc, #104]	@ (8000fac <HAL_UART_RxCpltCallback+0xac>)
 8000f42:	2140      	movs	r1, #64	@ 0x40
 8000f44:	4817      	ldr	r0, [pc, #92]	@ (8000fa4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f46:	f006 f853 	bl	8006ff0 <sniprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f4a:	4816      	ldr	r0, [pc, #88]	@ (8000fa4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f4c:	f7ff f990 	bl	8000270 <strlen>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	4912      	ldr	r1, [pc, #72]	@ (8000fa4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f5a:	4813      	ldr	r0, [pc, #76]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xa8>)
 8000f5c:	f004 f842 	bl	8004fe4 <HAL_UART_Transmit>

    	snprintf(msg, sizeof(msg), "reading data: %u\n", ch1_data[0]);
 8000f60:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xb0>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	4a13      	ldr	r2, [pc, #76]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xb4>)
 8000f66:	2140      	movs	r1, #64	@ 0x40
 8000f68:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f6a:	f006 f841 	bl	8006ff0 <sniprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f6e:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f70:	f7ff f97e 	bl	8000270 <strlen>
 8000f74:	4603      	mov	r3, r0
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	4909      	ldr	r1, [pc, #36]	@ (8000fa4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f7e:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xa8>)
 8000f80:	f004 f830 	bl	8004fe4 <HAL_UART_Transmit>
        // Re-enable UART interrupt reception to detect next key press
        HAL_UART_Receive_IT(&huart2, (uint8_t*)msg, 1);
 8000f84:	2201      	movs	r2, #1
 8000f86:	4907      	ldr	r1, [pc, #28]	@ (8000fa4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f88:	4807      	ldr	r0, [pc, #28]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xa8>)
 8000f8a:	f004 f8b5 	bl	80050f8 <HAL_UART_Receive_IT>
    }
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40004400 	.word	0x40004400
 8000f9c:	20001ae1 	.word	0x20001ae1
 8000fa0:	08009298 	.word	0x08009298
 8000fa4:	20003254 	.word	0x20003254
 8000fa8:	200002e8 	.word	0x200002e8
 8000fac:	080092ac 	.word	0x080092ac
 8000fb0:	2000269c 	.word	0x2000269c
 8000fb4:	080092bc 	.word	0x080092bc

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f000 fd1e 	bl	80019fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f8d1 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f000 fa2b 	bl	8001420 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fca:	f000 fa0b 	bl	80013e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fce:	f000 f9d9 	bl	8001384 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fd2:	f000 f92b 	bl	800122c <MX_ADC1_Init>
  MX_TIM6_Init();
 8000fd6:	f000 f99f 	bl	8001318 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000fda:	4856      	ldr	r0, [pc, #344]	@ (8001134 <main+0x17c>)
 8000fdc:	f003 fd4c 	bl	8004a78 <HAL_TIM_Base_Start>

  // Initialise DMA

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, NUM_CHANNELS * SAMPLE_SIZE);
 8000fe0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000fe4:	4954      	ldr	r1, [pc, #336]	@ (8001138 <main+0x180>)
 8000fe6:	4855      	ldr	r0, [pc, #340]	@ (800113c <main+0x184>)
 8000fe8:	f001 f8ac 	bl	8002144 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)msg, 1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	4954      	ldr	r1, [pc, #336]	@ (8001140 <main+0x188>)
 8000ff0:	4854      	ldr	r0, [pc, #336]	@ (8001144 <main+0x18c>)
 8000ff2:	f004 f881 	bl	80050f8 <HAL_UART_Receive_IT>

  snprintf(msg, sizeof(msg), "Starting data capturing\n");
 8000ff6:	4a54      	ldr	r2, [pc, #336]	@ (8001148 <main+0x190>)
 8000ff8:	2140      	movs	r1, #64	@ 0x40
 8000ffa:	4851      	ldr	r0, [pc, #324]	@ (8001140 <main+0x188>)
 8000ffc:	f005 fff8 	bl	8006ff0 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001000:	484f      	ldr	r0, [pc, #316]	@ (8001140 <main+0x188>)
 8001002:	f7ff f935 	bl	8000270 <strlen>
 8001006:	4603      	mov	r3, r0
 8001008:	b29a      	uxth	r2, r3
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	494c      	ldr	r1, [pc, #304]	@ (8001140 <main+0x188>)
 8001010:	484c      	ldr	r0, [pc, #304]	@ (8001144 <main+0x18c>)
 8001012:	f003 ffe7 	bl	8004fe4 <HAL_UART_Transmit>

  // Wait for the DMA to finish the transfer
  while (!adc_done) {
 8001016:	e002      	b.n	800101e <main+0x66>
	  HAL_Delay(1); // Wait for DMA to complete
 8001018:	2001      	movs	r0, #1
 800101a:	f000 fd65 	bl	8001ae8 <HAL_Delay>
  while (!adc_done) {
 800101e:	4b4b      	ldr	r3, [pc, #300]	@ (800114c <main+0x194>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f7      	beq.n	8001018 <main+0x60>
  }
//  HAL_Delay(10000);

  // Process ADC data once DMA is complete
  snprintf(msg, sizeof(msg), "Data capture ended\n");
 8001028:	4a49      	ldr	r2, [pc, #292]	@ (8001150 <main+0x198>)
 800102a:	2140      	movs	r1, #64	@ 0x40
 800102c:	4844      	ldr	r0, [pc, #272]	@ (8001140 <main+0x188>)
 800102e:	f005 ffdf 	bl	8006ff0 <sniprintf>
  for (int i = 0; i < SAMPLE_SIZE; ++i) {
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	e015      	b.n	8001064 <main+0xac>
	  ch0_data[i] = adcBuffer[i * NUM_CHANNELS + 0]; // Channel 0
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4a3e      	ldr	r2, [pc, #248]	@ (8001138 <main+0x180>)
 800103e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001042:	4a44      	ldr	r2, [pc, #272]	@ (8001154 <main+0x19c>)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  ch1_data[i] = adcBuffer[i * NUM_CHANNELS + 1]; // Channel 1
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	3301      	adds	r3, #1
 8001050:	4a39      	ldr	r2, [pc, #228]	@ (8001138 <main+0x180>)
 8001052:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001056:	4a40      	ldr	r2, [pc, #256]	@ (8001158 <main+0x1a0>)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < SAMPLE_SIZE; ++i) {
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f240 52db 	movw	r2, #1499	@ 0x5db
 800106a:	4293      	cmp	r3, r2
 800106c:	dde4      	ble.n	8001038 <main+0x80>
  }

  //Send the data via UART
  snprintf(msg, sizeof(msg), "Channel 0 Data:\n");
 800106e:	4a3b      	ldr	r2, [pc, #236]	@ (800115c <main+0x1a4>)
 8001070:	2140      	movs	r1, #64	@ 0x40
 8001072:	4833      	ldr	r0, [pc, #204]	@ (8001140 <main+0x188>)
 8001074:	f005 ffbc 	bl	8006ff0 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001078:	4831      	ldr	r0, [pc, #196]	@ (8001140 <main+0x188>)
 800107a:	f7ff f8f9 	bl	8000270 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	492e      	ldr	r1, [pc, #184]	@ (8001140 <main+0x188>)
 8001088:	482e      	ldr	r0, [pc, #184]	@ (8001144 <main+0x18c>)
 800108a:	f003 ffab 	bl	8004fe4 <HAL_UART_Transmit>
  for (int i = 0; i < SAMPLE_SIZE; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	e017      	b.n	80010c4 <main+0x10c>
	  snprintf(msg, sizeof(msg), "%u\n", adcBuffer[i * NUM_CHANNELS + 0]);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4a27      	ldr	r2, [pc, #156]	@ (8001138 <main+0x180>)
 800109a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109e:	4a30      	ldr	r2, [pc, #192]	@ (8001160 <main+0x1a8>)
 80010a0:	2140      	movs	r1, #64	@ 0x40
 80010a2:	4827      	ldr	r0, [pc, #156]	@ (8001140 <main+0x188>)
 80010a4:	f005 ffa4 	bl	8006ff0 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80010a8:	4825      	ldr	r0, [pc, #148]	@ (8001140 <main+0x188>)
 80010aa:	f7ff f8e1 	bl	8000270 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	4922      	ldr	r1, [pc, #136]	@ (8001140 <main+0x188>)
 80010b8:	4822      	ldr	r0, [pc, #136]	@ (8001144 <main+0x18c>)
 80010ba:	f003 ff93 	bl	8004fe4 <HAL_UART_Transmit>
  for (int i = 0; i < SAMPLE_SIZE; i++) {
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3301      	adds	r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	f240 52db 	movw	r2, #1499	@ 0x5db
 80010ca:	4293      	cmp	r3, r2
 80010cc:	dde2      	ble.n	8001094 <main+0xdc>
  }

  snprintf(msg, sizeof(msg), "Channel 1 Data:\n");
 80010ce:	4a25      	ldr	r2, [pc, #148]	@ (8001164 <main+0x1ac>)
 80010d0:	2140      	movs	r1, #64	@ 0x40
 80010d2:	481b      	ldr	r0, [pc, #108]	@ (8001140 <main+0x188>)
 80010d4:	f005 ff8c 	bl	8006ff0 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80010d8:	4819      	ldr	r0, [pc, #100]	@ (8001140 <main+0x188>)
 80010da:	f7ff f8c9 	bl	8000270 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	4916      	ldr	r1, [pc, #88]	@ (8001140 <main+0x188>)
 80010e8:	4816      	ldr	r0, [pc, #88]	@ (8001144 <main+0x18c>)
 80010ea:	f003 ff7b 	bl	8004fe4 <HAL_UART_Transmit>
  for (int i = 0; i < SAMPLE_SIZE; i++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	e018      	b.n	8001126 <main+0x16e>
	  snprintf(msg, sizeof(msg), "%u\n", adcBuffer[i * NUM_CHANNELS + 1]);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001138 <main+0x180>)
 80010fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001100:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <main+0x1a8>)
 8001102:	2140      	movs	r1, #64	@ 0x40
 8001104:	480e      	ldr	r0, [pc, #56]	@ (8001140 <main+0x188>)
 8001106:	f005 ff73 	bl	8006ff0 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800110a:	480d      	ldr	r0, [pc, #52]	@ (8001140 <main+0x188>)
 800110c:	f7ff f8b0 	bl	8000270 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	4909      	ldr	r1, [pc, #36]	@ (8001140 <main+0x188>)
 800111a:	480a      	ldr	r0, [pc, #40]	@ (8001144 <main+0x18c>)
 800111c:	f003 ff62 	bl	8004fe4 <HAL_UART_Transmit>
  for (int i = 0; i < SAMPLE_SIZE; i++) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3301      	adds	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f240 52db 	movw	r2, #1499	@ 0x5db
 800112c:	4293      	cmp	r3, r2
 800112e:	dde1      	ble.n	80010f4 <main+0x13c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <main+0x178>
 8001134:	2000029c 	.word	0x2000029c
 8001138:	20000370 	.word	0x20000370
 800113c:	200001f0 	.word	0x200001f0
 8001140:	20003254 	.word	0x20003254
 8001144:	200002e8 	.word	0x200002e8
 8001148:	080092d0 	.word	0x080092d0
 800114c:	20001ae0 	.word	0x20001ae0
 8001150:	080092ec 	.word	0x080092ec
 8001154:	20001ae4 	.word	0x20001ae4
 8001158:	2000269c 	.word	0x2000269c
 800115c:	08009300 	.word	0x08009300
 8001160:	08009314 	.word	0x08009314
 8001164:	08009318 	.word	0x08009318

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b096      	sub	sp, #88	@ 0x58
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2244      	movs	r2, #68	@ 0x44
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f005 ffb3 	bl	80070e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800118a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800118e:	f002 fa95 	bl	80036bc <HAL_PWREx_ControlVoltageScaling>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001198:	f000 f98c 	bl	80014b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800119c:	f002 fa70 	bl	8003680 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011a0:	4b21      	ldr	r3, [pc, #132]	@ (8001228 <SystemClock_Config+0xc0>)
 80011a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a6:	4a20      	ldr	r2, [pc, #128]	@ (8001228 <SystemClock_Config+0xc0>)
 80011a8:	f023 0318 	bic.w	r3, r3, #24
 80011ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011b0:	2314      	movs	r3, #20
 80011b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011c0:	2360      	movs	r3, #96	@ 0x60
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c4:	2302      	movs	r3, #2
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011c8:	2301      	movs	r3, #1
 80011ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011d0:	2310      	movs	r3, #16
 80011d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011d4:	2307      	movs	r3, #7
 80011d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 fabf 	bl	8003768 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011f0:	f000 f960 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2303      	movs	r3, #3
 80011fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f002 febf 	bl	8003f90 <HAL_RCC_ClockConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001218:	f000 f94c 	bl	80014b4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800121c:	f003 fad2 	bl	80047c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001220:	bf00      	nop
 8001222:	3758      	adds	r7, #88	@ 0x58
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000

0800122c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001242:	4b31      	ldr	r3, [pc, #196]	@ (8001308 <MX_ADC1_Init+0xdc>)
 8001244:	4a31      	ldr	r2, [pc, #196]	@ (800130c <MX_ADC1_Init+0xe0>)
 8001246:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001248:	4b2f      	ldr	r3, [pc, #188]	@ (8001308 <MX_ADC1_Init+0xdc>)
 800124a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800124e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001250:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <MX_ADC1_Init+0xdc>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001256:	4b2c      	ldr	r3, [pc, #176]	@ (8001308 <MX_ADC1_Init+0xdc>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800125c:	4b2a      	ldr	r3, [pc, #168]	@ (8001308 <MX_ADC1_Init+0xdc>)
 800125e:	2201      	movs	r2, #1
 8001260:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001262:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <MX_ADC1_Init+0xdc>)
 8001264:	2204      	movs	r2, #4
 8001266:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001268:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <MX_ADC1_Init+0xdc>)
 800126a:	2200      	movs	r2, #0
 800126c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <MX_ADC1_Init+0xdc>)
 8001270:	2200      	movs	r2, #0
 8001272:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001274:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <MX_ADC1_Init+0xdc>)
 8001276:	2202      	movs	r2, #2
 8001278:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <MX_ADC1_Init+0xdc>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001282:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <MX_ADC1_Init+0xdc>)
 8001284:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8001288:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_ADC1_Init+0xdc>)
 800128c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001290:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <MX_ADC1_Init+0xdc>)
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_ADC1_Init+0xdc>)
 800129c:	2200      	movs	r2, #0
 800129e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_ADC1_Init+0xdc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a8:	4817      	ldr	r0, [pc, #92]	@ (8001308 <MX_ADC1_Init+0xdc>)
 80012aa:	f000 fe09 	bl	8001ec0 <HAL_ADC_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80012b4:	f000 f8fe 	bl	80014b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012b8:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <MX_ADC1_Init+0xe4>)
 80012ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012bc:	2306      	movs	r3, #6
 80012be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012c4:	237f      	movs	r3, #127	@ 0x7f
 80012c6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c8:	2304      	movs	r3, #4
 80012ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <MX_ADC1_Init+0xdc>)
 80012d6:	f000 ffcd 	bl	8002274 <HAL_ADC_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80012e0:	f000 f8e8 	bl	80014b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <MX_ADC1_Init+0xe8>)
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012e8:	230c      	movs	r3, #12
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_ADC1_Init+0xdc>)
 80012f2:	f000 ffbf 	bl	8002274 <HAL_ADC_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80012fc:	f000 f8da 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001f0 	.word	0x200001f0
 800130c:	50040000 	.word	0x50040000
 8001310:	21800100 	.word	0x21800100
 8001314:	25b00200 	.word	0x25b00200

08001318 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_TIM6_Init+0x64>)
 800132a:	4a15      	ldr	r2, [pc, #84]	@ (8001380 <MX_TIM6_Init+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32 - 1;
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <MX_TIM6_Init+0x64>)
 8001330:	221f      	movs	r2, #31
 8001332:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_TIM6_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000 - 1;
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <MX_TIM6_Init+0x64>)
 800133c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001340:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_TIM6_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <MX_TIM6_Init+0x64>)
 800134a:	f003 fb3d 	bl	80049c8 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001354:	f000 f8ae 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001358:	2320      	movs	r3, #32
 800135a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_TIM6_Init+0x64>)
 8001366:	f003 fd6b 	bl	8004e40 <HAL_TIMEx_MasterConfigSynchronization>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001370:	f000 f8a0 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	2000029c 	.word	0x2000029c
 8001380:	40001000 	.word	0x40001000

08001384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001388:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 800138a:	4a15      	ldr	r2, [pc, #84]	@ (80013e0 <MX_USART2_UART_Init+0x5c>)
 800138c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138e:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013c8:	f003 fdbe 	bl	8004f48 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013d2:	f000 f86f 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200002e8 	.word	0x200002e8
 80013e0:	40004400 	.word	0x40004400

080013e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ea:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <MX_DMA_Init+0x38>)
 80013ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ee:	4a0b      	ldr	r2, [pc, #44]	@ (800141c <MX_DMA_Init+0x38>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <MX_DMA_Init+0x38>)
 80013f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	200b      	movs	r0, #11
 8001408:	f001 fd0b 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800140c:	200b      	movs	r0, #11
 800140e:	f001 fd24 	bl	8002e5a <HAL_NVIC_EnableIRQ>

}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <MX_GPIO_Init+0x8c>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ac <MX_GPIO_Init+0x8c>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <MX_GPIO_Init+0x8c>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <MX_GPIO_Init+0x8c>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	4a16      	ldr	r2, [pc, #88]	@ (80014ac <MX_GPIO_Init+0x8c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_GPIO_Init+0x8c>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_GPIO_Init+0x8c>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	4a10      	ldr	r2, [pc, #64]	@ (80014ac <MX_GPIO_Init+0x8c>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_GPIO_Init+0x8c>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2108      	movs	r1, #8
 8001482:	480b      	ldr	r0, [pc, #44]	@ (80014b0 <MX_GPIO_Init+0x90>)
 8001484:	f002 f8e4 	bl	8003650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001488:	2308      	movs	r3, #8
 800148a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4619      	mov	r1, r3
 800149e:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <MX_GPIO_Init+0x90>)
 80014a0:	f001 ff6c 	bl	800337c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000400 	.word	0x48000400

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_MspInit+0x44>)
 80014c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001504 <HAL_MspInit+0x44>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_MspInit+0x44>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_MspInit+0x44>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e2:	4a08      	ldr	r2, [pc, #32]	@ (8001504 <HAL_MspInit+0x44>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_MspInit+0x44>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b09e      	sub	sp, #120	@ 0x78
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	2254      	movs	r2, #84	@ 0x54
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f005 fdda 	bl	80070e2 <memset>
  if(hadc->Instance==ADC1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a3b      	ldr	r2, [pc, #236]	@ (8001620 <HAL_ADC_MspInit+0x118>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d16f      	bne.n	8001618 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001538:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800153c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800153e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001542:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001544:	2301      	movs	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001548:	2301      	movs	r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800154c:	2310      	movs	r3, #16
 800154e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001550:	2307      	movs	r3, #7
 8001552:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001554:	2302      	movs	r3, #2
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001558:	2302      	movs	r3, #2
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800155c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4618      	mov	r0, r3
 8001568:	f002 ff36 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001572:	f7ff ff9f 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001576:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <HAL_ADC_MspInit+0x11c>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a2a      	ldr	r2, [pc, #168]	@ (8001624 <HAL_ADC_MspInit+0x11c>)
 800157c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <HAL_ADC_MspInit+0x11c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	4b25      	ldr	r3, [pc, #148]	@ (8001624 <HAL_ADC_MspInit+0x11c>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a24      	ldr	r2, [pc, #144]	@ (8001624 <HAL_ADC_MspInit+0x11c>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b22      	ldr	r3, [pc, #136]	@ (8001624 <HAL_ADC_MspInit+0x11c>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80015a6:	2318      	movs	r3, #24
 80015a8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015aa:	230b      	movs	r3, #11
 80015ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015bc:	f001 fede 	bl	800337c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 80015c2:	4a1a      	ldr	r2, [pc, #104]	@ (800162c <HAL_ADC_MspInit+0x124>)
 80015c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 80015da:	2280      	movs	r2, #128	@ 0x80
 80015dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 80015e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 80015e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 80015f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015fc:	480a      	ldr	r0, [pc, #40]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 80015fe:	f001 fc47 	bl	8002e90 <HAL_DMA_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8001608:	f7ff ff54 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 8001610:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <HAL_ADC_MspInit+0x120>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001618:	bf00      	nop
 800161a:	3778      	adds	r7, #120	@ 0x78
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	50040000 	.word	0x50040000
 8001624:	40021000 	.word	0x40021000
 8001628:	20000254 	.word	0x20000254
 800162c:	40020008 	.word	0x40020008

08001630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <HAL_TIM_Base_MspInit+0x44>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d113      	bne.n	800166a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <HAL_TIM_Base_MspInit+0x48>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001646:	4a0c      	ldr	r2, [pc, #48]	@ (8001678 <HAL_TIM_Base_MspInit+0x48>)
 8001648:	f043 0310 	orr.w	r3, r3, #16
 800164c:	6593      	str	r3, [r2, #88]	@ 0x58
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_TIM_Base_MspInit+0x48>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2036      	movs	r0, #54	@ 0x36
 8001660:	f001 fbdf 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001664:	2036      	movs	r0, #54	@ 0x36
 8001666:	f001 fbf8 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40001000 	.word	0x40001000
 8001678:	40021000 	.word	0x40021000

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b09e      	sub	sp, #120	@ 0x78
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	2254      	movs	r2, #84	@ 0x54
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f005 fd20 	bl	80070e2 <memset>
  if(huart->Instance==USART2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001758 <HAL_UART_MspInit+0xdc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d150      	bne.n	800174e <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fe8d 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016c4:	f7ff fef6 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c8:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_UART_MspInit+0xe0>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016cc:	4a23      	ldr	r2, [pc, #140]	@ (800175c <HAL_UART_MspInit+0xe0>)
 80016ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80016d4:	4b21      	ldr	r3, [pc, #132]	@ (800175c <HAL_UART_MspInit+0xe0>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <HAL_UART_MspInit+0xe0>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <HAL_UART_MspInit+0xe0>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ec:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <HAL_UART_MspInit+0xe0>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80016f8:	2304      	movs	r3, #4
 80016fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001708:	2307      	movs	r3, #7
 800170a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001716:	f001 fe31 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800171a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800171e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800172c:	2303      	movs	r3, #3
 800172e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173a:	f001 fe1f 	bl	800337c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2026      	movs	r0, #38	@ 0x26
 8001744:	f001 fb6d 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001748:	2026      	movs	r0, #38	@ 0x26
 800174a:	f001 fb86 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3778      	adds	r7, #120	@ 0x78
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40004400 	.word	0x40004400
 800175c:	40021000 	.word	0x40021000

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <NMI_Handler+0x4>

08001768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <MemManage_Handler+0x4>

08001778 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <UsageFault_Handler+0x4>

08001788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b6:	f000 f977 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <DMA1_Channel1_IRQHandler+0x10>)
 80017c6:	f001 fcfa 	bl	80031be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000254 	.word	0x20000254

080017d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <USART2_IRQHandler+0x10>)
 80017da:	f003 fcd9 	bl	8005190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002e8 	.word	0x200002e8

080017e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <TIM6_DAC_IRQHandler+0x10>)
 80017ee:	f003 f98f 	bl	8004b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000029c 	.word	0x2000029c

080017fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_kill>:

int _kill(int pid, int sig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001816:	f005 fcb7 	bl	8007188 <__errno>
 800181a:	4603      	mov	r3, r0
 800181c:	2216      	movs	r2, #22
 800181e:	601a      	str	r2, [r3, #0]
  return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_exit>:

void _exit (int status)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffe7 	bl	800180c <_kill>
  while (1) {}    /* Make sure we hang here */
 800183e:	bf00      	nop
 8001840:	e7fd      	b.n	800183e <_exit+0x12>

08001842 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e00a      	b.n	800186a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001854:	f3af 8000 	nop.w
 8001858:	4601      	mov	r1, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	60ba      	str	r2, [r7, #8]
 8001860:	b2ca      	uxtb	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbf0      	blt.n	8001854 <_read+0x12>
  }

  return len;
 8001872:	687b      	ldr	r3, [r7, #4]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e009      	b.n	80018a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	60ba      	str	r2, [r7, #8]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbf1      	blt.n	800188e <_write+0x12>
  }
  return len;
 80018aa:	687b      	ldr	r3, [r7, #4]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_close>:

int _close(int file)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018dc:	605a      	str	r2, [r3, #4]
  return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_isatty>:

int _isatty(int file)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	@ (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f005 fc1c 	bl	8007188 <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20010000 	.word	0x20010000
 800197c:	00000400 	.word	0x00000400
 8001980:	20003294 	.word	0x20003294
 8001984:	200033e8 	.word	0x200033e8

08001988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	@ (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff ffea 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b6:	490d      	ldr	r1, [pc, #52]	@ (80019ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b8:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <LoopForever+0xe>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019cc:	4c0a      	ldr	r4, [pc, #40]	@ (80019f8 <LoopForever+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f005 fbdb 	bl	8007194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019de:	f7ff faeb 	bl	8000fb8 <main>

080019e2 <LoopForever>:

LoopForever:
    b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019f0:	080096fc 	.word	0x080096fc
  ldr r2, =_sbss
 80019f4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019f8:	200033e8 	.word	0x200033e8

080019fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC1_IRQHandler>

080019fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f001 f9ff 	bl	8002e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 f80e 	bl	8001a30 <HAL_InitTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	e001      	b.n	8001a24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a20:	f7ff fd4e 	bl	80014c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a3c:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <HAL_InitTick+0x6c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d023      	beq.n	8001a8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <HAL_InitTick+0x70>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <HAL_InitTick+0x6c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 fa0b 	bl	8002e76 <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10f      	bne.n	8001a86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d809      	bhi.n	8001a80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f001 f9d5 	bl	8002e22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a78:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <HAL_InitTick+0x74>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e004      	b.n	8001a90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	e001      	b.n	8001a90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20003298 	.word	0x20003298

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20003298 	.word	0x20003298

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008

08001b30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	609a      	str	r2, [r3, #8]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3360      	adds	r3, #96	@ 0x60
 8001baa:	461a      	mov	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <LL_ADC_SetOffset+0x44>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	03fff000 	.word	0x03fff000

08001be0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3360      	adds	r3, #96	@ 0x60
 8001bee:	461a      	mov	r2, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3360      	adds	r3, #96	@ 0x60
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3330      	adds	r3, #48	@ 0x30
 8001c78:	461a      	mov	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	211f      	movs	r1, #31
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	0e9b      	lsrs	r3, r3, #26
 8001ca0:	f003 011f 	and.w	r1, r3, #31
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cb4:	bf00      	nop
 8001cb6:	371c      	adds	r7, #28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3314      	adds	r3, #20
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	0e5b      	lsrs	r3, r3, #25
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	0d1b      	lsrs	r3, r3, #20
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2107      	movs	r1, #7
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	0d1b      	lsrs	r3, r3, #20
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	431a      	orrs	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	43db      	mvns	r3, r3
 8001d32:	401a      	ands	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0318 	and.w	r3, r3, #24
 8001d3a:	4908      	ldr	r1, [pc, #32]	@ (8001d5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d3c:	40d9      	lsrs	r1, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	400b      	ands	r3, r1
 8001d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d46:	431a      	orrs	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	0007ffff 	.word	0x0007ffff

08001d60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6093      	str	r3, [r2, #8]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d98:	d101      	bne.n	8001d9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001dbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dc0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001de8:	d101      	bne.n	8001dee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <LL_ADC_IsEnabled+0x18>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <LL_ADC_IsEnabled+0x1a>
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e5e:	f043 0204 	orr.w	r2, r3, #4
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d101      	bne.n	8001e8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d101      	bne.n	8001eb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e126      	b.n	8002128 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fb0d 	bl	8001508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff3f 	bl	8001d84 <LL_ADC_IsDeepPowerDownEnabled>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d004      	beq.n	8001f16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff25 	bl	8001d60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff5a 	bl	8001dd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d115      	bne.n	8001f52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff3e 	bl	8001dac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f30:	4b7f      	ldr	r3, [pc, #508]	@ (8002130 <HAL_ADC_Init+0x270>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	099b      	lsrs	r3, r3, #6
 8001f36:	4a7f      	ldr	r2, [pc, #508]	@ (8002134 <HAL_ADC_Init+0x274>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	3301      	adds	r3, #1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f44:	e002      	b.n	8001f4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f9      	bne.n	8001f46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff3c 	bl	8001dd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10d      	bne.n	8001f7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f66:	f043 0210 	orr.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff75 	bl	8001e72 <LL_ADC_REG_IsConversionOngoing>
 8001f88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 80bf 	bne.w	8002116 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 80bb 	bne.w	8002116 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001fa8:	f043 0202 	orr.w	r2, r3, #2
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff35 	bl	8001e24 <LL_ADC_IsEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fc0:	485d      	ldr	r0, [pc, #372]	@ (8002138 <HAL_ADC_Init+0x278>)
 8001fc2:	f7ff ff2f 	bl	8001e24 <LL_ADC_IsEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	485a      	ldr	r0, [pc, #360]	@ (800213c <HAL_ADC_Init+0x27c>)
 8001fd4:	f7ff fdac 	bl	8001b30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7e5b      	ldrb	r3, [r3, #25]
 8001fdc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001fe8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001fee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d106      	bne.n	8002014 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	3b01      	subs	r3, #1
 800200c:	045b      	lsls	r3, r3, #17
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	d009      	beq.n	8002030 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	4b42      	ldr	r3, [pc, #264]	@ (8002140 <HAL_ADC_Init+0x280>)
 8002038:	4013      	ands	r3, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	69b9      	ldr	r1, [r7, #24]
 8002040:	430b      	orrs	r3, r1
 8002042:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff25 	bl	8001e98 <LL_ADC_INJ_IsConversionOngoing>
 800204e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d13d      	bne.n	80020d2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d13a      	bne.n	80020d2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002060:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002068:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002078:	f023 0302 	bic.w	r3, r3, #2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	69b9      	ldr	r1, [r7, #24]
 8002082:	430b      	orrs	r3, r1
 8002084:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800208c:	2b01      	cmp	r3, #1
 800208e:	d118      	bne.n	80020c2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800209a:	f023 0304 	bic.w	r3, r3, #4
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020ac:	4311      	orrs	r1, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020b2:	430a      	orrs	r2, r1
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	611a      	str	r2, [r3, #16]
 80020c0:	e007      	b.n	80020d2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d10c      	bne.n	80020f4 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	f023 010f 	bic.w	r1, r3, #15
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80020f2:	e007      	b.n	8002104 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 020f 	bic.w	r2, r2, #15
 8002102:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	f023 0303 	bic.w	r3, r3, #3
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	655a      	str	r2, [r3, #84]	@ 0x54
 8002114:	e007      	b.n	8002126 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	f043 0210 	orr.w	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002126:	7ffb      	ldrb	r3, [r7, #31]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000000 	.word	0x20000000
 8002134:	053e2d63 	.word	0x053e2d63
 8002138:	50040000 	.word	0x50040000
 800213c:	50040300 	.word	0x50040300
 8002140:	fff0c007 	.word	0xfff0c007

08002144 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fe8c 	bl	8001e72 <LL_ADC_REG_IsConversionOngoing>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d167      	bne.n	8002230 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_ADC_Start_DMA+0x2a>
 800216a:	2302      	movs	r3, #2
 800216c:	e063      	b.n	8002236 <HAL_ADC_Start_DMA+0xf2>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fc5e 	bl	8002a38 <ADC_Enable>
 800217c:	4603      	mov	r3, r0
 800217e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d14f      	bne.n	8002226 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	f023 0206 	bic.w	r2, r3, #6
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80021b2:	e002      	b.n	80021ba <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	4a20      	ldr	r2, [pc, #128]	@ (8002240 <HAL_ADC_Start_DMA+0xfc>)
 80021c0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002244 <HAL_ADC_Start_DMA+0x100>)
 80021c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002248 <HAL_ADC_Start_DMA+0x104>)
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	221c      	movs	r2, #28
 80021d8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0210 	orr.w	r2, r2, #16
 80021f0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3340      	adds	r3, #64	@ 0x40
 800220c:	4619      	mov	r1, r3
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f000 fef5 	bl	8003000 <HAL_DMA_Start_IT>
 8002216:	4603      	mov	r3, r0
 8002218:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fe13 	bl	8001e4a <LL_ADC_REG_StartConversion>
 8002224:	e006      	b.n	8002234 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800222e:	e001      	b.n	8002234 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002230:	2302      	movs	r3, #2
 8002232:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002234:	7dfb      	ldrb	r3, [r7, #23]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	08002b45 	.word	0x08002b45
 8002244:	08002c1d 	.word	0x08002c1d
 8002248:	08002c39 	.word	0x08002c39

0800224c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0b6      	sub	sp, #216	@ 0xd8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x22>
 8002292:	2302      	movs	r3, #2
 8002294:	e3bb      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x79a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fde5 	bl	8001e72 <LL_ADC_REG_IsConversionOngoing>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 83a0 	bne.w	80029f0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d824      	bhi.n	800230a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	3b02      	subs	r3, #2
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d81b      	bhi.n	8002302 <HAL_ADC_ConfigChannel+0x8e>
 80022ca:	a201      	add	r2, pc, #4	@ (adr r2, 80022d0 <HAL_ADC_ConfigChannel+0x5c>)
 80022cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d0:	080022e1 	.word	0x080022e1
 80022d4:	080022e9 	.word	0x080022e9
 80022d8:	080022f1 	.word	0x080022f1
 80022dc:	080022f9 	.word	0x080022f9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80022e0:	230c      	movs	r3, #12
 80022e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022e6:	e010      	b.n	800230a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80022e8:	2312      	movs	r3, #18
 80022ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022ee:	e00c      	b.n	800230a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80022f0:	2318      	movs	r3, #24
 80022f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022f6:	e008      	b.n	800230a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80022f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002300:	e003      	b.n	800230a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002302:	2306      	movs	r3, #6
 8002304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002308:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002318:	f7ff fca6 	bl	8001c68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fda6 	bl	8001e72 <LL_ADC_REG_IsConversionOngoing>
 8002326:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fdb2 	bl	8001e98 <LL_ADC_INJ_IsConversionOngoing>
 8002334:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 81a4 	bne.w	800268a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002342:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 819f 	bne.w	800268a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	461a      	mov	r2, r3
 800235a:	f7ff fcb1 	bl	8001cc0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	08db      	lsrs	r3, r3, #3
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d00a      	beq.n	8002396 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6919      	ldr	r1, [r3, #16]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002390:	f7ff fc02 	bl	8001b98 <LL_ADC_SetOffset>
 8002394:	e179      	b.n	800268a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fc1f 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x14e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fc14 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	e01e      	b.n	8002400 <HAL_ADC_ConfigChannel+0x18c>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fc09 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80023f0:	2320      	movs	r3, #32
 80023f2:	e004      	b.n	80023fe <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80023f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1a4>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0e9b      	lsrs	r3, r3, #26
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	e018      	b.n	800244a <HAL_ADC_ConfigChannel+0x1d6>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800242c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002430:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e004      	b.n	800244a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002440:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800244a:	429a      	cmp	r2, r3
 800244c:	d106      	bne.n	800245c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2200      	movs	r2, #0
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fbd8 	bl	8001c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fbbc 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10a      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x214>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fbb1 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	0e9b      	lsrs	r3, r3, #26
 8002482:	f003 021f 	and.w	r2, r3, #31
 8002486:	e01e      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x252>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2101      	movs	r1, #1
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fba6 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002494:	4603      	mov	r3, r0
 8002496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80024a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80024ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80024b6:	2320      	movs	r3, #32
 80024b8:	e004      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80024ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d105      	bne.n	80024de <HAL_ADC_ConfigChannel+0x26a>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	0e9b      	lsrs	r3, r3, #26
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	e018      	b.n	8002510 <HAL_ADC_ConfigChannel+0x29c>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80024f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80024fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002502:	2320      	movs	r3, #32
 8002504:	e004      	b.n	8002510 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002506:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002510:	429a      	cmp	r2, r3
 8002512:	d106      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2200      	movs	r2, #0
 800251a:	2101      	movs	r1, #1
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fb75 	bl	8001c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2102      	movs	r1, #2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fb59 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <HAL_ADC_ConfigChannel+0x2da>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2102      	movs	r1, #2
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fb4e 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	0e9b      	lsrs	r3, r3, #26
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	e01e      	b.n	800258c <HAL_ADC_ConfigChannel+0x318>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2102      	movs	r1, #2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fb43 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800256c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002570:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800257c:	2320      	movs	r3, #32
 800257e:	e004      	b.n	800258a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x330>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	e014      	b.n	80025ce <HAL_ADC_ConfigChannel+0x35a>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80025b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80025b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e004      	b.n	80025ce <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80025c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d106      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	2102      	movs	r1, #2
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fb16 	bl	8001c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2103      	movs	r1, #3
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fafa 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <HAL_ADC_ConfigChannel+0x398>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2103      	movs	r1, #3
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff faef 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002602:	4603      	mov	r3, r0
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	f003 021f 	and.w	r2, r3, #31
 800260a:	e017      	b.n	800263c <HAL_ADC_ConfigChannel+0x3c8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2103      	movs	r1, #3
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fae4 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002618:	4603      	mov	r3, r0
 800261a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002626:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800262e:	2320      	movs	r3, #32
 8002630:	e003      	b.n	800263a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002632:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x3e0>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	e011      	b.n	8002678 <HAL_ADC_ConfigChannel+0x404>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002664:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002666:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800266c:	2320      	movs	r3, #32
 800266e:	e003      	b.n	8002678 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002670:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002678:	429a      	cmp	r2, r3
 800267a:	d106      	bne.n	800268a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2200      	movs	r2, #0
 8002682:	2103      	movs	r1, #3
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fac1 	bl	8001c0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fbc8 	bl	8001e24 <LL_ADC_IsEnabled>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 8140 	bne.w	800291c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6819      	ldr	r1, [r3, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	461a      	mov	r2, r3
 80026aa:	f7ff fb35 	bl	8001d18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4a8f      	ldr	r2, [pc, #572]	@ (80028f0 <HAL_ADC_ConfigChannel+0x67c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	f040 8131 	bne.w	800291c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10b      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x46e>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	3301      	adds	r3, #1
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2b09      	cmp	r3, #9
 80026d8:	bf94      	ite	ls
 80026da:	2301      	movls	r3, #1
 80026dc:	2300      	movhi	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	e019      	b.n	8002716 <HAL_ADC_ConfigChannel+0x4a2>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e003      	b.n	8002706 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80026fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2b09      	cmp	r3, #9
 800270e:	bf94      	ite	ls
 8002710:	2301      	movls	r3, #1
 8002712:	2300      	movhi	r3, #0
 8002714:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002716:	2b00      	cmp	r3, #0
 8002718:	d079      	beq.n	800280e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002722:	2b00      	cmp	r3, #0
 8002724:	d107      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x4c2>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	0e9b      	lsrs	r3, r3, #26
 800272c:	3301      	adds	r3, #1
 800272e:	069b      	lsls	r3, r3, #26
 8002730:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002734:	e015      	b.n	8002762 <HAL_ADC_ConfigChannel+0x4ee>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002746:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800274e:	2320      	movs	r3, #32
 8002750:	e003      	b.n	800275a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	3301      	adds	r3, #1
 800275c:	069b      	lsls	r3, r3, #26
 800275e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x50e>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	0e9b      	lsrs	r3, r3, #26
 8002774:	3301      	adds	r3, #1
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	2101      	movs	r1, #1
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	e017      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x53e>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002792:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800279a:	2320      	movs	r3, #32
 800279c:	e003      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800279e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	2101      	movs	r1, #1
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	ea42 0103 	orr.w	r1, r2, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10a      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x564>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	0e9b      	lsrs	r3, r3, #26
 80027c8:	3301      	adds	r3, #1
 80027ca:	f003 021f 	and.w	r2, r3, #31
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	051b      	lsls	r3, r3, #20
 80027d6:	e018      	b.n	800280a <HAL_ADC_ConfigChannel+0x596>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e003      	b.n	80027fc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80027f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 021f 	and.w	r2, r3, #31
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800280a:	430b      	orrs	r3, r1
 800280c:	e081      	b.n	8002912 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002816:	2b00      	cmp	r3, #0
 8002818:	d107      	bne.n	800282a <HAL_ADC_ConfigChannel+0x5b6>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	0e9b      	lsrs	r3, r3, #26
 8002820:	3301      	adds	r3, #1
 8002822:	069b      	lsls	r3, r3, #26
 8002824:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002828:	e015      	b.n	8002856 <HAL_ADC_ConfigChannel+0x5e2>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002842:	2320      	movs	r3, #32
 8002844:	e003      	b.n	800284e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	3301      	adds	r3, #1
 8002850:	069b      	lsls	r3, r3, #26
 8002852:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x602>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	3301      	adds	r3, #1
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	e017      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x632>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	61bb      	str	r3, [r7, #24]
  return result;
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800288e:	2320      	movs	r3, #32
 8002890:	e003      	b.n	800289a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	ea42 0103 	orr.w	r1, r2, r3
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x65e>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	3301      	adds	r3, #1
 80028be:	f003 021f 	and.w	r2, r3, #31
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	3b1e      	subs	r3, #30
 80028ca:	051b      	lsls	r3, r3, #20
 80028cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028d0:	e01e      	b.n	8002910 <HAL_ADC_ConfigChannel+0x69c>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	60fb      	str	r3, [r7, #12]
  return result;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d104      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e006      	b.n	80028fc <HAL_ADC_ConfigChannel+0x688>
 80028ee:	bf00      	nop
 80028f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 021f 	and.w	r2, r3, #31
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	3b1e      	subs	r3, #30
 800290a:	051b      	lsls	r3, r3, #20
 800290c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002910:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002916:	4619      	mov	r1, r3
 8002918:	f7ff f9d2 	bl	8001cc0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b3d      	ldr	r3, [pc, #244]	@ (8002a18 <HAL_ADC_ConfigChannel+0x7a4>)
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d06c      	beq.n	8002a02 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002928:	483c      	ldr	r0, [pc, #240]	@ (8002a1c <HAL_ADC_ConfigChannel+0x7a8>)
 800292a:	f7ff f927 	bl	8001b7c <LL_ADC_GetCommonPathInternalCh>
 800292e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3a      	ldr	r2, [pc, #232]	@ (8002a20 <HAL_ADC_ConfigChannel+0x7ac>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d127      	bne.n	800298c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800293c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002940:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d121      	bne.n	800298c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a35      	ldr	r2, [pc, #212]	@ (8002a24 <HAL_ADC_ConfigChannel+0x7b0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d157      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002952:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002956:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800295a:	4619      	mov	r1, r3
 800295c:	482f      	ldr	r0, [pc, #188]	@ (8002a1c <HAL_ADC_ConfigChannel+0x7a8>)
 800295e:	f7ff f8fa 	bl	8001b56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002962:	4b31      	ldr	r3, [pc, #196]	@ (8002a28 <HAL_ADC_ConfigChannel+0x7b4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	4a30      	ldr	r2, [pc, #192]	@ (8002a2c <HAL_ADC_ConfigChannel+0x7b8>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800297c:	e002      	b.n	8002984 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3b01      	subs	r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f9      	bne.n	800297e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800298a:	e03a      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a27      	ldr	r2, [pc, #156]	@ (8002a30 <HAL_ADC_ConfigChannel+0x7bc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d113      	bne.n	80029be <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800299a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a24 <HAL_ADC_ConfigChannel+0x7b0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d12a      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b4:	4619      	mov	r1, r3
 80029b6:	4819      	ldr	r0, [pc, #100]	@ (8002a1c <HAL_ADC_ConfigChannel+0x7a8>)
 80029b8:	f7ff f8cd 	bl	8001b56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029bc:	e021      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a34 <HAL_ADC_ConfigChannel+0x7c0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d11c      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d116      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a12      	ldr	r2, [pc, #72]	@ (8002a24 <HAL_ADC_ConfigChannel+0x7b0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d111      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029e6:	4619      	mov	r1, r3
 80029e8:	480c      	ldr	r0, [pc, #48]	@ (8002a1c <HAL_ADC_ConfigChannel+0x7a8>)
 80029ea:	f7ff f8b4 	bl	8001b56 <LL_ADC_SetCommonPathInternalCh>
 80029ee:	e008      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	37d8      	adds	r7, #216	@ 0xd8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	80080000 	.word	0x80080000
 8002a1c:	50040300 	.word	0x50040300
 8002a20:	c7520000 	.word	0xc7520000
 8002a24:	50040000 	.word	0x50040000
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	053e2d63 	.word	0x053e2d63
 8002a30:	cb840000 	.word	0xcb840000
 8002a34:	80000001 	.word	0x80000001

08002a38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f9eb 	bl	8001e24 <LL_ADC_IsEnabled>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d169      	bne.n	8002b28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	4b36      	ldr	r3, [pc, #216]	@ (8002b34 <ADC_Enable+0xfc>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a66:	f043 0210 	orr.w	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e055      	b.n	8002b2a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f9ba 	bl	8001dfc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a88:	482b      	ldr	r0, [pc, #172]	@ (8002b38 <ADC_Enable+0x100>)
 8002a8a:	f7ff f877 	bl	8001b7c <LL_ADC_GetCommonPathInternalCh>
 8002a8e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a98:	4b28      	ldr	r3, [pc, #160]	@ (8002b3c <ADC_Enable+0x104>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	4a28      	ldr	r2, [pc, #160]	@ (8002b40 <ADC_Enable+0x108>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	099b      	lsrs	r3, r3, #6
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ab2:	e002      	b.n	8002aba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f9      	bne.n	8002ab4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ac0:	f7ff f806 	bl	8001ad0 <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ac6:	e028      	b.n	8002b1a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff f9a9 	bl	8001e24 <LL_ADC_IsEnabled>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f98d 	bl	8001dfc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ae2:	f7fe fff5 	bl	8001ad0 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d914      	bls.n	8002b1a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d00d      	beq.n	8002b1a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b02:	f043 0210 	orr.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e007      	b.n	8002b2a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d1cf      	bne.n	8002ac8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	8000003f 	.word	0x8000003f
 8002b38:	50040300 	.word	0x50040300
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	053e2d63 	.word	0x053e2d63

08002b44 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b56:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d14b      	bne.n	8002bf6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b62:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d021      	beq.n	8002bbc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f860 	bl	8001c42 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d032      	beq.n	8002bee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d12b      	bne.n	8002bee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11f      	bne.n	8002bee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bba:	e018      	b.n	8002bee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d111      	bne.n	8002bee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f7fe f970 	bl	8000ed4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bf4:	e00e      	b.n	8002c14 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff fb2c 	bl	8002260 <HAL_ADC_ErrorCallback>
}
 8002c08:	e004      	b.n	8002c14 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff fb0e 	bl	800224c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	f043 0204 	orr.w	r2, r3, #4
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff fafe 	bl	8002260 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9e:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	60d3      	str	r3, [r2, #12]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <__NVIC_GetPriorityGrouping+0x18>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 0307 	and.w	r3, r3, #7
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	db0b      	blt.n	8002cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	4907      	ldr	r1, [pc, #28]	@ (8002d08 <__NVIC_EnableIRQ+0x38>)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db0a      	blt.n	8002d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	490c      	ldr	r1, [pc, #48]	@ (8002d58 <__NVIC_SetPriority+0x4c>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d34:	e00a      	b.n	8002d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4908      	ldr	r1, [pc, #32]	@ (8002d5c <__NVIC_SetPriority+0x50>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	3b04      	subs	r3, #4
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	761a      	strb	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	@ 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	bf28      	it	cs
 8002d7e:	2304      	movcs	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d902      	bls.n	8002d90 <NVIC_EncodePriority+0x30>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3b03      	subs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <NVIC_EncodePriority+0x32>
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	4313      	orrs	r3, r2
         );
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	@ 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd8:	d301      	bcc.n	8002dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00f      	b.n	8002dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dde:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <SysTick_Config+0x40>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de6:	210f      	movs	r1, #15
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f7ff ff8e 	bl	8002d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <SysTick_Config+0x40>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df6:	4b04      	ldr	r3, [pc, #16]	@ (8002e08 <SysTick_Config+0x40>)
 8002df8:	2207      	movs	r2, #7
 8002dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	e000e010 	.word	0xe000e010

08002e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ff29 	bl	8002c6c <__NVIC_SetPriorityGrouping>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e34:	f7ff ff3e 	bl	8002cb4 <__NVIC_GetPriorityGrouping>
 8002e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	6978      	ldr	r0, [r7, #20]
 8002e40:	f7ff ff8e 	bl	8002d60 <NVIC_EncodePriority>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff5d 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff31 	bl	8002cd0 <__NVIC_EnableIRQ>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ffa2 	bl	8002dc8 <SysTick_Config>
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e098      	b.n	8002fd4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8002fe0 <HAL_DMA_Init+0x150>)
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d80f      	bhi.n	8002ece <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe4 <HAL_DMA_Init+0x154>)
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8002fe8 <HAL_DMA_Init+0x158>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	009a      	lsls	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a48      	ldr	r2, [pc, #288]	@ (8002fec <HAL_DMA_Init+0x15c>)
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ecc:	e00e      	b.n	8002eec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b46      	ldr	r3, [pc, #280]	@ (8002ff0 <HAL_DMA_Init+0x160>)
 8002ed6:	4413      	add	r3, r2
 8002ed8:	4a43      	ldr	r2, [pc, #268]	@ (8002fe8 <HAL_DMA_Init+0x158>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	009a      	lsls	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a42      	ldr	r2, [pc, #264]	@ (8002ff4 <HAL_DMA_Init+0x164>)
 8002eea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f46:	d039      	beq.n	8002fbc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	4a27      	ldr	r2, [pc, #156]	@ (8002fec <HAL_DMA_Init+0x15c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d11a      	bne.n	8002f88 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f52:	4b29      	ldr	r3, [pc, #164]	@ (8002ff8 <HAL_DMA_Init+0x168>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	f003 031c 	and.w	r3, r3, #28
 8002f5e:	210f      	movs	r1, #15
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	4924      	ldr	r1, [pc, #144]	@ (8002ff8 <HAL_DMA_Init+0x168>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f6c:	4b22      	ldr	r3, [pc, #136]	@ (8002ff8 <HAL_DMA_Init+0x168>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f78:	f003 031c 	and.w	r3, r3, #28
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	491d      	ldr	r1, [pc, #116]	@ (8002ff8 <HAL_DMA_Init+0x168>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
 8002f86:	e019      	b.n	8002fbc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f88:	4b1c      	ldr	r3, [pc, #112]	@ (8002ffc <HAL_DMA_Init+0x16c>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f90:	f003 031c 	and.w	r3, r3, #28
 8002f94:	210f      	movs	r1, #15
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	4917      	ldr	r1, [pc, #92]	@ (8002ffc <HAL_DMA_Init+0x16c>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fa2:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <HAL_DMA_Init+0x16c>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	f003 031c 	and.w	r3, r3, #28
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	4911      	ldr	r1, [pc, #68]	@ (8002ffc <HAL_DMA_Init+0x16c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40020407 	.word	0x40020407
 8002fe4:	bffdfff8 	.word	0xbffdfff8
 8002fe8:	cccccccd 	.word	0xcccccccd
 8002fec:	40020000 	.word	0x40020000
 8002ff0:	bffdfbf8 	.word	0xbffdfbf8
 8002ff4:	40020400 	.word	0x40020400
 8002ff8:	400200a8 	.word	0x400200a8
 8002ffc:	400204a8 	.word	0x400204a8

08003000 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Start_IT+0x20>
 800301c:	2302      	movs	r3, #2
 800301e:	e04b      	b.n	80030b8 <HAL_DMA_Start_IT+0xb8>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d13a      	bne.n	80030aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f95f 	bl	800331c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 020e 	orr.w	r2, r2, #14
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e00f      	b.n	8003098 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0204 	bic.w	r2, r2, #4
 8003086:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 020a 	orr.w	r2, r2, #10
 8003096:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e005      	b.n	80030b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
 80030b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d008      	beq.n	80030ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2204      	movs	r2, #4
 80030dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e022      	b.n	8003130 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 020e 	bic.w	r2, r2, #14
 80030f8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f003 021c 	and.w	r2, r3, #28
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f202 	lsl.w	r2, r1, r2
 800311c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d005      	beq.n	8003160 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2204      	movs	r2, #4
 8003158:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e029      	b.n	80031b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 020e 	bic.w	r2, r2, #14
 800316e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003184:	f003 021c 	and.w	r2, r3, #28
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
    }
  }
  return status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	f003 031c 	and.w	r3, r3, #28
 80031de:	2204      	movs	r2, #4
 80031e0:	409a      	lsls	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d026      	beq.n	8003238 <HAL_DMA_IRQHandler+0x7a>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d021      	beq.n	8003238 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d107      	bne.n	8003212 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0204 	bic.w	r2, r2, #4
 8003210:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f003 021c 	and.w	r2, r3, #28
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	2104      	movs	r1, #4
 8003220:	fa01 f202 	lsl.w	r2, r1, r2
 8003224:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	2b00      	cmp	r3, #0
 800322c:	d071      	beq.n	8003312 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003236:	e06c      	b.n	8003312 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	f003 031c 	and.w	r3, r3, #28
 8003240:	2202      	movs	r2, #2
 8003242:	409a      	lsls	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d02e      	beq.n	80032aa <HAL_DMA_IRQHandler+0xec>
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d029      	beq.n	80032aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 020a 	bic.w	r2, r2, #10
 8003272:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003280:	f003 021c 	and.w	r2, r3, #28
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	2102      	movs	r1, #2
 800328a:	fa01 f202 	lsl.w	r2, r1, r2
 800328e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d038      	beq.n	8003312 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032a8:	e033      	b.n	8003312 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	f003 031c 	and.w	r3, r3, #28
 80032b2:	2208      	movs	r2, #8
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d02a      	beq.n	8003314 <HAL_DMA_IRQHandler+0x156>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d025      	beq.n	8003314 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 020e 	bic.w	r2, r2, #14
 80032d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032dc:	f003 021c 	and.w	r2, r3, #28
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	2101      	movs	r1, #1
 80032e6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003306:	2b00      	cmp	r3, #0
 8003308:	d004      	beq.n	8003314 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003312:	bf00      	nop
 8003314:	bf00      	nop
}
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	f003 021c 	and.w	r2, r3, #28
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b10      	cmp	r3, #16
 800334c:	d108      	bne.n	8003360 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800335e:	e007      	b.n	8003370 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	60da      	str	r2, [r3, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338a:	e148      	b.n	800361e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	2101      	movs	r1, #1
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 813a 	beq.w	8003618 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d005      	beq.n	80033bc <HAL_GPIO_Init+0x40>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d130      	bne.n	800341e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	2203      	movs	r2, #3
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033f2:	2201      	movs	r2, #1
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 0201 	and.w	r2, r3, #1
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b03      	cmp	r3, #3
 8003428:	d017      	beq.n	800345a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	2203      	movs	r2, #3
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d123      	bne.n	80034ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	08da      	lsrs	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3208      	adds	r2, #8
 800346e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	220f      	movs	r2, #15
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	08da      	lsrs	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3208      	adds	r2, #8
 80034a8:	6939      	ldr	r1, [r7, #16]
 80034aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2203      	movs	r2, #3
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0203 	and.w	r2, r3, #3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8094 	beq.w	8003618 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f0:	4b52      	ldr	r3, [pc, #328]	@ (800363c <HAL_GPIO_Init+0x2c0>)
 80034f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f4:	4a51      	ldr	r2, [pc, #324]	@ (800363c <HAL_GPIO_Init+0x2c0>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80034fc:	4b4f      	ldr	r3, [pc, #316]	@ (800363c <HAL_GPIO_Init+0x2c0>)
 80034fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003508:	4a4d      	ldr	r2, [pc, #308]	@ (8003640 <HAL_GPIO_Init+0x2c4>)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	3302      	adds	r3, #2
 8003510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	220f      	movs	r2, #15
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003532:	d00d      	beq.n	8003550 <HAL_GPIO_Init+0x1d4>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a43      	ldr	r2, [pc, #268]	@ (8003644 <HAL_GPIO_Init+0x2c8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <HAL_GPIO_Init+0x1d0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a42      	ldr	r2, [pc, #264]	@ (8003648 <HAL_GPIO_Init+0x2cc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_GPIO_Init+0x1cc>
 8003544:	2302      	movs	r3, #2
 8003546:	e004      	b.n	8003552 <HAL_GPIO_Init+0x1d6>
 8003548:	2307      	movs	r3, #7
 800354a:	e002      	b.n	8003552 <HAL_GPIO_Init+0x1d6>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_GPIO_Init+0x1d6>
 8003550:	2300      	movs	r3, #0
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	f002 0203 	and.w	r2, r2, #3
 8003558:	0092      	lsls	r2, r2, #2
 800355a:	4093      	lsls	r3, r2
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003562:	4937      	ldr	r1, [pc, #220]	@ (8003640 <HAL_GPIO_Init+0x2c4>)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3302      	adds	r3, #2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003570:	4b36      	ldr	r3, [pc, #216]	@ (800364c <HAL_GPIO_Init+0x2d0>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	43db      	mvns	r3, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003594:	4a2d      	ldr	r2, [pc, #180]	@ (800364c <HAL_GPIO_Init+0x2d0>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800359a:	4b2c      	ldr	r3, [pc, #176]	@ (800364c <HAL_GPIO_Init+0x2d0>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035be:	4a23      	ldr	r2, [pc, #140]	@ (800364c <HAL_GPIO_Init+0x2d0>)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035c4:	4b21      	ldr	r3, [pc, #132]	@ (800364c <HAL_GPIO_Init+0x2d0>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035e8:	4a18      	ldr	r2, [pc, #96]	@ (800364c <HAL_GPIO_Init+0x2d0>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035ee:	4b17      	ldr	r3, [pc, #92]	@ (800364c <HAL_GPIO_Init+0x2d0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003612:	4a0e      	ldr	r2, [pc, #56]	@ (800364c <HAL_GPIO_Init+0x2d0>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3301      	adds	r3, #1
 800361c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	f47f aeaf 	bne.w	800338c <HAL_GPIO_Init+0x10>
  }
}
 800362e:	bf00      	nop
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40021000 	.word	0x40021000
 8003640:	40010000 	.word	0x40010000
 8003644:	48000400 	.word	0x48000400
 8003648:	48000800 	.word	0x48000800
 800364c:	40010400 	.word	0x40010400

08003650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	807b      	strh	r3, [r7, #2]
 800365c:	4613      	mov	r3, r2
 800365e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003660:	787b      	ldrb	r3, [r7, #1]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800366c:	e002      	b.n	8003674 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003684:	4b05      	ldr	r3, [pc, #20]	@ (800369c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a04      	ldr	r2, [pc, #16]	@ (800369c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800368e:	6013      	str	r3, [r2, #0]
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40007000 	.word	0x40007000

080036a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036a4:	4b04      	ldr	r3, [pc, #16]	@ (80036b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40007000 	.word	0x40007000

080036bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ca:	d130      	bne.n	800372e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036cc:	4b23      	ldr	r3, [pc, #140]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036d8:	d038      	beq.n	800374c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036da:	4b20      	ldr	r3, [pc, #128]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036e2:	4a1e      	ldr	r2, [pc, #120]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2232      	movs	r2, #50	@ 0x32
 80036f0:	fb02 f303 	mul.w	r3, r2, r3
 80036f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003764 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	0c9b      	lsrs	r3, r3, #18
 80036fc:	3301      	adds	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003700:	e002      	b.n	8003708 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3b01      	subs	r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003708:	4b14      	ldr	r3, [pc, #80]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003714:	d102      	bne.n	800371c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f2      	bne.n	8003702 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800371c:	4b0f      	ldr	r3, [pc, #60]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003728:	d110      	bne.n	800374c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e00f      	b.n	800374e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800372e:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800373a:	d007      	beq.n	800374c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800373c:	4b07      	ldr	r3, [pc, #28]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003744:	4a05      	ldr	r2, [pc, #20]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003746:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800374a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40007000 	.word	0x40007000
 8003760:	20000000 	.word	0x20000000
 8003764:	431bde83 	.word	0x431bde83

08003768 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f000 bc02 	b.w	8003f80 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377c:	4b96      	ldr	r3, [pc, #600]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003786:	4b94      	ldr	r3, [pc, #592]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80e4 	beq.w	8003966 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <HAL_RCC_OscConfig+0x4c>
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	f040 808b 	bne.w	80038c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	f040 8087 	bne.w	80038c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037b4:	4b88      	ldr	r3, [pc, #544]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_OscConfig+0x64>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e3d9      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	4b81      	ldr	r3, [pc, #516]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_RCC_OscConfig+0x7e>
 80037dc:	4b7e      	ldr	r3, [pc, #504]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037e4:	e005      	b.n	80037f2 <HAL_RCC_OscConfig+0x8a>
 80037e6:	4b7c      	ldr	r3, [pc, #496]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80037e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d223      	bcs.n	800383e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fd8c 	bl	8004318 <RCC_SetFlashLatencyFromMSIRange>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e3ba      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800380a:	4b73      	ldr	r3, [pc, #460]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a72      	ldr	r2, [pc, #456]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003810:	f043 0308 	orr.w	r3, r3, #8
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b70      	ldr	r3, [pc, #448]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	496d      	ldr	r1, [pc, #436]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003828:	4b6b      	ldr	r3, [pc, #428]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	4968      	ldr	r1, [pc, #416]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
 800383c:	e025      	b.n	800388a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800383e:	4b66      	ldr	r3, [pc, #408]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a65      	ldr	r2, [pc, #404]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003844:	f043 0308 	orr.w	r3, r3, #8
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b63      	ldr	r3, [pc, #396]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4960      	ldr	r1, [pc, #384]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800385c:	4b5e      	ldr	r3, [pc, #376]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	495b      	ldr	r1, [pc, #364]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fd4c 	bl	8004318 <RCC_SetFlashLatencyFromMSIRange>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e37a      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800388a:	f000 fc81 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b51      	ldr	r3, [pc, #324]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	4950      	ldr	r1, [pc, #320]	@ (80039dc <HAL_RCC_OscConfig+0x274>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	fa22 f303 	lsr.w	r3, r2, r3
 80038a6:	4a4e      	ldr	r2, [pc, #312]	@ (80039e0 <HAL_RCC_OscConfig+0x278>)
 80038a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038aa:	4b4e      	ldr	r3, [pc, #312]	@ (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe f8be 	bl	8001a30 <HAL_InitTick>
 80038b4:	4603      	mov	r3, r0
 80038b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d052      	beq.n	8003964 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	e35e      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d032      	beq.n	8003930 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ca:	4b43      	ldr	r3, [pc, #268]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a42      	ldr	r2, [pc, #264]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038d6:	f7fe f8fb 	bl	8001ad0 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038de:	f7fe f8f7 	bl	8001ad0 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e347      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f0:	4b39      	ldr	r3, [pc, #228]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038fc:	4b36      	ldr	r3, [pc, #216]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a35      	ldr	r2, [pc, #212]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003902:	f043 0308 	orr.w	r3, r3, #8
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b33      	ldr	r3, [pc, #204]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4930      	ldr	r1, [pc, #192]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800391a:	4b2f      	ldr	r3, [pc, #188]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	492b      	ldr	r1, [pc, #172]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
 800392e:	e01a      	b.n	8003966 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003930:	4b29      	ldr	r3, [pc, #164]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a28      	ldr	r2, [pc, #160]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800393c:	f7fe f8c8 	bl	8001ad0 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003944:	f7fe f8c4 	bl	8001ad0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e314      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003956:	4b20      	ldr	r3, [pc, #128]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x1dc>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d073      	beq.n	8003a5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d005      	beq.n	8003984 <HAL_RCC_OscConfig+0x21c>
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d10e      	bne.n	800399c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d10b      	bne.n	800399c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003984:	4b14      	ldr	r3, [pc, #80]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d063      	beq.n	8003a58 <HAL_RCC_OscConfig+0x2f0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d15f      	bne.n	8003a58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e2f1      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a4:	d106      	bne.n	80039b4 <HAL_RCC_OscConfig+0x24c>
 80039a6:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a0b      	ldr	r2, [pc, #44]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e025      	b.n	8003a00 <HAL_RCC_OscConfig+0x298>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039bc:	d114      	bne.n	80039e8 <HAL_RCC_OscConfig+0x280>
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a05      	ldr	r2, [pc, #20]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b03      	ldr	r3, [pc, #12]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a02      	ldr	r2, [pc, #8]	@ (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e013      	b.n	8003a00 <HAL_RCC_OscConfig+0x298>
 80039d8:	40021000 	.word	0x40021000
 80039dc:	0800932c 	.word	0x0800932c
 80039e0:	20000000 	.word	0x20000000
 80039e4:	20000004 	.word	0x20000004
 80039e8:	4ba0      	ldr	r3, [pc, #640]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a9f      	ldr	r2, [pc, #636]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b9d      	ldr	r3, [pc, #628]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a9c      	ldr	r2, [pc, #624]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe f862 	bl	8001ad0 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fe f85e 	bl	8001ad0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	@ 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e2ae      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a22:	4b92      	ldr	r3, [pc, #584]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x2a8>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fe f84e 	bl	8001ad0 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fe f84a 	bl	8001ad0 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	@ 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e29a      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a4a:	4b88      	ldr	r3, [pc, #544]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2d0>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d060      	beq.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_OscConfig+0x310>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d119      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d116      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a78:	4b7c      	ldr	r3, [pc, #496]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_OscConfig+0x328>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e277      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b76      	ldr	r3, [pc, #472]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	061b      	lsls	r3, r3, #24
 8003a9e:	4973      	ldr	r1, [pc, #460]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa4:	e040      	b.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d023      	beq.n	8003af6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aae:	4b6f      	ldr	r3, [pc, #444]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6e      	ldr	r2, [pc, #440]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fe f809 	bl	8001ad0 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7fe f805 	bl	8001ad0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e255      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad4:	4b65      	ldr	r3, [pc, #404]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b62      	ldr	r3, [pc, #392]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	495f      	ldr	r1, [pc, #380]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
 8003af4:	e018      	b.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5c      	ldr	r2, [pc, #368]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003afc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fd ffe5 	bl	8001ad0 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7fd ffe1 	bl	8001ad0 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e231      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b1c:	4b53      	ldr	r3, [pc, #332]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d03c      	beq.n	8003bae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01c      	beq.n	8003b76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b42:	4a4a      	ldr	r2, [pc, #296]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd ffc0 	bl	8001ad0 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fd ffbc 	bl	8001ad0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e20c      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b66:	4b41      	ldr	r3, [pc, #260]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ef      	beq.n	8003b54 <HAL_RCC_OscConfig+0x3ec>
 8003b74:	e01b      	b.n	8003bae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b76:	4b3d      	ldr	r3, [pc, #244]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b86:	f7fd ffa3 	bl	8001ad0 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7fd ff9f 	bl	8001ad0 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1ef      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba0:	4b32      	ldr	r3, [pc, #200]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ef      	bne.n	8003b8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80a6 	beq.w	8003d08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10d      	bne.n	8003be8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bcc:	4b27      	ldr	r3, [pc, #156]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd0:	4a26      	ldr	r2, [pc, #152]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd8:	4b24      	ldr	r3, [pc, #144]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be4:	2301      	movs	r3, #1
 8003be6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be8:	4b21      	ldr	r3, [pc, #132]	@ (8003c70 <HAL_RCC_OscConfig+0x508>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d118      	bne.n	8003c26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c70 <HAL_RCC_OscConfig+0x508>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c70 <HAL_RCC_OscConfig+0x508>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c00:	f7fd ff66 	bl	8001ad0 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c08:	f7fd ff62 	bl	8001ad0 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e1b2      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c1a:	4b15      	ldr	r3, [pc, #84]	@ (8003c70 <HAL_RCC_OscConfig+0x508>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d108      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4d8>
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c34:	4a0d      	ldr	r2, [pc, #52]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c3e:	e029      	b.n	8003c94 <HAL_RCC_OscConfig+0x52c>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d115      	bne.n	8003c74 <HAL_RCC_OscConfig+0x50c>
 8003c48:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	4a07      	ldr	r2, [pc, #28]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c50:	f043 0304 	orr.w	r3, r3, #4
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c58:	4b04      	ldr	r3, [pc, #16]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	4a03      	ldr	r2, [pc, #12]	@ (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c68:	e014      	b.n	8003c94 <HAL_RCC_OscConfig+0x52c>
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40007000 	.word	0x40007000
 8003c74:	4b9a      	ldr	r3, [pc, #616]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	4a99      	ldr	r2, [pc, #612]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c84:	4b96      	ldr	r3, [pc, #600]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8a:	4a95      	ldr	r2, [pc, #596]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003c8c:	f023 0304 	bic.w	r3, r3, #4
 8003c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d016      	beq.n	8003cca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fd ff18 	bl	8001ad0 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7fd ff14 	bl	8001ad0 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e162      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cba:	4b89      	ldr	r3, [pc, #548]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0ed      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x53c>
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fd ff01 	bl	8001ad0 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fd fefd 	bl	8001ad0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e14b      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce8:	4b7d      	ldr	r3, [pc, #500]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ed      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf6:	7ffb      	ldrb	r3, [r7, #31]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfc:	4b78      	ldr	r3, [pc, #480]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d00:	4a77      	ldr	r2, [pc, #476]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d03c      	beq.n	8003d8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d1c:	4b70      	ldr	r3, [pc, #448]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d22:	4a6f      	ldr	r2, [pc, #444]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fd fed0 	bl	8001ad0 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d34:	f7fd fecc 	bl	8001ad0 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e11c      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d46:	4b66      	ldr	r3, [pc, #408]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ef      	beq.n	8003d34 <HAL_RCC_OscConfig+0x5cc>
 8003d54:	e01b      	b.n	8003d8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d56:	4b62      	ldr	r3, [pc, #392]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d5c:	4a60      	ldr	r2, [pc, #384]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fd feb3 	bl	8001ad0 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d6e:	f7fd feaf 	bl	8001ad0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0ff      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d80:	4b57      	ldr	r3, [pc, #348]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ef      	bne.n	8003d6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80f3 	beq.w	8003f7e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	f040 80c9 	bne.w	8003f34 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003da2:	4b4f      	ldr	r3, [pc, #316]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f003 0203 	and.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d12c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d123      	bne.n	8003e10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d11b      	bne.n	8003e10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d113      	bne.n	8003e10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	3b01      	subs	r3, #1
 8003df6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d109      	bne.n	8003e10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	085b      	lsrs	r3, r3, #1
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d06b      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d062      	beq.n	8003edc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e16:	4b32      	ldr	r3, [pc, #200]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e0ac      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e26:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e32:	f7fd fe4d 	bl	8001ad0 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3a:	f7fd fe49 	bl	8001ad0 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e099      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4c:	4b24      	ldr	r3, [pc, #144]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f0      	bne.n	8003e3a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e58:	4b21      	ldr	r3, [pc, #132]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	4b21      	ldr	r3, [pc, #132]	@ (8003ee4 <HAL_RCC_OscConfig+0x77c>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	4311      	orrs	r1, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e72:	0212      	lsls	r2, r2, #8
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e7a:	0852      	lsrs	r2, r2, #1
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	0552      	lsls	r2, r2, #21
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e86:	0852      	lsrs	r2, r2, #1
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	0652      	lsls	r2, r2, #25
 8003e8c:	4311      	orrs	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e92:	06d2      	lsls	r2, r2, #27
 8003e94:	430a      	orrs	r2, r1
 8003e96:	4912      	ldr	r1, [pc, #72]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ea6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a0c      	ldr	r2, [pc, #48]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003eae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eb4:	f7fd fe0c 	bl	8001ad0 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd fe08 	bl	8001ad0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e058      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ece:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eda:	e050      	b.n	8003f7e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e04f      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee8:	4b27      	ldr	r3, [pc, #156]	@ (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d144      	bne.n	8003f7e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ef4:	4b24      	ldr	r3, [pc, #144]	@ (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a23      	ldr	r2, [pc, #140]	@ (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003efe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f00:	4b21      	ldr	r3, [pc, #132]	@ (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a20      	ldr	r2, [pc, #128]	@ (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f0c:	f7fd fde0 	bl	8001ad0 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fd fddc 	bl	8001ad0 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e02c      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f26:	4b18      	ldr	r3, [pc, #96]	@ (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x7ac>
 8003f32:	e024      	b.n	8003f7e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b0c      	cmp	r3, #12
 8003f38:	d01f      	beq.n	8003f7a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3a:	4b13      	ldr	r3, [pc, #76]	@ (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a12      	ldr	r2, [pc, #72]	@ (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fd fdc3 	bl	8001ad0 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fd fdbf 	bl	8001ad0 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e00f      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f60:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	4905      	ldr	r1, [pc, #20]	@ (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f72:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <HAL_RCC_OscConfig+0x824>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	60cb      	str	r3, [r1, #12]
 8003f78:	e001      	b.n	8003f7e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	feeefffc 	.word	0xfeeefffc

08003f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0e7      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b75      	ldr	r3, [pc, #468]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d910      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b72      	ldr	r3, [pc, #456]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 0207 	bic.w	r2, r3, #7
 8003fba:	4970      	ldr	r1, [pc, #448]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b6e      	ldr	r3, [pc, #440]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0cf      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d010      	beq.n	8004002 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	4b66      	ldr	r3, [pc, #408]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d908      	bls.n	8004002 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b63      	ldr	r3, [pc, #396]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4960      	ldr	r1, [pc, #384]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d04c      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004016:	4b5a      	ldr	r3, [pc, #360]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d121      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0a6      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402e:	4b54      	ldr	r3, [pc, #336]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d115      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e09a      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004046:	4b4e      	ldr	r3, [pc, #312]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e08e      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004056:	4b4a      	ldr	r3, [pc, #296]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e086      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004066:	4b46      	ldr	r3, [pc, #280]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 0203 	bic.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4943      	ldr	r1, [pc, #268]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004078:	f7fd fd2a 	bl	8001ad0 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	e00a      	b.n	8004096 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004080:	f7fd fd26 	bl	8001ad0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e06e      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	4b3a      	ldr	r3, [pc, #232]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 020c 	and.w	r2, r3, #12
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1eb      	bne.n	8004080 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d010      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	4b31      	ldr	r3, [pc, #196]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d208      	bcs.n	80040d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	492b      	ldr	r1, [pc, #172]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d6:	4b29      	ldr	r3, [pc, #164]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d210      	bcs.n	8004106 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e4:	4b25      	ldr	r3, [pc, #148]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 0207 	bic.w	r2, r3, #7
 80040ec:	4923      	ldr	r1, [pc, #140]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f4:	4b21      	ldr	r3, [pc, #132]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d001      	beq.n	8004106 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e036      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004112:	4b1b      	ldr	r3, [pc, #108]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	4918      	ldr	r1, [pc, #96]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004130:	4b13      	ldr	r3, [pc, #76]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4910      	ldr	r1, [pc, #64]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004144:	f000 f824 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	490b      	ldr	r1, [pc, #44]	@ (8004184 <HAL_RCC_ClockConfig+0x1f4>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
 8004160:	4a09      	ldr	r2, [pc, #36]	@ (8004188 <HAL_RCC_ClockConfig+0x1f8>)
 8004162:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004164:	4b09      	ldr	r3, [pc, #36]	@ (800418c <HAL_RCC_ClockConfig+0x1fc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7fd fc61 	bl	8001a30 <HAL_InitTick>
 800416e:	4603      	mov	r3, r0
 8004170:	72fb      	strb	r3, [r7, #11]

  return status;
 8004172:	7afb      	ldrb	r3, [r7, #11]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40022000 	.word	0x40022000
 8004180:	40021000 	.word	0x40021000
 8004184:	0800932c 	.word	0x0800932c
 8004188:	20000000 	.word	0x20000000
 800418c:	20000004 	.word	0x20000004

08004190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	@ 0x24
 8004194:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800419e:	4b3e      	ldr	r3, [pc, #248]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x34>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d121      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d11e      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041c4:	4b34      	ldr	r3, [pc, #208]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041d0:	4b31      	ldr	r3, [pc, #196]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	e005      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041ec:	4a2b      	ldr	r2, [pc, #172]	@ (800429c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10d      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004200:	e00a      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d102      	bne.n	800420e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004208:	4b25      	ldr	r3, [pc, #148]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	e004      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d101      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004214:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004216:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d134      	bne.n	8004288 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800421e:	4b1e      	ldr	r3, [pc, #120]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d003      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0xa6>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d003      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0xac>
 8004234:	e005      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004236:	4b1a      	ldr	r3, [pc, #104]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004238:	617b      	str	r3, [r7, #20]
      break;
 800423a:	e005      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800423c:	4b19      	ldr	r3, [pc, #100]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800423e:	617b      	str	r3, [r7, #20]
      break;
 8004240:	e002      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	617b      	str	r3, [r7, #20]
      break;
 8004246:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004248:	4b13      	ldr	r3, [pc, #76]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	3301      	adds	r3, #1
 8004254:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004256:	4b10      	ldr	r3, [pc, #64]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	fb03 f202 	mul.w	r2, r3, r2
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800426e:	4b0a      	ldr	r3, [pc, #40]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	0e5b      	lsrs	r3, r3, #25
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	3301      	adds	r3, #1
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004288:	69bb      	ldr	r3, [r7, #24]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	@ 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	08009344 	.word	0x08009344
 80042a0:	00f42400 	.word	0x00f42400
 80042a4:	007a1200 	.word	0x007a1200

080042a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042ac:	4b03      	ldr	r3, [pc, #12]	@ (80042bc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ae:	681b      	ldr	r3, [r3, #0]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000000 	.word	0x20000000

080042c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042c4:	f7ff fff0 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4904      	ldr	r1, [pc, #16]	@ (80042e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000
 80042e8:	0800933c 	.word	0x0800933c

080042ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042f0:	f7ff ffda 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	0adb      	lsrs	r3, r3, #11
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4904      	ldr	r1, [pc, #16]	@ (8004314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000
 8004314:	0800933c 	.word	0x0800933c

08004318 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004324:	4b2a      	ldr	r3, [pc, #168]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004330:	f7ff f9b6 	bl	80036a0 <HAL_PWREx_GetVoltageRange>
 8004334:	6178      	str	r0, [r7, #20]
 8004336:	e014      	b.n	8004362 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004338:	4b25      	ldr	r3, [pc, #148]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433c:	4a24      	ldr	r2, [pc, #144]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004342:	6593      	str	r3, [r2, #88]	@ 0x58
 8004344:	4b22      	ldr	r3, [pc, #136]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004350:	f7ff f9a6 	bl	80036a0 <HAL_PWREx_GetVoltageRange>
 8004354:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004356:	4b1e      	ldr	r3, [pc, #120]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435a:	4a1d      	ldr	r2, [pc, #116]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004360:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004368:	d10b      	bne.n	8004382 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b80      	cmp	r3, #128	@ 0x80
 800436e:	d919      	bls.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2ba0      	cmp	r3, #160	@ 0xa0
 8004374:	d902      	bls.n	800437c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004376:	2302      	movs	r3, #2
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	e013      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800437c:	2301      	movs	r3, #1
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	e010      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b80      	cmp	r3, #128	@ 0x80
 8004386:	d902      	bls.n	800438e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004388:	2303      	movs	r3, #3
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	e00a      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b80      	cmp	r3, #128	@ 0x80
 8004392:	d102      	bne.n	800439a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004394:	2302      	movs	r3, #2
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e004      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b70      	cmp	r3, #112	@ 0x70
 800439e:	d101      	bne.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043a0:	2301      	movs	r3, #1
 80043a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 0207 	bic.w	r2, r3, #7
 80043ac:	4909      	ldr	r1, [pc, #36]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043b4:	4b07      	ldr	r3, [pc, #28]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d001      	beq.n	80043c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40022000 	.word	0x40022000

080043d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e0:	2300      	movs	r3, #0
 80043e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d031      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043fc:	d01a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004402:	d814      	bhi.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004408:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800440c:	d10f      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800440e:	4b5d      	ldr	r3, [pc, #372]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4a5c      	ldr	r2, [pc, #368]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004418:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800441a:	e00c      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	2100      	movs	r1, #0
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f9de 	bl	80047e4 <RCCEx_PLLSAI1_Config>
 8004428:	4603      	mov	r3, r0
 800442a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800442c:	e003      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	74fb      	strb	r3, [r7, #19]
      break;
 8004432:	e000      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800443c:	4b51      	ldr	r3, [pc, #324]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004442:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444a:	494e      	ldr	r1, [pc, #312]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004452:	e001      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 809e 	beq.w	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800446a:	4b46      	ldr	r3, [pc, #280]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800447a:	2300      	movs	r3, #0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00d      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004480:	4b40      	ldr	r3, [pc, #256]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004484:	4a3f      	ldr	r2, [pc, #252]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800448a:	6593      	str	r3, [r2, #88]	@ 0x58
 800448c:	4b3d      	ldr	r3, [pc, #244]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800448e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004498:	2301      	movs	r3, #1
 800449a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800449c:	4b3a      	ldr	r3, [pc, #232]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a39      	ldr	r2, [pc, #228]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044a8:	f7fd fb12 	bl	8001ad0 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044ae:	e009      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b0:	f7fd fb0e 	bl	8001ad0 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d902      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	74fb      	strb	r3, [r7, #19]
        break;
 80044c2:	e005      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c4:	4b30      	ldr	r3, [pc, #192]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ef      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d15a      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01e      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d019      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f2:	4b24      	ldr	r3, [pc, #144]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044fe:	4b21      	ldr	r3, [pc, #132]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004504:	4a1f      	ldr	r2, [pc, #124]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800450a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800450e:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004514:	4a1b      	ldr	r2, [pc, #108]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800451a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800451e:	4a19      	ldr	r2, [pc, #100]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d016      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fd face 	bl	8001ad0 <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004536:	e00b      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004538:	f7fd faca 	bl	8001ad0 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d902      	bls.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	74fb      	strb	r3, [r7, #19]
            break;
 800454e:	e006      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004550:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ec      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004564:	4b07      	ldr	r3, [pc, #28]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004572:	4904      	ldr	r1, [pc, #16]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800457a:	e009      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	74bb      	strb	r3, [r7, #18]
 8004580:	e006      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
 8004588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004590:	7c7b      	ldrb	r3, [r7, #17]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d105      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004596:	4b8a      	ldr	r3, [pc, #552]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459a:	4a89      	ldr	r2, [pc, #548]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800459c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ae:	4b84      	ldr	r3, [pc, #528]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b4:	f023 0203 	bic.w	r2, r3, #3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4980      	ldr	r1, [pc, #512]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045d0:	4b7b      	ldr	r3, [pc, #492]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d6:	f023 020c 	bic.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	4978      	ldr	r1, [pc, #480]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f2:	4b73      	ldr	r3, [pc, #460]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004600:	496f      	ldr	r1, [pc, #444]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004614:	4b6a      	ldr	r3, [pc, #424]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004622:	4967      	ldr	r1, [pc, #412]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004636:	4b62      	ldr	r3, [pc, #392]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	495e      	ldr	r1, [pc, #376]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004658:	4b59      	ldr	r3, [pc, #356]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004666:	4956      	ldr	r1, [pc, #344]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800467a:	4b51      	ldr	r3, [pc, #324]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004688:	494d      	ldr	r1, [pc, #308]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d028      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800469c:	4b48      	ldr	r3, [pc, #288]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	4945      	ldr	r1, [pc, #276]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046ba:	d106      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046bc:	4b40      	ldr	r3, [pc, #256]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a3f      	ldr	r2, [pc, #252]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046c6:	60d3      	str	r3, [r2, #12]
 80046c8:	e011      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046d2:	d10c      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2101      	movs	r1, #1
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f882 	bl	80047e4 <RCCEx_PLLSAI1_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d028      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046fa:	4b31      	ldr	r3, [pc, #196]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004700:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004708:	492d      	ldr	r1, [pc, #180]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004714:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004718:	d106      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471a:	4b29      	ldr	r3, [pc, #164]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	4a28      	ldr	r2, [pc, #160]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004720:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004724:	60d3      	str	r3, [r2, #12]
 8004726:	e011      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004730:	d10c      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3304      	adds	r3, #4
 8004736:	2101      	movs	r1, #1
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f853 	bl	80047e4 <RCCEx_PLLSAI1_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01c      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004758:	4b19      	ldr	r3, [pc, #100]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004766:	4916      	ldr	r1, [pc, #88]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004776:	d10c      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	2102      	movs	r1, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f830 	bl	80047e4 <RCCEx_PLLSAI1_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800479e:	4b08      	ldr	r3, [pc, #32]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ac:	4904      	ldr	r1, [pc, #16]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000

080047c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80047c8:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a04      	ldr	r2, [pc, #16]	@ (80047e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	6013      	str	r3, [r2, #0]
}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000

080047e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047f2:	4b74      	ldr	r3, [pc, #464]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d018      	beq.n	8004830 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047fe:	4b71      	ldr	r3, [pc, #452]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f003 0203 	and.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d10d      	bne.n	800482a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
       ||
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004816:	4b6b      	ldr	r3, [pc, #428]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
       ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d047      	beq.n	80048ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
 800482e:	e044      	b.n	80048ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d018      	beq.n	800486a <RCCEx_PLLSAI1_Config+0x86>
 8004838:	2b03      	cmp	r3, #3
 800483a:	d825      	bhi.n	8004888 <RCCEx_PLLSAI1_Config+0xa4>
 800483c:	2b01      	cmp	r3, #1
 800483e:	d002      	beq.n	8004846 <RCCEx_PLLSAI1_Config+0x62>
 8004840:	2b02      	cmp	r3, #2
 8004842:	d009      	beq.n	8004858 <RCCEx_PLLSAI1_Config+0x74>
 8004844:	e020      	b.n	8004888 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004846:	4b5f      	ldr	r3, [pc, #380]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d11d      	bne.n	800488e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004856:	e01a      	b.n	800488e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004858:	4b5a      	ldr	r3, [pc, #360]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004860:	2b00      	cmp	r3, #0
 8004862:	d116      	bne.n	8004892 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004868:	e013      	b.n	8004892 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800486a:	4b56      	ldr	r3, [pc, #344]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10f      	bne.n	8004896 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004876:	4b53      	ldr	r3, [pc, #332]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004886:	e006      	b.n	8004896 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
      break;
 800488c:	e004      	b.n	8004898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004896:	bf00      	nop
    }

    if(status == HAL_OK)
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10d      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800489e:	4b49      	ldr	r3, [pc, #292]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6819      	ldr	r1, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	430b      	orrs	r3, r1
 80048b4:	4943      	ldr	r1, [pc, #268]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d17c      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048c0:	4b40      	ldr	r3, [pc, #256]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a3f      	ldr	r2, [pc, #252]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048cc:	f7fd f900 	bl	8001ad0 <HAL_GetTick>
 80048d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048d2:	e009      	b.n	80048e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048d4:	f7fd f8fc 	bl	8001ad0 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d902      	bls.n	80048e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	73fb      	strb	r3, [r7, #15]
        break;
 80048e6:	e005      	b.n	80048f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048e8:	4b36      	ldr	r3, [pc, #216]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ef      	bne.n	80048d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d15f      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d110      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004900:	4b30      	ldr	r3, [pc, #192]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004908:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6892      	ldr	r2, [r2, #8]
 8004910:	0211      	lsls	r1, r2, #8
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68d2      	ldr	r2, [r2, #12]
 8004916:	06d2      	lsls	r2, r2, #27
 8004918:	430a      	orrs	r2, r1
 800491a:	492a      	ldr	r1, [pc, #168]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800491c:	4313      	orrs	r3, r2
 800491e:	610b      	str	r3, [r1, #16]
 8004920:	e027      	b.n	8004972 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d112      	bne.n	800494e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004928:	4b26      	ldr	r3, [pc, #152]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004930:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6892      	ldr	r2, [r2, #8]
 8004938:	0211      	lsls	r1, r2, #8
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6912      	ldr	r2, [r2, #16]
 800493e:	0852      	lsrs	r2, r2, #1
 8004940:	3a01      	subs	r2, #1
 8004942:	0552      	lsls	r2, r2, #21
 8004944:	430a      	orrs	r2, r1
 8004946:	491f      	ldr	r1, [pc, #124]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004948:	4313      	orrs	r3, r2
 800494a:	610b      	str	r3, [r1, #16]
 800494c:	e011      	b.n	8004972 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494e:	4b1d      	ldr	r3, [pc, #116]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004956:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6892      	ldr	r2, [r2, #8]
 800495e:	0211      	lsls	r1, r2, #8
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6952      	ldr	r2, [r2, #20]
 8004964:	0852      	lsrs	r2, r2, #1
 8004966:	3a01      	subs	r2, #1
 8004968:	0652      	lsls	r2, r2, #25
 800496a:	430a      	orrs	r2, r1
 800496c:	4915      	ldr	r1, [pc, #84]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004972:	4b14      	ldr	r3, [pc, #80]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a13      	ldr	r2, [pc, #76]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004978:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800497c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fd f8a7 	bl	8001ad0 <HAL_GetTick>
 8004982:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004984:	e009      	b.n	800499a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004986:	f7fd f8a3 	bl	8001ad0 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d902      	bls.n	800499a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	73fb      	strb	r3, [r7, #15]
          break;
 8004998:	e005      	b.n	80049a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800499a:	4b0a      	ldr	r3, [pc, #40]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0ef      	beq.n	8004986 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049ac:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	4903      	ldr	r1, [pc, #12]	@ (80049c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000

080049c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e049      	b.n	8004a6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fc fe1e 	bl	8001630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 f9b6 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d001      	beq.n	8004a90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e033      	b.n	8004af8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <HAL_TIM_Base_Start+0x8c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_TIM_Base_Start+0x3e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aaa:	d004      	beq.n	8004ab6 <HAL_TIM_Base_Start+0x3e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	@ (8004b08 <HAL_TIM_Base_Start+0x90>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d115      	bne.n	8004ae2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	4b13      	ldr	r3, [pc, #76]	@ (8004b0c <HAL_TIM_Base_Start+0x94>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b06      	cmp	r3, #6
 8004ac6:	d015      	beq.n	8004af4 <HAL_TIM_Base_Start+0x7c>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ace:	d011      	beq.n	8004af4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	e008      	b.n	8004af4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e000      	b.n	8004af6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	00010007 	.word	0x00010007

08004b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d020      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01b      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0202 	mvn.w	r2, #2
 8004b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f8ee 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f8e0 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f8f1 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d020      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01b      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0204 	mvn.w	r2, #4
 8004b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8c8 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8ba 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8cb 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d020      	beq.n	8004c0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01b      	beq.n	8004c0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0208 	mvn.w	r2, #8
 8004bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2204      	movs	r2, #4
 8004be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8a2 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 8004bf8:	e005      	b.n	8004c06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f894 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f8a5 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d020      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01b      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0210 	mvn.w	r2, #16
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f87c 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f86e 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f87f 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0201 	mvn.w	r2, #1
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f84c 	bl	8004d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00c      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f940 	bl	8004f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00c      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f938 	bl	8004f34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f83e 	bl	8004d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0220 	mvn.w	r2, #32
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f900 	bl	8004f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8004e34 <TIM_Base_SetConfig+0xbc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <TIM_Base_SetConfig+0x20>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d96:	d108      	bne.n	8004daa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a21      	ldr	r2, [pc, #132]	@ (8004e34 <TIM_Base_SetConfig+0xbc>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <TIM_Base_SetConfig+0x52>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db8:	d007      	beq.n	8004dca <TIM_Base_SetConfig+0x52>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8004e38 <TIM_Base_SetConfig+0xc0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_Base_SetConfig+0x52>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e3c <TIM_Base_SetConfig+0xc4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d108      	bne.n	8004ddc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a0c      	ldr	r2, [pc, #48]	@ (8004e34 <TIM_Base_SetConfig+0xbc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_Base_SetConfig+0xa0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8004e38 <TIM_Base_SetConfig+0xc0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_Base_SetConfig+0xa0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a0a      	ldr	r2, [pc, #40]	@ (8004e3c <TIM_Base_SetConfig+0xc4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d103      	bne.n	8004e20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	615a      	str	r2, [r3, #20]
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40012c00 	.word	0x40012c00
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400

08004e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e04f      	b.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a21      	ldr	r2, [pc, #132]	@ (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d108      	bne.n	8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a14      	ldr	r2, [pc, #80]	@ (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec0:	d004      	beq.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a10      	ldr	r2, [pc, #64]	@ (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d10c      	bne.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ed2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40014000 	.word	0x40014000

08004f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e040      	b.n	8004fdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fc fb86 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2224      	movs	r2, #36	@ 0x24
 8004f74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fe34 	bl	8005bfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fc05 	bl	80057a4 <UART_SetConfig>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e01b      	b.n	8004fdc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 feb3 	bl	8005d40 <UART_CheckIdleState>
 8004fda:	4603      	mov	r3, r0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	@ 0x28
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d177      	bne.n	80050ec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_UART_Transmit+0x24>
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e070      	b.n	80050ee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2221      	movs	r2, #33	@ 0x21
 8005018:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800501a:	f7fc fd59 	bl	8001ad0 <HAL_GetTick>
 800501e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005038:	d108      	bne.n	800504c <HAL_UART_Transmit+0x68>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d104      	bne.n	800504c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	e003      	b.n	8005054 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005050:	2300      	movs	r3, #0
 8005052:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005054:	e02f      	b.n	80050b6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2200      	movs	r2, #0
 800505e:	2180      	movs	r1, #128	@ 0x80
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 ff15 	bl	8005e90 <UART_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e03b      	b.n	80050ee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	881a      	ldrh	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005088:	b292      	uxth	r2, r2
 800508a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	3302      	adds	r3, #2
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	e007      	b.n	80050a4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	781a      	ldrb	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	3301      	adds	r3, #1
 80050a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1c9      	bne.n	8005056 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2140      	movs	r1, #64	@ 0x40
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fedf 	bl	8005e90 <UART_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e005      	b.n	80050ee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e000      	b.n	80050ee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80050ec:	2302      	movs	r3, #2
  }
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	@ 0x28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	4613      	mov	r3, r2
 8005104:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800510c:	2b20      	cmp	r3, #32
 800510e:	d137      	bne.n	8005180 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_UART_Receive_IT+0x24>
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e030      	b.n	8005182 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a18      	ldr	r2, [pc, #96]	@ (800518c <HAL_UART_Receive_IT+0x94>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d01f      	beq.n	8005170 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d018      	beq.n	8005170 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	613b      	str	r3, [r7, #16]
   return(result);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	623b      	str	r3, [r7, #32]
 800515e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	69f9      	ldr	r1, [r7, #28]
 8005162:	6a3a      	ldr	r2, [r7, #32]
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	61bb      	str	r3, [r7, #24]
   return(result);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e6      	bne.n	800513e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	461a      	mov	r2, r3
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 fef2 	bl	8005f60 <UART_Start_Receive_IT>
 800517c:	4603      	mov	r3, r0
 800517e:	e000      	b.n	8005182 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005180:	2302      	movs	r3, #2
  }
}
 8005182:	4618      	mov	r0, r3
 8005184:	3728      	adds	r7, #40	@ 0x28
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40008000 	.word	0x40008000

08005190 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b0ba      	sub	sp, #232	@ 0xe8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80051ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80051be:	4013      	ands	r3, r2
 80051c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80051c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d115      	bne.n	80051f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80051cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00f      	beq.n	80051f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d009      	beq.n	80051f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 82ae 	beq.w	800574a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4798      	blx	r3
      }
      return;
 80051f6:	e2a8      	b.n	800574a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80051f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8117 	beq.w	8005430 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800520e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005212:	4b85      	ldr	r3, [pc, #532]	@ (8005428 <HAL_UART_IRQHandler+0x298>)
 8005214:	4013      	ands	r3, r2
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 810a 	beq.w	8005430 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800521c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d011      	beq.n	800524c <HAL_UART_IRQHandler+0xbc>
 8005228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800522c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005242:	f043 0201 	orr.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800524c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d011      	beq.n	800527c <HAL_UART_IRQHandler+0xec>
 8005258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2202      	movs	r2, #2
 800526a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005272:	f043 0204 	orr.w	r2, r3, #4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d011      	beq.n	80052ac <HAL_UART_IRQHandler+0x11c>
 8005288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00b      	beq.n	80052ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2204      	movs	r2, #4
 800529a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052a2:	f043 0202 	orr.w	r2, r3, #2
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d017      	beq.n	80052e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d105      	bne.n	80052d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80052c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2208      	movs	r2, #8
 80052d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052de:	f043 0208 	orr.w	r2, r3, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d012      	beq.n	800531a <HAL_UART_IRQHandler+0x18a>
 80052f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00c      	beq.n	800531a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005310:	f043 0220 	orr.w	r2, r3, #32
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8214 	beq.w	800574e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00d      	beq.n	800534e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d007      	beq.n	800534e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005354:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005362:	2b40      	cmp	r3, #64	@ 0x40
 8005364:	d005      	beq.n	8005372 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800536a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800536e:	2b00      	cmp	r3, #0
 8005370:	d04f      	beq.n	8005412 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 feba 	bl	80060ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005382:	2b40      	cmp	r3, #64	@ 0x40
 8005384:	d141      	bne.n	800540a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3308      	adds	r3, #8
 800538c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800539c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1d9      	bne.n	8005386 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d013      	beq.n	8005402 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053de:	4a13      	ldr	r2, [pc, #76]	@ (800542c <HAL_UART_IRQHandler+0x29c>)
 80053e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fd fea8 	bl	800313c <HAL_DMA_Abort_IT>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d017      	beq.n	8005422 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80053fc:	4610      	mov	r0, r2
 80053fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005400:	e00f      	b.n	8005422 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f9b8 	bl	8005778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005408:	e00b      	b.n	8005422 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9b4 	bl	8005778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005410:	e007      	b.n	8005422 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f9b0 	bl	8005778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005420:	e195      	b.n	800574e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005422:	bf00      	nop
    return;
 8005424:	e193      	b.n	800574e <HAL_UART_IRQHandler+0x5be>
 8005426:	bf00      	nop
 8005428:	04000120 	.word	0x04000120
 800542c:	080061b5 	.word	0x080061b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005434:	2b01      	cmp	r3, #1
 8005436:	f040 814e 	bne.w	80056d6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800543a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 8147 	beq.w	80056d6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8140 	beq.w	80056d6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2210      	movs	r2, #16
 800545c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005468:	2b40      	cmp	r3, #64	@ 0x40
 800546a:	f040 80b8 	bne.w	80055de <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800547a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8167 	beq.w	8005752 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800548a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800548e:	429a      	cmp	r2, r3
 8005490:	f080 815f 	bcs.w	8005752 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800549a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f040 8086 	bne.w	80055bc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80054e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80054f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1da      	bne.n	80054b0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3308      	adds	r3, #8
 8005500:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800550a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3308      	adds	r3, #8
 800551a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800551e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005522:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005526:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e1      	bne.n	80054fa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3308      	adds	r3, #8
 800553c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800554c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3308      	adds	r3, #8
 8005556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800555a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800555c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005560:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e3      	bne.n	8005536 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800558a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800558c:	f023 0310 	bic.w	r3, r3, #16
 8005590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800559e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e4      	bne.n	800557c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fd fd82 	bl	80030c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f8d8 	bl	800578c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055dc:	e0b9      	b.n	8005752 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80ab 	beq.w	8005756 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a6 	beq.w	8005756 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800561e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800562c:	647b      	str	r3, [r7, #68]	@ 0x44
 800562e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800563a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e4      	bne.n	800560a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3308      	adds	r3, #8
 8005646:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	623b      	str	r3, [r7, #32]
   return(result);
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	f023 0301 	bic.w	r3, r3, #1
 8005656:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005664:	633a      	str	r2, [r7, #48]	@ 0x30
 8005666:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800566a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e3      	bne.n	8005640 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	60fb      	str	r3, [r7, #12]
   return(result);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f023 0310 	bic.w	r3, r3, #16
 80056a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	69b9      	ldr	r1, [r7, #24]
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	617b      	str	r3, [r7, #20]
   return(result);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e4      	bne.n	800568c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2202      	movs	r2, #2
 80056c6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f85c 	bl	800578c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056d4:	e03f      	b.n	8005756 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00e      	beq.n	8005700 <HAL_UART_IRQHandler+0x570>
 80056e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80056f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 ff57 	bl	80065ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056fe:	e02d      	b.n	800575c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00e      	beq.n	800572a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800570c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005714:	2b00      	cmp	r3, #0
 8005716:	d008      	beq.n	800572a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01c      	beq.n	800575a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	4798      	blx	r3
    }
    return;
 8005728:	e017      	b.n	800575a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800572e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d012      	beq.n	800575c <HAL_UART_IRQHandler+0x5cc>
 8005736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800573a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00c      	beq.n	800575c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fd4c 	bl	80061e0 <UART_EndTransmit_IT>
    return;
 8005748:	e008      	b.n	800575c <HAL_UART_IRQHandler+0x5cc>
      return;
 800574a:	bf00      	nop
 800574c:	e006      	b.n	800575c <HAL_UART_IRQHandler+0x5cc>
    return;
 800574e:	bf00      	nop
 8005750:	e004      	b.n	800575c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005752:	bf00      	nop
 8005754:	e002      	b.n	800575c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <HAL_UART_IRQHandler+0x5cc>
    return;
 800575a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800575c:	37e8      	adds	r7, #232	@ 0xe8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop

08005764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a8:	b08a      	sub	sp, #40	@ 0x28
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	431a      	orrs	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4bb4      	ldr	r3, [pc, #720]	@ (8005aa4 <UART_SetConfig+0x300>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057dc:	430b      	orrs	r3, r1
 80057de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4aa9      	ldr	r2, [pc, #676]	@ (8005aa8 <UART_SetConfig+0x304>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580c:	4313      	orrs	r3, r2
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4aa0      	ldr	r2, [pc, #640]	@ (8005aac <UART_SetConfig+0x308>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d126      	bne.n	800587c <UART_SetConfig+0xd8>
 800582e:	4ba0      	ldr	r3, [pc, #640]	@ (8005ab0 <UART_SetConfig+0x30c>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	2b03      	cmp	r3, #3
 800583a:	d81b      	bhi.n	8005874 <UART_SetConfig+0xd0>
 800583c:	a201      	add	r2, pc, #4	@ (adr r2, 8005844 <UART_SetConfig+0xa0>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	08005855 	.word	0x08005855
 8005848:	08005865 	.word	0x08005865
 800584c:	0800585d 	.word	0x0800585d
 8005850:	0800586d 	.word	0x0800586d
 8005854:	2301      	movs	r3, #1
 8005856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800585a:	e080      	b.n	800595e <UART_SetConfig+0x1ba>
 800585c:	2302      	movs	r3, #2
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005862:	e07c      	b.n	800595e <UART_SetConfig+0x1ba>
 8005864:	2304      	movs	r3, #4
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800586a:	e078      	b.n	800595e <UART_SetConfig+0x1ba>
 800586c:	2308      	movs	r3, #8
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005872:	e074      	b.n	800595e <UART_SetConfig+0x1ba>
 8005874:	2310      	movs	r3, #16
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587a:	e070      	b.n	800595e <UART_SetConfig+0x1ba>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a8c      	ldr	r2, [pc, #560]	@ (8005ab4 <UART_SetConfig+0x310>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d138      	bne.n	80058f8 <UART_SetConfig+0x154>
 8005886:	4b8a      	ldr	r3, [pc, #552]	@ (8005ab0 <UART_SetConfig+0x30c>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588c:	f003 030c 	and.w	r3, r3, #12
 8005890:	2b0c      	cmp	r3, #12
 8005892:	d82d      	bhi.n	80058f0 <UART_SetConfig+0x14c>
 8005894:	a201      	add	r2, pc, #4	@ (adr r2, 800589c <UART_SetConfig+0xf8>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	080058d1 	.word	0x080058d1
 80058a0:	080058f1 	.word	0x080058f1
 80058a4:	080058f1 	.word	0x080058f1
 80058a8:	080058f1 	.word	0x080058f1
 80058ac:	080058e1 	.word	0x080058e1
 80058b0:	080058f1 	.word	0x080058f1
 80058b4:	080058f1 	.word	0x080058f1
 80058b8:	080058f1 	.word	0x080058f1
 80058bc:	080058d9 	.word	0x080058d9
 80058c0:	080058f1 	.word	0x080058f1
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	080058f1 	.word	0x080058f1
 80058cc:	080058e9 	.word	0x080058e9
 80058d0:	2300      	movs	r3, #0
 80058d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d6:	e042      	b.n	800595e <UART_SetConfig+0x1ba>
 80058d8:	2302      	movs	r3, #2
 80058da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058de:	e03e      	b.n	800595e <UART_SetConfig+0x1ba>
 80058e0:	2304      	movs	r3, #4
 80058e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e6:	e03a      	b.n	800595e <UART_SetConfig+0x1ba>
 80058e8:	2308      	movs	r3, #8
 80058ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ee:	e036      	b.n	800595e <UART_SetConfig+0x1ba>
 80058f0:	2310      	movs	r3, #16
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058f6:	e032      	b.n	800595e <UART_SetConfig+0x1ba>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a6a      	ldr	r2, [pc, #424]	@ (8005aa8 <UART_SetConfig+0x304>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d12a      	bne.n	8005958 <UART_SetConfig+0x1b4>
 8005902:	4b6b      	ldr	r3, [pc, #428]	@ (8005ab0 <UART_SetConfig+0x30c>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005908:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800590c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005910:	d01a      	beq.n	8005948 <UART_SetConfig+0x1a4>
 8005912:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005916:	d81b      	bhi.n	8005950 <UART_SetConfig+0x1ac>
 8005918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800591c:	d00c      	beq.n	8005938 <UART_SetConfig+0x194>
 800591e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005922:	d815      	bhi.n	8005950 <UART_SetConfig+0x1ac>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <UART_SetConfig+0x18c>
 8005928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800592c:	d008      	beq.n	8005940 <UART_SetConfig+0x19c>
 800592e:	e00f      	b.n	8005950 <UART_SetConfig+0x1ac>
 8005930:	2300      	movs	r3, #0
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005936:	e012      	b.n	800595e <UART_SetConfig+0x1ba>
 8005938:	2302      	movs	r3, #2
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800593e:	e00e      	b.n	800595e <UART_SetConfig+0x1ba>
 8005940:	2304      	movs	r3, #4
 8005942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005946:	e00a      	b.n	800595e <UART_SetConfig+0x1ba>
 8005948:	2308      	movs	r3, #8
 800594a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594e:	e006      	b.n	800595e <UART_SetConfig+0x1ba>
 8005950:	2310      	movs	r3, #16
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005956:	e002      	b.n	800595e <UART_SetConfig+0x1ba>
 8005958:	2310      	movs	r3, #16
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a51      	ldr	r2, [pc, #324]	@ (8005aa8 <UART_SetConfig+0x304>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d17a      	bne.n	8005a5e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005968:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800596c:	2b08      	cmp	r3, #8
 800596e:	d824      	bhi.n	80059ba <UART_SetConfig+0x216>
 8005970:	a201      	add	r2, pc, #4	@ (adr r2, 8005978 <UART_SetConfig+0x1d4>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	0800599d 	.word	0x0800599d
 800597c:	080059bb 	.word	0x080059bb
 8005980:	080059a5 	.word	0x080059a5
 8005984:	080059bb 	.word	0x080059bb
 8005988:	080059ab 	.word	0x080059ab
 800598c:	080059bb 	.word	0x080059bb
 8005990:	080059bb 	.word	0x080059bb
 8005994:	080059bb 	.word	0x080059bb
 8005998:	080059b3 	.word	0x080059b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800599c:	f7fe fc90 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 80059a0:	61f8      	str	r0, [r7, #28]
        break;
 80059a2:	e010      	b.n	80059c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059a4:	4b44      	ldr	r3, [pc, #272]	@ (8005ab8 <UART_SetConfig+0x314>)
 80059a6:	61fb      	str	r3, [r7, #28]
        break;
 80059a8:	e00d      	b.n	80059c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059aa:	f7fe fbf1 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 80059ae:	61f8      	str	r0, [r7, #28]
        break;
 80059b0:	e009      	b.n	80059c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059b6:	61fb      	str	r3, [r7, #28]
        break;
 80059b8:	e005      	b.n	80059c6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8107 	beq.w	8005bdc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	4413      	add	r3, r2
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d305      	bcc.n	80059ea <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d903      	bls.n	80059f2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059f0:	e0f4      	b.n	8005bdc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	2200      	movs	r2, #0
 80059f6:	461c      	mov	r4, r3
 80059f8:	4615      	mov	r5, r2
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	022b      	lsls	r3, r5, #8
 8005a04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a08:	0222      	lsls	r2, r4, #8
 8005a0a:	68f9      	ldr	r1, [r7, #12]
 8005a0c:	6849      	ldr	r1, [r1, #4]
 8005a0e:	0849      	lsrs	r1, r1, #1
 8005a10:	2000      	movs	r0, #0
 8005a12:	4688      	mov	r8, r1
 8005a14:	4681      	mov	r9, r0
 8005a16:	eb12 0a08 	adds.w	sl, r2, r8
 8005a1a:	eb43 0b09 	adc.w	fp, r3, r9
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	603b      	str	r3, [r7, #0]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a2c:	4650      	mov	r0, sl
 8005a2e:	4659      	mov	r1, fp
 8005a30:	f7fb f8ba 	bl	8000ba8 <__aeabi_uldivmod>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4613      	mov	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a42:	d308      	bcc.n	8005a56 <UART_SetConfig+0x2b2>
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a4a:	d204      	bcs.n	8005a56 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	60da      	str	r2, [r3, #12]
 8005a54:	e0c2      	b.n	8005bdc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a5c:	e0be      	b.n	8005bdc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a66:	d16a      	bne.n	8005b3e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005a68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d834      	bhi.n	8005ada <UART_SetConfig+0x336>
 8005a70:	a201      	add	r2, pc, #4	@ (adr r2, 8005a78 <UART_SetConfig+0x2d4>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005a9d 	.word	0x08005a9d
 8005a7c:	08005abd 	.word	0x08005abd
 8005a80:	08005ac5 	.word	0x08005ac5
 8005a84:	08005adb 	.word	0x08005adb
 8005a88:	08005acb 	.word	0x08005acb
 8005a8c:	08005adb 	.word	0x08005adb
 8005a90:	08005adb 	.word	0x08005adb
 8005a94:	08005adb 	.word	0x08005adb
 8005a98:	08005ad3 	.word	0x08005ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a9c:	f7fe fc10 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 8005aa0:	61f8      	str	r0, [r7, #28]
        break;
 8005aa2:	e020      	b.n	8005ae6 <UART_SetConfig+0x342>
 8005aa4:	efff69f3 	.word	0xefff69f3
 8005aa8:	40008000 	.word	0x40008000
 8005aac:	40013800 	.word	0x40013800
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	40004400 	.word	0x40004400
 8005ab8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005abc:	f7fe fc16 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 8005ac0:	61f8      	str	r0, [r7, #28]
        break;
 8005ac2:	e010      	b.n	8005ae6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8005bf8 <UART_SetConfig+0x454>)
 8005ac6:	61fb      	str	r3, [r7, #28]
        break;
 8005ac8:	e00d      	b.n	8005ae6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aca:	f7fe fb61 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8005ace:	61f8      	str	r0, [r7, #28]
        break;
 8005ad0:	e009      	b.n	8005ae6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ad6:	61fb      	str	r3, [r7, #28]
        break;
 8005ad8:	e005      	b.n	8005ae6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d077      	beq.n	8005bdc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	005a      	lsls	r2, r3, #1
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	085b      	lsrs	r3, r3, #1
 8005af6:	441a      	add	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2b0f      	cmp	r3, #15
 8005b06:	d916      	bls.n	8005b36 <UART_SetConfig+0x392>
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b0e:	d212      	bcs.n	8005b36 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f023 030f 	bic.w	r3, r3, #15
 8005b18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	8afb      	ldrh	r3, [r7, #22]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	8afa      	ldrh	r2, [r7, #22]
 8005b32:	60da      	str	r2, [r3, #12]
 8005b34:	e052      	b.n	8005bdc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b3c:	e04e      	b.n	8005bdc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d827      	bhi.n	8005b96 <UART_SetConfig+0x3f2>
 8005b46:	a201      	add	r2, pc, #4	@ (adr r2, 8005b4c <UART_SetConfig+0x3a8>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b81 	.word	0x08005b81
 8005b58:	08005b97 	.word	0x08005b97
 8005b5c:	08005b87 	.word	0x08005b87
 8005b60:	08005b97 	.word	0x08005b97
 8005b64:	08005b97 	.word	0x08005b97
 8005b68:	08005b97 	.word	0x08005b97
 8005b6c:	08005b8f 	.word	0x08005b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7fe fba6 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 8005b74:	61f8      	str	r0, [r7, #28]
        break;
 8005b76:	e014      	b.n	8005ba2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b78:	f7fe fbb8 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 8005b7c:	61f8      	str	r0, [r7, #28]
        break;
 8005b7e:	e010      	b.n	8005ba2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b80:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf8 <UART_SetConfig+0x454>)
 8005b82:	61fb      	str	r3, [r7, #28]
        break;
 8005b84:	e00d      	b.n	8005ba2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b86:	f7fe fb03 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8005b8a:	61f8      	str	r0, [r7, #28]
        break;
 8005b8c:	e009      	b.n	8005ba2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b92:	61fb      	str	r3, [r7, #28]
        break;
 8005b94:	e005      	b.n	8005ba2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ba0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d019      	beq.n	8005bdc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	085a      	lsrs	r2, r3, #1
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	441a      	add	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	2b0f      	cmp	r3, #15
 8005bc0:	d909      	bls.n	8005bd6 <UART_SetConfig+0x432>
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc8:	d205      	bcs.n	8005bd6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60da      	str	r2, [r3, #12]
 8005bd4:	e002      	b.n	8005bdc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005be8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3728      	adds	r7, #40	@ 0x28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bf6:	bf00      	nop
 8005bf8:	00f42400 	.word	0x00f42400

08005bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01a      	beq.n	8005d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cfa:	d10a      	bne.n	8005d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	605a      	str	r2, [r3, #4]
  }
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b098      	sub	sp, #96	@ 0x60
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d50:	f7fb febe 	bl	8001ad0 <HAL_GetTick>
 8005d54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d12e      	bne.n	8005dc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f88c 	bl	8005e90 <UART_WaitOnFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d021      	beq.n	8005dc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005da2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e6      	bne.n	8005d7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e062      	b.n	8005e88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d149      	bne.n	8005e64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f856 	bl	8005e90 <UART_WaitOnFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d03c      	beq.n	8005e64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	623b      	str	r3, [r7, #32]
   return(result);
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e6      	bne.n	8005dea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3308      	adds	r3, #8
 8005e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0301 	bic.w	r3, r3, #1
 8005e32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3308      	adds	r3, #8
 8005e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e3c:	61fa      	str	r2, [r7, #28]
 8005e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	69b9      	ldr	r1, [r7, #24]
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	617b      	str	r3, [r7, #20]
   return(result);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e5      	bne.n	8005e1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e011      	b.n	8005e88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3758      	adds	r7, #88	@ 0x58
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea0:	e049      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d045      	beq.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eaa:	f7fb fe11 	bl	8001ad0 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d302      	bcc.n	8005ec0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e048      	b.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d031      	beq.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d110      	bne.n	8005f02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f8ff 	bl	80060ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e029      	b.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f10:	d111      	bne.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f8e5 	bl	80060ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e00f      	b.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	69da      	ldr	r2, [r3, #28]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	bf0c      	ite	eq
 8005f46:	2301      	moveq	r3, #1
 8005f48:	2300      	movne	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d0a6      	beq.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b097      	sub	sp, #92	@ 0x5c
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	88fa      	ldrh	r2, [r7, #6]
 8005f80:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f92:	d10e      	bne.n	8005fb2 <UART_Start_Receive_IT+0x52>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d105      	bne.n	8005fa8 <UART_Start_Receive_IT+0x48>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005fa2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005fa6:	e02d      	b.n	8006004 <UART_Start_Receive_IT+0xa4>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	22ff      	movs	r2, #255	@ 0xff
 8005fac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005fb0:	e028      	b.n	8006004 <UART_Start_Receive_IT+0xa4>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10d      	bne.n	8005fd6 <UART_Start_Receive_IT+0x76>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <UART_Start_Receive_IT+0x6c>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	22ff      	movs	r2, #255	@ 0xff
 8005fc6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005fca:	e01b      	b.n	8006004 <UART_Start_Receive_IT+0xa4>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	227f      	movs	r2, #127	@ 0x7f
 8005fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005fd4:	e016      	b.n	8006004 <UART_Start_Receive_IT+0xa4>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fde:	d10d      	bne.n	8005ffc <UART_Start_Receive_IT+0x9c>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d104      	bne.n	8005ff2 <UART_Start_Receive_IT+0x92>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	227f      	movs	r2, #127	@ 0x7f
 8005fec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ff0:	e008      	b.n	8006004 <UART_Start_Receive_IT+0xa4>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	223f      	movs	r2, #63	@ 0x3f
 8005ff6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ffa:	e003      	b.n	8006004 <UART_Start_Receive_IT+0xa4>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2222      	movs	r2, #34	@ 0x22
 8006010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	657b      	str	r3, [r7, #84]	@ 0x54
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006034:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006036:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800603a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006050:	d107      	bne.n	8006062 <UART_Start_Receive_IT+0x102>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d103      	bne.n	8006062 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a21      	ldr	r2, [pc, #132]	@ (80060e4 <UART_Start_Receive_IT+0x184>)
 800605e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006060:	e002      	b.n	8006068 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a20      	ldr	r2, [pc, #128]	@ (80060e8 <UART_Start_Receive_IT+0x188>)
 8006066:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d019      	beq.n	80060a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800608e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006090:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006094:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800609c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e6      	bne.n	8006070 <UART_Start_Receive_IT+0x110>
 80060a2:	e018      	b.n	80060d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	613b      	str	r3, [r7, #16]
   return(result);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f043 0320 	orr.w	r3, r3, #32
 80060b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060c2:	623b      	str	r3, [r7, #32]
 80060c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	69f9      	ldr	r1, [r7, #28]
 80060c8:	6a3a      	ldr	r2, [r7, #32]
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e6      	bne.n	80060a4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	375c      	adds	r7, #92	@ 0x5c
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	080063f1 	.word	0x080063f1
 80060e8:	08006235 	.word	0x08006235

080060ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b095      	sub	sp, #84	@ 0x54
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006112:	643b      	str	r3, [r7, #64]	@ 0x40
 8006114:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006118:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e6      	bne.n	80060f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	61fb      	str	r3, [r7, #28]
   return(result);
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f023 0301 	bic.w	r3, r3, #1
 800613c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3308      	adds	r3, #8
 8006144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006148:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800614c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e5      	bne.n	8006126 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800615e:	2b01      	cmp	r3, #1
 8006160:	d118      	bne.n	8006194 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f023 0310 	bic.w	r3, r3, #16
 8006176:	647b      	str	r3, [r7, #68]	@ 0x44
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6979      	ldr	r1, [r7, #20]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	613b      	str	r3, [r7, #16]
   return(result);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e6      	bne.n	8006162 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80061a8:	bf00      	nop
 80061aa:	3754      	adds	r7, #84	@ 0x54
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7ff fad0 	bl	8005778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	6979      	ldr	r1, [r7, #20]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	613b      	str	r3, [r7, #16]
   return(result);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e6      	bne.n	80061e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff fa9c 	bl	8005764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800622c:	bf00      	nop
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b09c      	sub	sp, #112	@ 0x70
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006242:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800624c:	2b22      	cmp	r3, #34	@ 0x22
 800624e:	f040 80be 	bne.w	80063ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006258:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800625c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006260:	b2d9      	uxtb	r1, r3
 8006262:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006266:	b2da      	uxtb	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626c:	400a      	ands	r2, r1
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	f040 80a3 	bne.w	80063e2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e6      	bne.n	800629c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3308      	adds	r3, #8
 80062d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e0:	f023 0301 	bic.w	r3, r3, #1
 80062e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80062ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80062f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e5      	bne.n	80062ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a34      	ldr	r2, [pc, #208]	@ (80063ec <UART_RxISR_8BIT+0x1b8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d01f      	beq.n	8006360 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d018      	beq.n	8006360 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	623b      	str	r3, [r7, #32]
   return(result);
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006342:	663b      	str	r3, [r7, #96]	@ 0x60
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800634c:	633b      	str	r3, [r7, #48]	@ 0x30
 800634e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e6      	bne.n	800632e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006364:	2b01      	cmp	r3, #1
 8006366:	d12e      	bne.n	80063c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	60fb      	str	r3, [r7, #12]
   return(result);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0310 	bic.w	r3, r3, #16
 8006382:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	69b9      	ldr	r1, [r7, #24]
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	617b      	str	r3, [r7, #20]
   return(result);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e6      	bne.n	800636e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f003 0310 	and.w	r3, r3, #16
 80063aa:	2b10      	cmp	r3, #16
 80063ac:	d103      	bne.n	80063b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2210      	movs	r2, #16
 80063b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff f9e4 	bl	800578c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063c4:	e00d      	b.n	80063e2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fa fd9a 	bl	8000f00 <HAL_UART_RxCpltCallback>
}
 80063cc:	e009      	b.n	80063e2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	8b1b      	ldrh	r3, [r3, #24]
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0208 	orr.w	r2, r2, #8
 80063de:	b292      	uxth	r2, r2
 80063e0:	831a      	strh	r2, [r3, #24]
}
 80063e2:	bf00      	nop
 80063e4:	3770      	adds	r7, #112	@ 0x70
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40008000 	.word	0x40008000

080063f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b09c      	sub	sp, #112	@ 0x70
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80063fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006408:	2b22      	cmp	r3, #34	@ 0x22
 800640a:	f040 80be 	bne.w	800658a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006414:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800641e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006422:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006426:	4013      	ands	r3, r2
 8006428:	b29a      	uxth	r2, r3
 800642a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800642c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006432:	1c9a      	adds	r2, r3, #2
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	f040 80a3 	bne.w	800659e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006468:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800646c:	667b      	str	r3, [r7, #100]	@ 0x64
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006476:	657b      	str	r3, [r7, #84]	@ 0x54
 8006478:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800647c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e6      	bne.n	8006458 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3308      	adds	r3, #8
 8006490:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	f023 0301 	bic.w	r3, r3, #1
 80064a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3308      	adds	r3, #8
 80064a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80064aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80064ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e5      	bne.n	800648a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a34      	ldr	r2, [pc, #208]	@ (80065a8 <UART_RxISR_16BIT+0x1b8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d01f      	beq.n	800651c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d018      	beq.n	800651c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800650a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800650e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e6      	bne.n	80064ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006520:	2b01      	cmp	r3, #1
 8006522:	d12e      	bne.n	8006582 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	e853 3f00 	ldrex	r3, [r3]
 8006536:	60bb      	str	r3, [r7, #8]
   return(result);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f023 0310 	bic.w	r3, r3, #16
 800653e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	461a      	mov	r2, r3
 8006546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	6979      	ldr	r1, [r7, #20]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	e841 2300 	strex	r3, r2, [r1]
 8006554:	613b      	str	r3, [r7, #16]
   return(result);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e6      	bne.n	800652a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f003 0310 	and.w	r3, r3, #16
 8006566:	2b10      	cmp	r3, #16
 8006568:	d103      	bne.n	8006572 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2210      	movs	r2, #16
 8006570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff f906 	bl	800578c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006580:	e00d      	b.n	800659e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fa fcbc 	bl	8000f00 <HAL_UART_RxCpltCallback>
}
 8006588:	e009      	b.n	800659e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	8b1b      	ldrh	r3, [r3, #24]
 8006590:	b29a      	uxth	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0208 	orr.w	r2, r2, #8
 800659a:	b292      	uxth	r2, r2
 800659c:	831a      	strh	r2, [r3, #24]
}
 800659e:	bf00      	nop
 80065a0:	3770      	adds	r7, #112	@ 0x70
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40008000 	.word	0x40008000

080065ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <__cvt>:
 80065c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065c4:	ec57 6b10 	vmov	r6, r7, d0
 80065c8:	2f00      	cmp	r7, #0
 80065ca:	460c      	mov	r4, r1
 80065cc:	4619      	mov	r1, r3
 80065ce:	463b      	mov	r3, r7
 80065d0:	bfbb      	ittet	lt
 80065d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80065d6:	461f      	movlt	r7, r3
 80065d8:	2300      	movge	r3, #0
 80065da:	232d      	movlt	r3, #45	@ 0x2d
 80065dc:	700b      	strb	r3, [r1, #0]
 80065de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80065e4:	4691      	mov	r9, r2
 80065e6:	f023 0820 	bic.w	r8, r3, #32
 80065ea:	bfbc      	itt	lt
 80065ec:	4632      	movlt	r2, r6
 80065ee:	4616      	movlt	r6, r2
 80065f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065f4:	d005      	beq.n	8006602 <__cvt+0x42>
 80065f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80065fa:	d100      	bne.n	80065fe <__cvt+0x3e>
 80065fc:	3401      	adds	r4, #1
 80065fe:	2102      	movs	r1, #2
 8006600:	e000      	b.n	8006604 <__cvt+0x44>
 8006602:	2103      	movs	r1, #3
 8006604:	ab03      	add	r3, sp, #12
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	ab02      	add	r3, sp, #8
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	ec47 6b10 	vmov	d0, r6, r7
 8006610:	4653      	mov	r3, sl
 8006612:	4622      	mov	r2, r4
 8006614:	f000 fe70 	bl	80072f8 <_dtoa_r>
 8006618:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800661c:	4605      	mov	r5, r0
 800661e:	d119      	bne.n	8006654 <__cvt+0x94>
 8006620:	f019 0f01 	tst.w	r9, #1
 8006624:	d00e      	beq.n	8006644 <__cvt+0x84>
 8006626:	eb00 0904 	add.w	r9, r0, r4
 800662a:	2200      	movs	r2, #0
 800662c:	2300      	movs	r3, #0
 800662e:	4630      	mov	r0, r6
 8006630:	4639      	mov	r1, r7
 8006632:	f7fa fa49 	bl	8000ac8 <__aeabi_dcmpeq>
 8006636:	b108      	cbz	r0, 800663c <__cvt+0x7c>
 8006638:	f8cd 900c 	str.w	r9, [sp, #12]
 800663c:	2230      	movs	r2, #48	@ 0x30
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	454b      	cmp	r3, r9
 8006642:	d31e      	bcc.n	8006682 <__cvt+0xc2>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006648:	1b5b      	subs	r3, r3, r5
 800664a:	4628      	mov	r0, r5
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	b004      	add	sp, #16
 8006650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006654:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006658:	eb00 0904 	add.w	r9, r0, r4
 800665c:	d1e5      	bne.n	800662a <__cvt+0x6a>
 800665e:	7803      	ldrb	r3, [r0, #0]
 8006660:	2b30      	cmp	r3, #48	@ 0x30
 8006662:	d10a      	bne.n	800667a <__cvt+0xba>
 8006664:	2200      	movs	r2, #0
 8006666:	2300      	movs	r3, #0
 8006668:	4630      	mov	r0, r6
 800666a:	4639      	mov	r1, r7
 800666c:	f7fa fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006670:	b918      	cbnz	r0, 800667a <__cvt+0xba>
 8006672:	f1c4 0401 	rsb	r4, r4, #1
 8006676:	f8ca 4000 	str.w	r4, [sl]
 800667a:	f8da 3000 	ldr.w	r3, [sl]
 800667e:	4499      	add	r9, r3
 8006680:	e7d3      	b.n	800662a <__cvt+0x6a>
 8006682:	1c59      	adds	r1, r3, #1
 8006684:	9103      	str	r1, [sp, #12]
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	e7d9      	b.n	800663e <__cvt+0x7e>

0800668a <__exponent>:
 800668a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800668c:	2900      	cmp	r1, #0
 800668e:	bfba      	itte	lt
 8006690:	4249      	neglt	r1, r1
 8006692:	232d      	movlt	r3, #45	@ 0x2d
 8006694:	232b      	movge	r3, #43	@ 0x2b
 8006696:	2909      	cmp	r1, #9
 8006698:	7002      	strb	r2, [r0, #0]
 800669a:	7043      	strb	r3, [r0, #1]
 800669c:	dd29      	ble.n	80066f2 <__exponent+0x68>
 800669e:	f10d 0307 	add.w	r3, sp, #7
 80066a2:	461d      	mov	r5, r3
 80066a4:	270a      	movs	r7, #10
 80066a6:	461a      	mov	r2, r3
 80066a8:	fbb1 f6f7 	udiv	r6, r1, r7
 80066ac:	fb07 1416 	mls	r4, r7, r6, r1
 80066b0:	3430      	adds	r4, #48	@ 0x30
 80066b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80066b6:	460c      	mov	r4, r1
 80066b8:	2c63      	cmp	r4, #99	@ 0x63
 80066ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80066be:	4631      	mov	r1, r6
 80066c0:	dcf1      	bgt.n	80066a6 <__exponent+0x1c>
 80066c2:	3130      	adds	r1, #48	@ 0x30
 80066c4:	1e94      	subs	r4, r2, #2
 80066c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80066ca:	1c41      	adds	r1, r0, #1
 80066cc:	4623      	mov	r3, r4
 80066ce:	42ab      	cmp	r3, r5
 80066d0:	d30a      	bcc.n	80066e8 <__exponent+0x5e>
 80066d2:	f10d 0309 	add.w	r3, sp, #9
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	42ac      	cmp	r4, r5
 80066da:	bf88      	it	hi
 80066dc:	2300      	movhi	r3, #0
 80066de:	3302      	adds	r3, #2
 80066e0:	4403      	add	r3, r0
 80066e2:	1a18      	subs	r0, r3, r0
 80066e4:	b003      	add	sp, #12
 80066e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80066ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 80066f0:	e7ed      	b.n	80066ce <__exponent+0x44>
 80066f2:	2330      	movs	r3, #48	@ 0x30
 80066f4:	3130      	adds	r1, #48	@ 0x30
 80066f6:	7083      	strb	r3, [r0, #2]
 80066f8:	70c1      	strb	r1, [r0, #3]
 80066fa:	1d03      	adds	r3, r0, #4
 80066fc:	e7f1      	b.n	80066e2 <__exponent+0x58>
	...

08006700 <_printf_float>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	b08d      	sub	sp, #52	@ 0x34
 8006706:	460c      	mov	r4, r1
 8006708:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800670c:	4616      	mov	r6, r2
 800670e:	461f      	mov	r7, r3
 8006710:	4605      	mov	r5, r0
 8006712:	f000 fcef 	bl	80070f4 <_localeconv_r>
 8006716:	6803      	ldr	r3, [r0, #0]
 8006718:	9304      	str	r3, [sp, #16]
 800671a:	4618      	mov	r0, r3
 800671c:	f7f9 fda8 	bl	8000270 <strlen>
 8006720:	2300      	movs	r3, #0
 8006722:	930a      	str	r3, [sp, #40]	@ 0x28
 8006724:	f8d8 3000 	ldr.w	r3, [r8]
 8006728:	9005      	str	r0, [sp, #20]
 800672a:	3307      	adds	r3, #7
 800672c:	f023 0307 	bic.w	r3, r3, #7
 8006730:	f103 0208 	add.w	r2, r3, #8
 8006734:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006738:	f8d4 b000 	ldr.w	fp, [r4]
 800673c:	f8c8 2000 	str.w	r2, [r8]
 8006740:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006744:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006748:	9307      	str	r3, [sp, #28]
 800674a:	f8cd 8018 	str.w	r8, [sp, #24]
 800674e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006756:	4b9c      	ldr	r3, [pc, #624]	@ (80069c8 <_printf_float+0x2c8>)
 8006758:	f04f 32ff 	mov.w	r2, #4294967295
 800675c:	f7fa f9e6 	bl	8000b2c <__aeabi_dcmpun>
 8006760:	bb70      	cbnz	r0, 80067c0 <_printf_float+0xc0>
 8006762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006766:	4b98      	ldr	r3, [pc, #608]	@ (80069c8 <_printf_float+0x2c8>)
 8006768:	f04f 32ff 	mov.w	r2, #4294967295
 800676c:	f7fa f9c0 	bl	8000af0 <__aeabi_dcmple>
 8006770:	bb30      	cbnz	r0, 80067c0 <_printf_float+0xc0>
 8006772:	2200      	movs	r2, #0
 8006774:	2300      	movs	r3, #0
 8006776:	4640      	mov	r0, r8
 8006778:	4649      	mov	r1, r9
 800677a:	f7fa f9af 	bl	8000adc <__aeabi_dcmplt>
 800677e:	b110      	cbz	r0, 8006786 <_printf_float+0x86>
 8006780:	232d      	movs	r3, #45	@ 0x2d
 8006782:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006786:	4a91      	ldr	r2, [pc, #580]	@ (80069cc <_printf_float+0x2cc>)
 8006788:	4b91      	ldr	r3, [pc, #580]	@ (80069d0 <_printf_float+0x2d0>)
 800678a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800678e:	bf8c      	ite	hi
 8006790:	4690      	movhi	r8, r2
 8006792:	4698      	movls	r8, r3
 8006794:	2303      	movs	r3, #3
 8006796:	6123      	str	r3, [r4, #16]
 8006798:	f02b 0304 	bic.w	r3, fp, #4
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	f04f 0900 	mov.w	r9, #0
 80067a2:	9700      	str	r7, [sp, #0]
 80067a4:	4633      	mov	r3, r6
 80067a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80067a8:	4621      	mov	r1, r4
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 f9d2 	bl	8006b54 <_printf_common>
 80067b0:	3001      	adds	r0, #1
 80067b2:	f040 808d 	bne.w	80068d0 <_printf_float+0x1d0>
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	b00d      	add	sp, #52	@ 0x34
 80067bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c0:	4642      	mov	r2, r8
 80067c2:	464b      	mov	r3, r9
 80067c4:	4640      	mov	r0, r8
 80067c6:	4649      	mov	r1, r9
 80067c8:	f7fa f9b0 	bl	8000b2c <__aeabi_dcmpun>
 80067cc:	b140      	cbz	r0, 80067e0 <_printf_float+0xe0>
 80067ce:	464b      	mov	r3, r9
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	bfbc      	itt	lt
 80067d4:	232d      	movlt	r3, #45	@ 0x2d
 80067d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80067da:	4a7e      	ldr	r2, [pc, #504]	@ (80069d4 <_printf_float+0x2d4>)
 80067dc:	4b7e      	ldr	r3, [pc, #504]	@ (80069d8 <_printf_float+0x2d8>)
 80067de:	e7d4      	b.n	800678a <_printf_float+0x8a>
 80067e0:	6863      	ldr	r3, [r4, #4]
 80067e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80067e6:	9206      	str	r2, [sp, #24]
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	d13b      	bne.n	8006864 <_printf_float+0x164>
 80067ec:	2306      	movs	r3, #6
 80067ee:	6063      	str	r3, [r4, #4]
 80067f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80067f4:	2300      	movs	r3, #0
 80067f6:	6022      	str	r2, [r4, #0]
 80067f8:	9303      	str	r3, [sp, #12]
 80067fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80067fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006800:	ab09      	add	r3, sp, #36	@ 0x24
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	6861      	ldr	r1, [r4, #4]
 8006806:	ec49 8b10 	vmov	d0, r8, r9
 800680a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800680e:	4628      	mov	r0, r5
 8006810:	f7ff fed6 	bl	80065c0 <__cvt>
 8006814:	9b06      	ldr	r3, [sp, #24]
 8006816:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006818:	2b47      	cmp	r3, #71	@ 0x47
 800681a:	4680      	mov	r8, r0
 800681c:	d129      	bne.n	8006872 <_printf_float+0x172>
 800681e:	1cc8      	adds	r0, r1, #3
 8006820:	db02      	blt.n	8006828 <_printf_float+0x128>
 8006822:	6863      	ldr	r3, [r4, #4]
 8006824:	4299      	cmp	r1, r3
 8006826:	dd41      	ble.n	80068ac <_printf_float+0x1ac>
 8006828:	f1aa 0a02 	sub.w	sl, sl, #2
 800682c:	fa5f fa8a 	uxtb.w	sl, sl
 8006830:	3901      	subs	r1, #1
 8006832:	4652      	mov	r2, sl
 8006834:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006838:	9109      	str	r1, [sp, #36]	@ 0x24
 800683a:	f7ff ff26 	bl	800668a <__exponent>
 800683e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006840:	1813      	adds	r3, r2, r0
 8006842:	2a01      	cmp	r2, #1
 8006844:	4681      	mov	r9, r0
 8006846:	6123      	str	r3, [r4, #16]
 8006848:	dc02      	bgt.n	8006850 <_printf_float+0x150>
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	07d2      	lsls	r2, r2, #31
 800684e:	d501      	bpl.n	8006854 <_printf_float+0x154>
 8006850:	3301      	adds	r3, #1
 8006852:	6123      	str	r3, [r4, #16]
 8006854:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0a2      	beq.n	80067a2 <_printf_float+0xa2>
 800685c:	232d      	movs	r3, #45	@ 0x2d
 800685e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006862:	e79e      	b.n	80067a2 <_printf_float+0xa2>
 8006864:	9a06      	ldr	r2, [sp, #24]
 8006866:	2a47      	cmp	r2, #71	@ 0x47
 8006868:	d1c2      	bne.n	80067f0 <_printf_float+0xf0>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1c0      	bne.n	80067f0 <_printf_float+0xf0>
 800686e:	2301      	movs	r3, #1
 8006870:	e7bd      	b.n	80067ee <_printf_float+0xee>
 8006872:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006876:	d9db      	bls.n	8006830 <_printf_float+0x130>
 8006878:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800687c:	d118      	bne.n	80068b0 <_printf_float+0x1b0>
 800687e:	2900      	cmp	r1, #0
 8006880:	6863      	ldr	r3, [r4, #4]
 8006882:	dd0b      	ble.n	800689c <_printf_float+0x19c>
 8006884:	6121      	str	r1, [r4, #16]
 8006886:	b913      	cbnz	r3, 800688e <_printf_float+0x18e>
 8006888:	6822      	ldr	r2, [r4, #0]
 800688a:	07d0      	lsls	r0, r2, #31
 800688c:	d502      	bpl.n	8006894 <_printf_float+0x194>
 800688e:	3301      	adds	r3, #1
 8006890:	440b      	add	r3, r1
 8006892:	6123      	str	r3, [r4, #16]
 8006894:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006896:	f04f 0900 	mov.w	r9, #0
 800689a:	e7db      	b.n	8006854 <_printf_float+0x154>
 800689c:	b913      	cbnz	r3, 80068a4 <_printf_float+0x1a4>
 800689e:	6822      	ldr	r2, [r4, #0]
 80068a0:	07d2      	lsls	r2, r2, #31
 80068a2:	d501      	bpl.n	80068a8 <_printf_float+0x1a8>
 80068a4:	3302      	adds	r3, #2
 80068a6:	e7f4      	b.n	8006892 <_printf_float+0x192>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e7f2      	b.n	8006892 <_printf_float+0x192>
 80068ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80068b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068b2:	4299      	cmp	r1, r3
 80068b4:	db05      	blt.n	80068c2 <_printf_float+0x1c2>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	6121      	str	r1, [r4, #16]
 80068ba:	07d8      	lsls	r0, r3, #31
 80068bc:	d5ea      	bpl.n	8006894 <_printf_float+0x194>
 80068be:	1c4b      	adds	r3, r1, #1
 80068c0:	e7e7      	b.n	8006892 <_printf_float+0x192>
 80068c2:	2900      	cmp	r1, #0
 80068c4:	bfd4      	ite	le
 80068c6:	f1c1 0202 	rsble	r2, r1, #2
 80068ca:	2201      	movgt	r2, #1
 80068cc:	4413      	add	r3, r2
 80068ce:	e7e0      	b.n	8006892 <_printf_float+0x192>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	055a      	lsls	r2, r3, #21
 80068d4:	d407      	bmi.n	80068e6 <_printf_float+0x1e6>
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	4642      	mov	r2, r8
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	d12b      	bne.n	800693c <_printf_float+0x23c>
 80068e4:	e767      	b.n	80067b6 <_printf_float+0xb6>
 80068e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068ea:	f240 80dd 	bls.w	8006aa8 <_printf_float+0x3a8>
 80068ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068f2:	2200      	movs	r2, #0
 80068f4:	2300      	movs	r3, #0
 80068f6:	f7fa f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d033      	beq.n	8006966 <_printf_float+0x266>
 80068fe:	4a37      	ldr	r2, [pc, #220]	@ (80069dc <_printf_float+0x2dc>)
 8006900:	2301      	movs	r3, #1
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	f43f af54 	beq.w	80067b6 <_printf_float+0xb6>
 800690e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006912:	4543      	cmp	r3, r8
 8006914:	db02      	blt.n	800691c <_printf_float+0x21c>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	07d8      	lsls	r0, r3, #31
 800691a:	d50f      	bpl.n	800693c <_printf_float+0x23c>
 800691c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	f43f af45 	beq.w	80067b6 <_printf_float+0xb6>
 800692c:	f04f 0900 	mov.w	r9, #0
 8006930:	f108 38ff 	add.w	r8, r8, #4294967295
 8006934:	f104 0a1a 	add.w	sl, r4, #26
 8006938:	45c8      	cmp	r8, r9
 800693a:	dc09      	bgt.n	8006950 <_printf_float+0x250>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	079b      	lsls	r3, r3, #30
 8006940:	f100 8103 	bmi.w	8006b4a <_printf_float+0x44a>
 8006944:	68e0      	ldr	r0, [r4, #12]
 8006946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006948:	4298      	cmp	r0, r3
 800694a:	bfb8      	it	lt
 800694c:	4618      	movlt	r0, r3
 800694e:	e734      	b.n	80067ba <_printf_float+0xba>
 8006950:	2301      	movs	r3, #1
 8006952:	4652      	mov	r2, sl
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f af2b 	beq.w	80067b6 <_printf_float+0xb6>
 8006960:	f109 0901 	add.w	r9, r9, #1
 8006964:	e7e8      	b.n	8006938 <_printf_float+0x238>
 8006966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	dc39      	bgt.n	80069e0 <_printf_float+0x2e0>
 800696c:	4a1b      	ldr	r2, [pc, #108]	@ (80069dc <_printf_float+0x2dc>)
 800696e:	2301      	movs	r3, #1
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	47b8      	blx	r7
 8006976:	3001      	adds	r0, #1
 8006978:	f43f af1d 	beq.w	80067b6 <_printf_float+0xb6>
 800697c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006980:	ea59 0303 	orrs.w	r3, r9, r3
 8006984:	d102      	bne.n	800698c <_printf_float+0x28c>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	07d9      	lsls	r1, r3, #31
 800698a:	d5d7      	bpl.n	800693c <_printf_float+0x23c>
 800698c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	47b8      	blx	r7
 8006996:	3001      	adds	r0, #1
 8006998:	f43f af0d 	beq.w	80067b6 <_printf_float+0xb6>
 800699c:	f04f 0a00 	mov.w	sl, #0
 80069a0:	f104 0b1a 	add.w	fp, r4, #26
 80069a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a6:	425b      	negs	r3, r3
 80069a8:	4553      	cmp	r3, sl
 80069aa:	dc01      	bgt.n	80069b0 <_printf_float+0x2b0>
 80069ac:	464b      	mov	r3, r9
 80069ae:	e793      	b.n	80068d8 <_printf_float+0x1d8>
 80069b0:	2301      	movs	r3, #1
 80069b2:	465a      	mov	r2, fp
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	47b8      	blx	r7
 80069ba:	3001      	adds	r0, #1
 80069bc:	f43f aefb 	beq.w	80067b6 <_printf_float+0xb6>
 80069c0:	f10a 0a01 	add.w	sl, sl, #1
 80069c4:	e7ee      	b.n	80069a4 <_printf_float+0x2a4>
 80069c6:	bf00      	nop
 80069c8:	7fefffff 	.word	0x7fefffff
 80069cc:	08009378 	.word	0x08009378
 80069d0:	08009374 	.word	0x08009374
 80069d4:	08009380 	.word	0x08009380
 80069d8:	0800937c 	.word	0x0800937c
 80069dc:	08009384 	.word	0x08009384
 80069e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069e6:	4553      	cmp	r3, sl
 80069e8:	bfa8      	it	ge
 80069ea:	4653      	movge	r3, sl
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	4699      	mov	r9, r3
 80069f0:	dc36      	bgt.n	8006a60 <_printf_float+0x360>
 80069f2:	f04f 0b00 	mov.w	fp, #0
 80069f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069fa:	f104 021a 	add.w	r2, r4, #26
 80069fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a00:	9306      	str	r3, [sp, #24]
 8006a02:	eba3 0309 	sub.w	r3, r3, r9
 8006a06:	455b      	cmp	r3, fp
 8006a08:	dc31      	bgt.n	8006a6e <_printf_float+0x36e>
 8006a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a0c:	459a      	cmp	sl, r3
 8006a0e:	dc3a      	bgt.n	8006a86 <_printf_float+0x386>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	07da      	lsls	r2, r3, #31
 8006a14:	d437      	bmi.n	8006a86 <_printf_float+0x386>
 8006a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a18:	ebaa 0903 	sub.w	r9, sl, r3
 8006a1c:	9b06      	ldr	r3, [sp, #24]
 8006a1e:	ebaa 0303 	sub.w	r3, sl, r3
 8006a22:	4599      	cmp	r9, r3
 8006a24:	bfa8      	it	ge
 8006a26:	4699      	movge	r9, r3
 8006a28:	f1b9 0f00 	cmp.w	r9, #0
 8006a2c:	dc33      	bgt.n	8006a96 <_printf_float+0x396>
 8006a2e:	f04f 0800 	mov.w	r8, #0
 8006a32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a36:	f104 0b1a 	add.w	fp, r4, #26
 8006a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a3c:	ebaa 0303 	sub.w	r3, sl, r3
 8006a40:	eba3 0309 	sub.w	r3, r3, r9
 8006a44:	4543      	cmp	r3, r8
 8006a46:	f77f af79 	ble.w	800693c <_printf_float+0x23c>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	465a      	mov	r2, fp
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b8      	blx	r7
 8006a54:	3001      	adds	r0, #1
 8006a56:	f43f aeae 	beq.w	80067b6 <_printf_float+0xb6>
 8006a5a:	f108 0801 	add.w	r8, r8, #1
 8006a5e:	e7ec      	b.n	8006a3a <_printf_float+0x33a>
 8006a60:	4642      	mov	r2, r8
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d1c2      	bne.n	80069f2 <_printf_float+0x2f2>
 8006a6c:	e6a3      	b.n	80067b6 <_printf_float+0xb6>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	9206      	str	r2, [sp, #24]
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f43f ae9c 	beq.w	80067b6 <_printf_float+0xb6>
 8006a7e:	9a06      	ldr	r2, [sp, #24]
 8006a80:	f10b 0b01 	add.w	fp, fp, #1
 8006a84:	e7bb      	b.n	80069fe <_printf_float+0x2fe>
 8006a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	d1c0      	bne.n	8006a16 <_printf_float+0x316>
 8006a94:	e68f      	b.n	80067b6 <_printf_float+0xb6>
 8006a96:	9a06      	ldr	r2, [sp, #24]
 8006a98:	464b      	mov	r3, r9
 8006a9a:	4442      	add	r2, r8
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b8      	blx	r7
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d1c3      	bne.n	8006a2e <_printf_float+0x32e>
 8006aa6:	e686      	b.n	80067b6 <_printf_float+0xb6>
 8006aa8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006aac:	f1ba 0f01 	cmp.w	sl, #1
 8006ab0:	dc01      	bgt.n	8006ab6 <_printf_float+0x3b6>
 8006ab2:	07db      	lsls	r3, r3, #31
 8006ab4:	d536      	bpl.n	8006b24 <_printf_float+0x424>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4642      	mov	r2, r8
 8006aba:	4631      	mov	r1, r6
 8006abc:	4628      	mov	r0, r5
 8006abe:	47b8      	blx	r7
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	f43f ae78 	beq.w	80067b6 <_printf_float+0xb6>
 8006ac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aca:	4631      	mov	r1, r6
 8006acc:	4628      	mov	r0, r5
 8006ace:	47b8      	blx	r7
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	f43f ae70 	beq.w	80067b6 <_printf_float+0xb6>
 8006ad6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ada:	2200      	movs	r2, #0
 8006adc:	2300      	movs	r3, #0
 8006ade:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ae2:	f7f9 fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ae6:	b9c0      	cbnz	r0, 8006b1a <_printf_float+0x41a>
 8006ae8:	4653      	mov	r3, sl
 8006aea:	f108 0201 	add.w	r2, r8, #1
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	d10c      	bne.n	8006b12 <_printf_float+0x412>
 8006af8:	e65d      	b.n	80067b6 <_printf_float+0xb6>
 8006afa:	2301      	movs	r3, #1
 8006afc:	465a      	mov	r2, fp
 8006afe:	4631      	mov	r1, r6
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b8      	blx	r7
 8006b04:	3001      	adds	r0, #1
 8006b06:	f43f ae56 	beq.w	80067b6 <_printf_float+0xb6>
 8006b0a:	f108 0801 	add.w	r8, r8, #1
 8006b0e:	45d0      	cmp	r8, sl
 8006b10:	dbf3      	blt.n	8006afa <_printf_float+0x3fa>
 8006b12:	464b      	mov	r3, r9
 8006b14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b18:	e6df      	b.n	80068da <_printf_float+0x1da>
 8006b1a:	f04f 0800 	mov.w	r8, #0
 8006b1e:	f104 0b1a 	add.w	fp, r4, #26
 8006b22:	e7f4      	b.n	8006b0e <_printf_float+0x40e>
 8006b24:	2301      	movs	r3, #1
 8006b26:	4642      	mov	r2, r8
 8006b28:	e7e1      	b.n	8006aee <_printf_float+0x3ee>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	464a      	mov	r2, r9
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b8      	blx	r7
 8006b34:	3001      	adds	r0, #1
 8006b36:	f43f ae3e 	beq.w	80067b6 <_printf_float+0xb6>
 8006b3a:	f108 0801 	add.w	r8, r8, #1
 8006b3e:	68e3      	ldr	r3, [r4, #12]
 8006b40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b42:	1a5b      	subs	r3, r3, r1
 8006b44:	4543      	cmp	r3, r8
 8006b46:	dcf0      	bgt.n	8006b2a <_printf_float+0x42a>
 8006b48:	e6fc      	b.n	8006944 <_printf_float+0x244>
 8006b4a:	f04f 0800 	mov.w	r8, #0
 8006b4e:	f104 0919 	add.w	r9, r4, #25
 8006b52:	e7f4      	b.n	8006b3e <_printf_float+0x43e>

08006b54 <_printf_common>:
 8006b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	4616      	mov	r6, r2
 8006b5a:	4698      	mov	r8, r3
 8006b5c:	688a      	ldr	r2, [r1, #8]
 8006b5e:	690b      	ldr	r3, [r1, #16]
 8006b60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b64:	4293      	cmp	r3, r2
 8006b66:	bfb8      	it	lt
 8006b68:	4613      	movlt	r3, r2
 8006b6a:	6033      	str	r3, [r6, #0]
 8006b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b70:	4607      	mov	r7, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	b10a      	cbz	r2, 8006b7a <_printf_common+0x26>
 8006b76:	3301      	adds	r3, #1
 8006b78:	6033      	str	r3, [r6, #0]
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	0699      	lsls	r1, r3, #26
 8006b7e:	bf42      	ittt	mi
 8006b80:	6833      	ldrmi	r3, [r6, #0]
 8006b82:	3302      	addmi	r3, #2
 8006b84:	6033      	strmi	r3, [r6, #0]
 8006b86:	6825      	ldr	r5, [r4, #0]
 8006b88:	f015 0506 	ands.w	r5, r5, #6
 8006b8c:	d106      	bne.n	8006b9c <_printf_common+0x48>
 8006b8e:	f104 0a19 	add.w	sl, r4, #25
 8006b92:	68e3      	ldr	r3, [r4, #12]
 8006b94:	6832      	ldr	r2, [r6, #0]
 8006b96:	1a9b      	subs	r3, r3, r2
 8006b98:	42ab      	cmp	r3, r5
 8006b9a:	dc26      	bgt.n	8006bea <_printf_common+0x96>
 8006b9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ba0:	6822      	ldr	r2, [r4, #0]
 8006ba2:	3b00      	subs	r3, #0
 8006ba4:	bf18      	it	ne
 8006ba6:	2301      	movne	r3, #1
 8006ba8:	0692      	lsls	r2, r2, #26
 8006baa:	d42b      	bmi.n	8006c04 <_printf_common+0xb0>
 8006bac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bb0:	4641      	mov	r1, r8
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	47c8      	blx	r9
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d01e      	beq.n	8006bf8 <_printf_common+0xa4>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	6922      	ldr	r2, [r4, #16]
 8006bbe:	f003 0306 	and.w	r3, r3, #6
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	bf02      	ittt	eq
 8006bc6:	68e5      	ldreq	r5, [r4, #12]
 8006bc8:	6833      	ldreq	r3, [r6, #0]
 8006bca:	1aed      	subeq	r5, r5, r3
 8006bcc:	68a3      	ldr	r3, [r4, #8]
 8006bce:	bf0c      	ite	eq
 8006bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bd4:	2500      	movne	r5, #0
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	bfc4      	itt	gt
 8006bda:	1a9b      	subgt	r3, r3, r2
 8006bdc:	18ed      	addgt	r5, r5, r3
 8006bde:	2600      	movs	r6, #0
 8006be0:	341a      	adds	r4, #26
 8006be2:	42b5      	cmp	r5, r6
 8006be4:	d11a      	bne.n	8006c1c <_printf_common+0xc8>
 8006be6:	2000      	movs	r0, #0
 8006be8:	e008      	b.n	8006bfc <_printf_common+0xa8>
 8006bea:	2301      	movs	r3, #1
 8006bec:	4652      	mov	r2, sl
 8006bee:	4641      	mov	r1, r8
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	47c8      	blx	r9
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d103      	bne.n	8006c00 <_printf_common+0xac>
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c00:	3501      	adds	r5, #1
 8006c02:	e7c6      	b.n	8006b92 <_printf_common+0x3e>
 8006c04:	18e1      	adds	r1, r4, r3
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	2030      	movs	r0, #48	@ 0x30
 8006c0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c0e:	4422      	add	r2, r4
 8006c10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c18:	3302      	adds	r3, #2
 8006c1a:	e7c7      	b.n	8006bac <_printf_common+0x58>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	4622      	mov	r2, r4
 8006c20:	4641      	mov	r1, r8
 8006c22:	4638      	mov	r0, r7
 8006c24:	47c8      	blx	r9
 8006c26:	3001      	adds	r0, #1
 8006c28:	d0e6      	beq.n	8006bf8 <_printf_common+0xa4>
 8006c2a:	3601      	adds	r6, #1
 8006c2c:	e7d9      	b.n	8006be2 <_printf_common+0x8e>
	...

08006c30 <_printf_i>:
 8006c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c34:	7e0f      	ldrb	r7, [r1, #24]
 8006c36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c38:	2f78      	cmp	r7, #120	@ 0x78
 8006c3a:	4691      	mov	r9, r2
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	469a      	mov	sl, r3
 8006c42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c46:	d807      	bhi.n	8006c58 <_printf_i+0x28>
 8006c48:	2f62      	cmp	r7, #98	@ 0x62
 8006c4a:	d80a      	bhi.n	8006c62 <_printf_i+0x32>
 8006c4c:	2f00      	cmp	r7, #0
 8006c4e:	f000 80d1 	beq.w	8006df4 <_printf_i+0x1c4>
 8006c52:	2f58      	cmp	r7, #88	@ 0x58
 8006c54:	f000 80b8 	beq.w	8006dc8 <_printf_i+0x198>
 8006c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c60:	e03a      	b.n	8006cd8 <_printf_i+0xa8>
 8006c62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c66:	2b15      	cmp	r3, #21
 8006c68:	d8f6      	bhi.n	8006c58 <_printf_i+0x28>
 8006c6a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c70 <_printf_i+0x40>)
 8006c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c70:	08006cc9 	.word	0x08006cc9
 8006c74:	08006cdd 	.word	0x08006cdd
 8006c78:	08006c59 	.word	0x08006c59
 8006c7c:	08006c59 	.word	0x08006c59
 8006c80:	08006c59 	.word	0x08006c59
 8006c84:	08006c59 	.word	0x08006c59
 8006c88:	08006cdd 	.word	0x08006cdd
 8006c8c:	08006c59 	.word	0x08006c59
 8006c90:	08006c59 	.word	0x08006c59
 8006c94:	08006c59 	.word	0x08006c59
 8006c98:	08006c59 	.word	0x08006c59
 8006c9c:	08006ddb 	.word	0x08006ddb
 8006ca0:	08006d07 	.word	0x08006d07
 8006ca4:	08006d95 	.word	0x08006d95
 8006ca8:	08006c59 	.word	0x08006c59
 8006cac:	08006c59 	.word	0x08006c59
 8006cb0:	08006dfd 	.word	0x08006dfd
 8006cb4:	08006c59 	.word	0x08006c59
 8006cb8:	08006d07 	.word	0x08006d07
 8006cbc:	08006c59 	.word	0x08006c59
 8006cc0:	08006c59 	.word	0x08006c59
 8006cc4:	08006d9d 	.word	0x08006d9d
 8006cc8:	6833      	ldr	r3, [r6, #0]
 8006cca:	1d1a      	adds	r2, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6032      	str	r2, [r6, #0]
 8006cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e09c      	b.n	8006e16 <_printf_i+0x1e6>
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	6820      	ldr	r0, [r4, #0]
 8006ce0:	1d19      	adds	r1, r3, #4
 8006ce2:	6031      	str	r1, [r6, #0]
 8006ce4:	0606      	lsls	r6, r0, #24
 8006ce6:	d501      	bpl.n	8006cec <_printf_i+0xbc>
 8006ce8:	681d      	ldr	r5, [r3, #0]
 8006cea:	e003      	b.n	8006cf4 <_printf_i+0xc4>
 8006cec:	0645      	lsls	r5, r0, #25
 8006cee:	d5fb      	bpl.n	8006ce8 <_printf_i+0xb8>
 8006cf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cf4:	2d00      	cmp	r5, #0
 8006cf6:	da03      	bge.n	8006d00 <_printf_i+0xd0>
 8006cf8:	232d      	movs	r3, #45	@ 0x2d
 8006cfa:	426d      	negs	r5, r5
 8006cfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d00:	4858      	ldr	r0, [pc, #352]	@ (8006e64 <_printf_i+0x234>)
 8006d02:	230a      	movs	r3, #10
 8006d04:	e011      	b.n	8006d2a <_printf_i+0xfa>
 8006d06:	6821      	ldr	r1, [r4, #0]
 8006d08:	6833      	ldr	r3, [r6, #0]
 8006d0a:	0608      	lsls	r0, r1, #24
 8006d0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d10:	d402      	bmi.n	8006d18 <_printf_i+0xe8>
 8006d12:	0649      	lsls	r1, r1, #25
 8006d14:	bf48      	it	mi
 8006d16:	b2ad      	uxthmi	r5, r5
 8006d18:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d1a:	4852      	ldr	r0, [pc, #328]	@ (8006e64 <_printf_i+0x234>)
 8006d1c:	6033      	str	r3, [r6, #0]
 8006d1e:	bf14      	ite	ne
 8006d20:	230a      	movne	r3, #10
 8006d22:	2308      	moveq	r3, #8
 8006d24:	2100      	movs	r1, #0
 8006d26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d2a:	6866      	ldr	r6, [r4, #4]
 8006d2c:	60a6      	str	r6, [r4, #8]
 8006d2e:	2e00      	cmp	r6, #0
 8006d30:	db05      	blt.n	8006d3e <_printf_i+0x10e>
 8006d32:	6821      	ldr	r1, [r4, #0]
 8006d34:	432e      	orrs	r6, r5
 8006d36:	f021 0104 	bic.w	r1, r1, #4
 8006d3a:	6021      	str	r1, [r4, #0]
 8006d3c:	d04b      	beq.n	8006dd6 <_printf_i+0x1a6>
 8006d3e:	4616      	mov	r6, r2
 8006d40:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d44:	fb03 5711 	mls	r7, r3, r1, r5
 8006d48:	5dc7      	ldrb	r7, [r0, r7]
 8006d4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d4e:	462f      	mov	r7, r5
 8006d50:	42bb      	cmp	r3, r7
 8006d52:	460d      	mov	r5, r1
 8006d54:	d9f4      	bls.n	8006d40 <_printf_i+0x110>
 8006d56:	2b08      	cmp	r3, #8
 8006d58:	d10b      	bne.n	8006d72 <_printf_i+0x142>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	07df      	lsls	r7, r3, #31
 8006d5e:	d508      	bpl.n	8006d72 <_printf_i+0x142>
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	6861      	ldr	r1, [r4, #4]
 8006d64:	4299      	cmp	r1, r3
 8006d66:	bfde      	ittt	le
 8006d68:	2330      	movle	r3, #48	@ 0x30
 8006d6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d72:	1b92      	subs	r2, r2, r6
 8006d74:	6122      	str	r2, [r4, #16]
 8006d76:	f8cd a000 	str.w	sl, [sp]
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	aa03      	add	r2, sp, #12
 8006d7e:	4621      	mov	r1, r4
 8006d80:	4640      	mov	r0, r8
 8006d82:	f7ff fee7 	bl	8006b54 <_printf_common>
 8006d86:	3001      	adds	r0, #1
 8006d88:	d14a      	bne.n	8006e20 <_printf_i+0x1f0>
 8006d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8e:	b004      	add	sp, #16
 8006d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	f043 0320 	orr.w	r3, r3, #32
 8006d9a:	6023      	str	r3, [r4, #0]
 8006d9c:	4832      	ldr	r0, [pc, #200]	@ (8006e68 <_printf_i+0x238>)
 8006d9e:	2778      	movs	r7, #120	@ 0x78
 8006da0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	6831      	ldr	r1, [r6, #0]
 8006da8:	061f      	lsls	r7, r3, #24
 8006daa:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dae:	d402      	bmi.n	8006db6 <_printf_i+0x186>
 8006db0:	065f      	lsls	r7, r3, #25
 8006db2:	bf48      	it	mi
 8006db4:	b2ad      	uxthmi	r5, r5
 8006db6:	6031      	str	r1, [r6, #0]
 8006db8:	07d9      	lsls	r1, r3, #31
 8006dba:	bf44      	itt	mi
 8006dbc:	f043 0320 	orrmi.w	r3, r3, #32
 8006dc0:	6023      	strmi	r3, [r4, #0]
 8006dc2:	b11d      	cbz	r5, 8006dcc <_printf_i+0x19c>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	e7ad      	b.n	8006d24 <_printf_i+0xf4>
 8006dc8:	4826      	ldr	r0, [pc, #152]	@ (8006e64 <_printf_i+0x234>)
 8006dca:	e7e9      	b.n	8006da0 <_printf_i+0x170>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	f023 0320 	bic.w	r3, r3, #32
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	e7f6      	b.n	8006dc4 <_printf_i+0x194>
 8006dd6:	4616      	mov	r6, r2
 8006dd8:	e7bd      	b.n	8006d56 <_printf_i+0x126>
 8006dda:	6833      	ldr	r3, [r6, #0]
 8006ddc:	6825      	ldr	r5, [r4, #0]
 8006dde:	6961      	ldr	r1, [r4, #20]
 8006de0:	1d18      	adds	r0, r3, #4
 8006de2:	6030      	str	r0, [r6, #0]
 8006de4:	062e      	lsls	r6, r5, #24
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	d501      	bpl.n	8006dee <_printf_i+0x1be>
 8006dea:	6019      	str	r1, [r3, #0]
 8006dec:	e002      	b.n	8006df4 <_printf_i+0x1c4>
 8006dee:	0668      	lsls	r0, r5, #25
 8006df0:	d5fb      	bpl.n	8006dea <_printf_i+0x1ba>
 8006df2:	8019      	strh	r1, [r3, #0]
 8006df4:	2300      	movs	r3, #0
 8006df6:	6123      	str	r3, [r4, #16]
 8006df8:	4616      	mov	r6, r2
 8006dfa:	e7bc      	b.n	8006d76 <_printf_i+0x146>
 8006dfc:	6833      	ldr	r3, [r6, #0]
 8006dfe:	1d1a      	adds	r2, r3, #4
 8006e00:	6032      	str	r2, [r6, #0]
 8006e02:	681e      	ldr	r6, [r3, #0]
 8006e04:	6862      	ldr	r2, [r4, #4]
 8006e06:	2100      	movs	r1, #0
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f7f9 f9e1 	bl	80001d0 <memchr>
 8006e0e:	b108      	cbz	r0, 8006e14 <_printf_i+0x1e4>
 8006e10:	1b80      	subs	r0, r0, r6
 8006e12:	6060      	str	r0, [r4, #4]
 8006e14:	6863      	ldr	r3, [r4, #4]
 8006e16:	6123      	str	r3, [r4, #16]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e1e:	e7aa      	b.n	8006d76 <_printf_i+0x146>
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	4632      	mov	r2, r6
 8006e24:	4649      	mov	r1, r9
 8006e26:	4640      	mov	r0, r8
 8006e28:	47d0      	blx	sl
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d0ad      	beq.n	8006d8a <_printf_i+0x15a>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	079b      	lsls	r3, r3, #30
 8006e32:	d413      	bmi.n	8006e5c <_printf_i+0x22c>
 8006e34:	68e0      	ldr	r0, [r4, #12]
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	4298      	cmp	r0, r3
 8006e3a:	bfb8      	it	lt
 8006e3c:	4618      	movlt	r0, r3
 8006e3e:	e7a6      	b.n	8006d8e <_printf_i+0x15e>
 8006e40:	2301      	movs	r3, #1
 8006e42:	4632      	mov	r2, r6
 8006e44:	4649      	mov	r1, r9
 8006e46:	4640      	mov	r0, r8
 8006e48:	47d0      	blx	sl
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d09d      	beq.n	8006d8a <_printf_i+0x15a>
 8006e4e:	3501      	adds	r5, #1
 8006e50:	68e3      	ldr	r3, [r4, #12]
 8006e52:	9903      	ldr	r1, [sp, #12]
 8006e54:	1a5b      	subs	r3, r3, r1
 8006e56:	42ab      	cmp	r3, r5
 8006e58:	dcf2      	bgt.n	8006e40 <_printf_i+0x210>
 8006e5a:	e7eb      	b.n	8006e34 <_printf_i+0x204>
 8006e5c:	2500      	movs	r5, #0
 8006e5e:	f104 0619 	add.w	r6, r4, #25
 8006e62:	e7f5      	b.n	8006e50 <_printf_i+0x220>
 8006e64:	08009386 	.word	0x08009386
 8006e68:	08009397 	.word	0x08009397

08006e6c <std>:
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	b510      	push	{r4, lr}
 8006e70:	4604      	mov	r4, r0
 8006e72:	e9c0 3300 	strd	r3, r3, [r0]
 8006e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e7a:	6083      	str	r3, [r0, #8]
 8006e7c:	8181      	strh	r1, [r0, #12]
 8006e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e80:	81c2      	strh	r2, [r0, #14]
 8006e82:	6183      	str	r3, [r0, #24]
 8006e84:	4619      	mov	r1, r3
 8006e86:	2208      	movs	r2, #8
 8006e88:	305c      	adds	r0, #92	@ 0x5c
 8006e8a:	f000 f92a 	bl	80070e2 <memset>
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec4 <std+0x58>)
 8006e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e92:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec8 <std+0x5c>)
 8006e94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ecc <std+0x60>)
 8006e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <std+0x64>)
 8006e9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed4 <std+0x68>)
 8006ea0:	6224      	str	r4, [r4, #32]
 8006ea2:	429c      	cmp	r4, r3
 8006ea4:	d006      	beq.n	8006eb4 <std+0x48>
 8006ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006eaa:	4294      	cmp	r4, r2
 8006eac:	d002      	beq.n	8006eb4 <std+0x48>
 8006eae:	33d0      	adds	r3, #208	@ 0xd0
 8006eb0:	429c      	cmp	r4, r3
 8006eb2:	d105      	bne.n	8006ec0 <std+0x54>
 8006eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ebc:	f000 b98e 	b.w	80071dc <__retarget_lock_init_recursive>
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	bf00      	nop
 8006ec4:	0800705d 	.word	0x0800705d
 8006ec8:	0800707f 	.word	0x0800707f
 8006ecc:	080070b7 	.word	0x080070b7
 8006ed0:	080070db 	.word	0x080070db
 8006ed4:	2000329c 	.word	0x2000329c

08006ed8 <stdio_exit_handler>:
 8006ed8:	4a02      	ldr	r2, [pc, #8]	@ (8006ee4 <stdio_exit_handler+0xc>)
 8006eda:	4903      	ldr	r1, [pc, #12]	@ (8006ee8 <stdio_exit_handler+0x10>)
 8006edc:	4803      	ldr	r0, [pc, #12]	@ (8006eec <stdio_exit_handler+0x14>)
 8006ede:	f000 b869 	b.w	8006fb4 <_fwalk_sglue>
 8006ee2:	bf00      	nop
 8006ee4:	2000000c 	.word	0x2000000c
 8006ee8:	08008b45 	.word	0x08008b45
 8006eec:	2000001c 	.word	0x2000001c

08006ef0 <cleanup_stdio>:
 8006ef0:	6841      	ldr	r1, [r0, #4]
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f24 <cleanup_stdio+0x34>)
 8006ef4:	4299      	cmp	r1, r3
 8006ef6:	b510      	push	{r4, lr}
 8006ef8:	4604      	mov	r4, r0
 8006efa:	d001      	beq.n	8006f00 <cleanup_stdio+0x10>
 8006efc:	f001 fe22 	bl	8008b44 <_fflush_r>
 8006f00:	68a1      	ldr	r1, [r4, #8]
 8006f02:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <cleanup_stdio+0x38>)
 8006f04:	4299      	cmp	r1, r3
 8006f06:	d002      	beq.n	8006f0e <cleanup_stdio+0x1e>
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f001 fe1b 	bl	8008b44 <_fflush_r>
 8006f0e:	68e1      	ldr	r1, [r4, #12]
 8006f10:	4b06      	ldr	r3, [pc, #24]	@ (8006f2c <cleanup_stdio+0x3c>)
 8006f12:	4299      	cmp	r1, r3
 8006f14:	d004      	beq.n	8006f20 <cleanup_stdio+0x30>
 8006f16:	4620      	mov	r0, r4
 8006f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f1c:	f001 be12 	b.w	8008b44 <_fflush_r>
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	bf00      	nop
 8006f24:	2000329c 	.word	0x2000329c
 8006f28:	20003304 	.word	0x20003304
 8006f2c:	2000336c 	.word	0x2000336c

08006f30 <global_stdio_init.part.0>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4b0b      	ldr	r3, [pc, #44]	@ (8006f60 <global_stdio_init.part.0+0x30>)
 8006f34:	4c0b      	ldr	r4, [pc, #44]	@ (8006f64 <global_stdio_init.part.0+0x34>)
 8006f36:	4a0c      	ldr	r2, [pc, #48]	@ (8006f68 <global_stdio_init.part.0+0x38>)
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2104      	movs	r1, #4
 8006f40:	f7ff ff94 	bl	8006e6c <std>
 8006f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f48:	2201      	movs	r2, #1
 8006f4a:	2109      	movs	r1, #9
 8006f4c:	f7ff ff8e 	bl	8006e6c <std>
 8006f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f54:	2202      	movs	r2, #2
 8006f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5a:	2112      	movs	r1, #18
 8006f5c:	f7ff bf86 	b.w	8006e6c <std>
 8006f60:	200033d4 	.word	0x200033d4
 8006f64:	2000329c 	.word	0x2000329c
 8006f68:	08006ed9 	.word	0x08006ed9

08006f6c <__sfp_lock_acquire>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	@ (8006f74 <__sfp_lock_acquire+0x8>)
 8006f6e:	f000 b936 	b.w	80071de <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	200033dd 	.word	0x200033dd

08006f78 <__sfp_lock_release>:
 8006f78:	4801      	ldr	r0, [pc, #4]	@ (8006f80 <__sfp_lock_release+0x8>)
 8006f7a:	f000 b931 	b.w	80071e0 <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	200033dd 	.word	0x200033dd

08006f84 <__sinit>:
 8006f84:	b510      	push	{r4, lr}
 8006f86:	4604      	mov	r4, r0
 8006f88:	f7ff fff0 	bl	8006f6c <__sfp_lock_acquire>
 8006f8c:	6a23      	ldr	r3, [r4, #32]
 8006f8e:	b11b      	cbz	r3, 8006f98 <__sinit+0x14>
 8006f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f94:	f7ff bff0 	b.w	8006f78 <__sfp_lock_release>
 8006f98:	4b04      	ldr	r3, [pc, #16]	@ (8006fac <__sinit+0x28>)
 8006f9a:	6223      	str	r3, [r4, #32]
 8006f9c:	4b04      	ldr	r3, [pc, #16]	@ (8006fb0 <__sinit+0x2c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1f5      	bne.n	8006f90 <__sinit+0xc>
 8006fa4:	f7ff ffc4 	bl	8006f30 <global_stdio_init.part.0>
 8006fa8:	e7f2      	b.n	8006f90 <__sinit+0xc>
 8006faa:	bf00      	nop
 8006fac:	08006ef1 	.word	0x08006ef1
 8006fb0:	200033d4 	.word	0x200033d4

08006fb4 <_fwalk_sglue>:
 8006fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb8:	4607      	mov	r7, r0
 8006fba:	4688      	mov	r8, r1
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	2600      	movs	r6, #0
 8006fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8006fc8:	d505      	bpl.n	8006fd6 <_fwalk_sglue+0x22>
 8006fca:	6824      	ldr	r4, [r4, #0]
 8006fcc:	2c00      	cmp	r4, #0
 8006fce:	d1f7      	bne.n	8006fc0 <_fwalk_sglue+0xc>
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd6:	89ab      	ldrh	r3, [r5, #12]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d907      	bls.n	8006fec <_fwalk_sglue+0x38>
 8006fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	d003      	beq.n	8006fec <_fwalk_sglue+0x38>
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	47c0      	blx	r8
 8006fea:	4306      	orrs	r6, r0
 8006fec:	3568      	adds	r5, #104	@ 0x68
 8006fee:	e7e9      	b.n	8006fc4 <_fwalk_sglue+0x10>

08006ff0 <sniprintf>:
 8006ff0:	b40c      	push	{r2, r3}
 8006ff2:	b530      	push	{r4, r5, lr}
 8006ff4:	4b18      	ldr	r3, [pc, #96]	@ (8007058 <sniprintf+0x68>)
 8006ff6:	1e0c      	subs	r4, r1, #0
 8006ff8:	681d      	ldr	r5, [r3, #0]
 8006ffa:	b09d      	sub	sp, #116	@ 0x74
 8006ffc:	da08      	bge.n	8007010 <sniprintf+0x20>
 8006ffe:	238b      	movs	r3, #139	@ 0x8b
 8007000:	602b      	str	r3, [r5, #0]
 8007002:	f04f 30ff 	mov.w	r0, #4294967295
 8007006:	b01d      	add	sp, #116	@ 0x74
 8007008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800700c:	b002      	add	sp, #8
 800700e:	4770      	bx	lr
 8007010:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007014:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800701e:	bf14      	ite	ne
 8007020:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007024:	4623      	moveq	r3, r4
 8007026:	9304      	str	r3, [sp, #16]
 8007028:	9307      	str	r3, [sp, #28]
 800702a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800702e:	9002      	str	r0, [sp, #8]
 8007030:	9006      	str	r0, [sp, #24]
 8007032:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007036:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007038:	ab21      	add	r3, sp, #132	@ 0x84
 800703a:	a902      	add	r1, sp, #8
 800703c:	4628      	mov	r0, r5
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	f001 fc00 	bl	8008844 <_svfiprintf_r>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	bfbc      	itt	lt
 8007048:	238b      	movlt	r3, #139	@ 0x8b
 800704a:	602b      	strlt	r3, [r5, #0]
 800704c:	2c00      	cmp	r4, #0
 800704e:	d0da      	beq.n	8007006 <sniprintf+0x16>
 8007050:	9b02      	ldr	r3, [sp, #8]
 8007052:	2200      	movs	r2, #0
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e7d6      	b.n	8007006 <sniprintf+0x16>
 8007058:	20000018 	.word	0x20000018

0800705c <__sread>:
 800705c:	b510      	push	{r4, lr}
 800705e:	460c      	mov	r4, r1
 8007060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007064:	f000 f86c 	bl	8007140 <_read_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	bfab      	itete	ge
 800706c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800706e:	89a3      	ldrhlt	r3, [r4, #12]
 8007070:	181b      	addge	r3, r3, r0
 8007072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007076:	bfac      	ite	ge
 8007078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800707a:	81a3      	strhlt	r3, [r4, #12]
 800707c:	bd10      	pop	{r4, pc}

0800707e <__swrite>:
 800707e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007082:	461f      	mov	r7, r3
 8007084:	898b      	ldrh	r3, [r1, #12]
 8007086:	05db      	lsls	r3, r3, #23
 8007088:	4605      	mov	r5, r0
 800708a:	460c      	mov	r4, r1
 800708c:	4616      	mov	r6, r2
 800708e:	d505      	bpl.n	800709c <__swrite+0x1e>
 8007090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007094:	2302      	movs	r3, #2
 8007096:	2200      	movs	r2, #0
 8007098:	f000 f840 	bl	800711c <_lseek_r>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	4632      	mov	r2, r6
 80070aa:	463b      	mov	r3, r7
 80070ac:	4628      	mov	r0, r5
 80070ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b2:	f000 b857 	b.w	8007164 <_write_r>

080070b6 <__sseek>:
 80070b6:	b510      	push	{r4, lr}
 80070b8:	460c      	mov	r4, r1
 80070ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070be:	f000 f82d 	bl	800711c <_lseek_r>
 80070c2:	1c43      	adds	r3, r0, #1
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	bf15      	itete	ne
 80070c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070d2:	81a3      	strheq	r3, [r4, #12]
 80070d4:	bf18      	it	ne
 80070d6:	81a3      	strhne	r3, [r4, #12]
 80070d8:	bd10      	pop	{r4, pc}

080070da <__sclose>:
 80070da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070de:	f000 b80d 	b.w	80070fc <_close_r>

080070e2 <memset>:
 80070e2:	4402      	add	r2, r0
 80070e4:	4603      	mov	r3, r0
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d100      	bne.n	80070ec <memset+0xa>
 80070ea:	4770      	bx	lr
 80070ec:	f803 1b01 	strb.w	r1, [r3], #1
 80070f0:	e7f9      	b.n	80070e6 <memset+0x4>
	...

080070f4 <_localeconv_r>:
 80070f4:	4800      	ldr	r0, [pc, #0]	@ (80070f8 <_localeconv_r+0x4>)
 80070f6:	4770      	bx	lr
 80070f8:	20000158 	.word	0x20000158

080070fc <_close_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d06      	ldr	r5, [pc, #24]	@ (8007118 <_close_r+0x1c>)
 8007100:	2300      	movs	r3, #0
 8007102:	4604      	mov	r4, r0
 8007104:	4608      	mov	r0, r1
 8007106:	602b      	str	r3, [r5, #0]
 8007108:	f7fa fbd4 	bl	80018b4 <_close>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_close_r+0x1a>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_close_r+0x1a>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	200033d8 	.word	0x200033d8

0800711c <_lseek_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d07      	ldr	r5, [pc, #28]	@ (800713c <_lseek_r+0x20>)
 8007120:	4604      	mov	r4, r0
 8007122:	4608      	mov	r0, r1
 8007124:	4611      	mov	r1, r2
 8007126:	2200      	movs	r2, #0
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f7fa fbe9 	bl	8001902 <_lseek>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_lseek_r+0x1e>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_lseek_r+0x1e>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	200033d8 	.word	0x200033d8

08007140 <_read_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4d07      	ldr	r5, [pc, #28]	@ (8007160 <_read_r+0x20>)
 8007144:	4604      	mov	r4, r0
 8007146:	4608      	mov	r0, r1
 8007148:	4611      	mov	r1, r2
 800714a:	2200      	movs	r2, #0
 800714c:	602a      	str	r2, [r5, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	f7fa fb77 	bl	8001842 <_read>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d102      	bne.n	800715e <_read_r+0x1e>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	b103      	cbz	r3, 800715e <_read_r+0x1e>
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	200033d8 	.word	0x200033d8

08007164 <_write_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d07      	ldr	r5, [pc, #28]	@ (8007184 <_write_r+0x20>)
 8007168:	4604      	mov	r4, r0
 800716a:	4608      	mov	r0, r1
 800716c:	4611      	mov	r1, r2
 800716e:	2200      	movs	r2, #0
 8007170:	602a      	str	r2, [r5, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	f7fa fb82 	bl	800187c <_write>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d102      	bne.n	8007182 <_write_r+0x1e>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	b103      	cbz	r3, 8007182 <_write_r+0x1e>
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	200033d8 	.word	0x200033d8

08007188 <__errno>:
 8007188:	4b01      	ldr	r3, [pc, #4]	@ (8007190 <__errno+0x8>)
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20000018 	.word	0x20000018

08007194 <__libc_init_array>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	4d0d      	ldr	r5, [pc, #52]	@ (80071cc <__libc_init_array+0x38>)
 8007198:	4c0d      	ldr	r4, [pc, #52]	@ (80071d0 <__libc_init_array+0x3c>)
 800719a:	1b64      	subs	r4, r4, r5
 800719c:	10a4      	asrs	r4, r4, #2
 800719e:	2600      	movs	r6, #0
 80071a0:	42a6      	cmp	r6, r4
 80071a2:	d109      	bne.n	80071b8 <__libc_init_array+0x24>
 80071a4:	4d0b      	ldr	r5, [pc, #44]	@ (80071d4 <__libc_init_array+0x40>)
 80071a6:	4c0c      	ldr	r4, [pc, #48]	@ (80071d8 <__libc_init_array+0x44>)
 80071a8:	f002 f86a 	bl	8009280 <_init>
 80071ac:	1b64      	subs	r4, r4, r5
 80071ae:	10a4      	asrs	r4, r4, #2
 80071b0:	2600      	movs	r6, #0
 80071b2:	42a6      	cmp	r6, r4
 80071b4:	d105      	bne.n	80071c2 <__libc_init_array+0x2e>
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071bc:	4798      	blx	r3
 80071be:	3601      	adds	r6, #1
 80071c0:	e7ee      	b.n	80071a0 <__libc_init_array+0xc>
 80071c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c6:	4798      	blx	r3
 80071c8:	3601      	adds	r6, #1
 80071ca:	e7f2      	b.n	80071b2 <__libc_init_array+0x1e>
 80071cc:	080096f4 	.word	0x080096f4
 80071d0:	080096f4 	.word	0x080096f4
 80071d4:	080096f4 	.word	0x080096f4
 80071d8:	080096f8 	.word	0x080096f8

080071dc <__retarget_lock_init_recursive>:
 80071dc:	4770      	bx	lr

080071de <__retarget_lock_acquire_recursive>:
 80071de:	4770      	bx	lr

080071e0 <__retarget_lock_release_recursive>:
 80071e0:	4770      	bx	lr

080071e2 <quorem>:
 80071e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e6:	6903      	ldr	r3, [r0, #16]
 80071e8:	690c      	ldr	r4, [r1, #16]
 80071ea:	42a3      	cmp	r3, r4
 80071ec:	4607      	mov	r7, r0
 80071ee:	db7e      	blt.n	80072ee <quorem+0x10c>
 80071f0:	3c01      	subs	r4, #1
 80071f2:	f101 0814 	add.w	r8, r1, #20
 80071f6:	00a3      	lsls	r3, r4, #2
 80071f8:	f100 0514 	add.w	r5, r0, #20
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007202:	9301      	str	r3, [sp, #4]
 8007204:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007208:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800720c:	3301      	adds	r3, #1
 800720e:	429a      	cmp	r2, r3
 8007210:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007214:	fbb2 f6f3 	udiv	r6, r2, r3
 8007218:	d32e      	bcc.n	8007278 <quorem+0x96>
 800721a:	f04f 0a00 	mov.w	sl, #0
 800721e:	46c4      	mov	ip, r8
 8007220:	46ae      	mov	lr, r5
 8007222:	46d3      	mov	fp, sl
 8007224:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007228:	b298      	uxth	r0, r3
 800722a:	fb06 a000 	mla	r0, r6, r0, sl
 800722e:	0c02      	lsrs	r2, r0, #16
 8007230:	0c1b      	lsrs	r3, r3, #16
 8007232:	fb06 2303 	mla	r3, r6, r3, r2
 8007236:	f8de 2000 	ldr.w	r2, [lr]
 800723a:	b280      	uxth	r0, r0
 800723c:	b292      	uxth	r2, r2
 800723e:	1a12      	subs	r2, r2, r0
 8007240:	445a      	add	r2, fp
 8007242:	f8de 0000 	ldr.w	r0, [lr]
 8007246:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800724a:	b29b      	uxth	r3, r3
 800724c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007250:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007254:	b292      	uxth	r2, r2
 8007256:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800725a:	45e1      	cmp	r9, ip
 800725c:	f84e 2b04 	str.w	r2, [lr], #4
 8007260:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007264:	d2de      	bcs.n	8007224 <quorem+0x42>
 8007266:	9b00      	ldr	r3, [sp, #0]
 8007268:	58eb      	ldr	r3, [r5, r3]
 800726a:	b92b      	cbnz	r3, 8007278 <quorem+0x96>
 800726c:	9b01      	ldr	r3, [sp, #4]
 800726e:	3b04      	subs	r3, #4
 8007270:	429d      	cmp	r5, r3
 8007272:	461a      	mov	r2, r3
 8007274:	d32f      	bcc.n	80072d6 <quorem+0xf4>
 8007276:	613c      	str	r4, [r7, #16]
 8007278:	4638      	mov	r0, r7
 800727a:	f001 f97f 	bl	800857c <__mcmp>
 800727e:	2800      	cmp	r0, #0
 8007280:	db25      	blt.n	80072ce <quorem+0xec>
 8007282:	4629      	mov	r1, r5
 8007284:	2000      	movs	r0, #0
 8007286:	f858 2b04 	ldr.w	r2, [r8], #4
 800728a:	f8d1 c000 	ldr.w	ip, [r1]
 800728e:	fa1f fe82 	uxth.w	lr, r2
 8007292:	fa1f f38c 	uxth.w	r3, ip
 8007296:	eba3 030e 	sub.w	r3, r3, lr
 800729a:	4403      	add	r3, r0
 800729c:	0c12      	lsrs	r2, r2, #16
 800729e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80072a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ac:	45c1      	cmp	r9, r8
 80072ae:	f841 3b04 	str.w	r3, [r1], #4
 80072b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072b6:	d2e6      	bcs.n	8007286 <quorem+0xa4>
 80072b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072c0:	b922      	cbnz	r2, 80072cc <quorem+0xea>
 80072c2:	3b04      	subs	r3, #4
 80072c4:	429d      	cmp	r5, r3
 80072c6:	461a      	mov	r2, r3
 80072c8:	d30b      	bcc.n	80072e2 <quorem+0x100>
 80072ca:	613c      	str	r4, [r7, #16]
 80072cc:	3601      	adds	r6, #1
 80072ce:	4630      	mov	r0, r6
 80072d0:	b003      	add	sp, #12
 80072d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	3b04      	subs	r3, #4
 80072da:	2a00      	cmp	r2, #0
 80072dc:	d1cb      	bne.n	8007276 <quorem+0x94>
 80072de:	3c01      	subs	r4, #1
 80072e0:	e7c6      	b.n	8007270 <quorem+0x8e>
 80072e2:	6812      	ldr	r2, [r2, #0]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	2a00      	cmp	r2, #0
 80072e8:	d1ef      	bne.n	80072ca <quorem+0xe8>
 80072ea:	3c01      	subs	r4, #1
 80072ec:	e7ea      	b.n	80072c4 <quorem+0xe2>
 80072ee:	2000      	movs	r0, #0
 80072f0:	e7ee      	b.n	80072d0 <quorem+0xee>
 80072f2:	0000      	movs	r0, r0
 80072f4:	0000      	movs	r0, r0
	...

080072f8 <_dtoa_r>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	69c7      	ldr	r7, [r0, #28]
 80072fe:	b097      	sub	sp, #92	@ 0x5c
 8007300:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007304:	ec55 4b10 	vmov	r4, r5, d0
 8007308:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800730a:	9107      	str	r1, [sp, #28]
 800730c:	4681      	mov	r9, r0
 800730e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007310:	9311      	str	r3, [sp, #68]	@ 0x44
 8007312:	b97f      	cbnz	r7, 8007334 <_dtoa_r+0x3c>
 8007314:	2010      	movs	r0, #16
 8007316:	f000 fe09 	bl	8007f2c <malloc>
 800731a:	4602      	mov	r2, r0
 800731c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007320:	b920      	cbnz	r0, 800732c <_dtoa_r+0x34>
 8007322:	4ba9      	ldr	r3, [pc, #676]	@ (80075c8 <_dtoa_r+0x2d0>)
 8007324:	21ef      	movs	r1, #239	@ 0xef
 8007326:	48a9      	ldr	r0, [pc, #676]	@ (80075cc <_dtoa_r+0x2d4>)
 8007328:	f001 fc6c 	bl	8008c04 <__assert_func>
 800732c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007330:	6007      	str	r7, [r0, #0]
 8007332:	60c7      	str	r7, [r0, #12]
 8007334:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007338:	6819      	ldr	r1, [r3, #0]
 800733a:	b159      	cbz	r1, 8007354 <_dtoa_r+0x5c>
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	604a      	str	r2, [r1, #4]
 8007340:	2301      	movs	r3, #1
 8007342:	4093      	lsls	r3, r2
 8007344:	608b      	str	r3, [r1, #8]
 8007346:	4648      	mov	r0, r9
 8007348:	f000 fee6 	bl	8008118 <_Bfree>
 800734c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	1e2b      	subs	r3, r5, #0
 8007356:	bfb9      	ittee	lt
 8007358:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800735c:	9305      	strlt	r3, [sp, #20]
 800735e:	2300      	movge	r3, #0
 8007360:	6033      	strge	r3, [r6, #0]
 8007362:	9f05      	ldr	r7, [sp, #20]
 8007364:	4b9a      	ldr	r3, [pc, #616]	@ (80075d0 <_dtoa_r+0x2d8>)
 8007366:	bfbc      	itt	lt
 8007368:	2201      	movlt	r2, #1
 800736a:	6032      	strlt	r2, [r6, #0]
 800736c:	43bb      	bics	r3, r7
 800736e:	d112      	bne.n	8007396 <_dtoa_r+0x9e>
 8007370:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007372:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800737c:	4323      	orrs	r3, r4
 800737e:	f000 855a 	beq.w	8007e36 <_dtoa_r+0xb3e>
 8007382:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007384:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80075e4 <_dtoa_r+0x2ec>
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 855c 	beq.w	8007e46 <_dtoa_r+0xb4e>
 800738e:	f10a 0303 	add.w	r3, sl, #3
 8007392:	f000 bd56 	b.w	8007e42 <_dtoa_r+0xb4a>
 8007396:	ed9d 7b04 	vldr	d7, [sp, #16]
 800739a:	2200      	movs	r2, #0
 800739c:	ec51 0b17 	vmov	r0, r1, d7
 80073a0:	2300      	movs	r3, #0
 80073a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80073a6:	f7f9 fb8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80073aa:	4680      	mov	r8, r0
 80073ac:	b158      	cbz	r0, 80073c6 <_dtoa_r+0xce>
 80073ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80073b0:	2301      	movs	r3, #1
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073b6:	b113      	cbz	r3, 80073be <_dtoa_r+0xc6>
 80073b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80073ba:	4b86      	ldr	r3, [pc, #536]	@ (80075d4 <_dtoa_r+0x2dc>)
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80075e8 <_dtoa_r+0x2f0>
 80073c2:	f000 bd40 	b.w	8007e46 <_dtoa_r+0xb4e>
 80073c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80073ca:	aa14      	add	r2, sp, #80	@ 0x50
 80073cc:	a915      	add	r1, sp, #84	@ 0x54
 80073ce:	4648      	mov	r0, r9
 80073d0:	f001 f984 	bl	80086dc <__d2b>
 80073d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073d8:	9002      	str	r0, [sp, #8]
 80073da:	2e00      	cmp	r6, #0
 80073dc:	d078      	beq.n	80074d0 <_dtoa_r+0x1d8>
 80073de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80073e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073f8:	4619      	mov	r1, r3
 80073fa:	2200      	movs	r2, #0
 80073fc:	4b76      	ldr	r3, [pc, #472]	@ (80075d8 <_dtoa_r+0x2e0>)
 80073fe:	f7f8 ff43 	bl	8000288 <__aeabi_dsub>
 8007402:	a36b      	add	r3, pc, #428	@ (adr r3, 80075b0 <_dtoa_r+0x2b8>)
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	f7f9 f8f6 	bl	80005f8 <__aeabi_dmul>
 800740c:	a36a      	add	r3, pc, #424	@ (adr r3, 80075b8 <_dtoa_r+0x2c0>)
 800740e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007412:	f7f8 ff3b 	bl	800028c <__adddf3>
 8007416:	4604      	mov	r4, r0
 8007418:	4630      	mov	r0, r6
 800741a:	460d      	mov	r5, r1
 800741c:	f7f9 f882 	bl	8000524 <__aeabi_i2d>
 8007420:	a367      	add	r3, pc, #412	@ (adr r3, 80075c0 <_dtoa_r+0x2c8>)
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	f7f9 f8e7 	bl	80005f8 <__aeabi_dmul>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4620      	mov	r0, r4
 8007430:	4629      	mov	r1, r5
 8007432:	f7f8 ff2b 	bl	800028c <__adddf3>
 8007436:	4604      	mov	r4, r0
 8007438:	460d      	mov	r5, r1
 800743a:	f7f9 fb8d 	bl	8000b58 <__aeabi_d2iz>
 800743e:	2200      	movs	r2, #0
 8007440:	4607      	mov	r7, r0
 8007442:	2300      	movs	r3, #0
 8007444:	4620      	mov	r0, r4
 8007446:	4629      	mov	r1, r5
 8007448:	f7f9 fb48 	bl	8000adc <__aeabi_dcmplt>
 800744c:	b140      	cbz	r0, 8007460 <_dtoa_r+0x168>
 800744e:	4638      	mov	r0, r7
 8007450:	f7f9 f868 	bl	8000524 <__aeabi_i2d>
 8007454:	4622      	mov	r2, r4
 8007456:	462b      	mov	r3, r5
 8007458:	f7f9 fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 800745c:	b900      	cbnz	r0, 8007460 <_dtoa_r+0x168>
 800745e:	3f01      	subs	r7, #1
 8007460:	2f16      	cmp	r7, #22
 8007462:	d852      	bhi.n	800750a <_dtoa_r+0x212>
 8007464:	4b5d      	ldr	r3, [pc, #372]	@ (80075dc <_dtoa_r+0x2e4>)
 8007466:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007472:	f7f9 fb33 	bl	8000adc <__aeabi_dcmplt>
 8007476:	2800      	cmp	r0, #0
 8007478:	d049      	beq.n	800750e <_dtoa_r+0x216>
 800747a:	3f01      	subs	r7, #1
 800747c:	2300      	movs	r3, #0
 800747e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007480:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007482:	1b9b      	subs	r3, r3, r6
 8007484:	1e5a      	subs	r2, r3, #1
 8007486:	bf45      	ittet	mi
 8007488:	f1c3 0301 	rsbmi	r3, r3, #1
 800748c:	9300      	strmi	r3, [sp, #0]
 800748e:	2300      	movpl	r3, #0
 8007490:	2300      	movmi	r3, #0
 8007492:	9206      	str	r2, [sp, #24]
 8007494:	bf54      	ite	pl
 8007496:	9300      	strpl	r3, [sp, #0]
 8007498:	9306      	strmi	r3, [sp, #24]
 800749a:	2f00      	cmp	r7, #0
 800749c:	db39      	blt.n	8007512 <_dtoa_r+0x21a>
 800749e:	9b06      	ldr	r3, [sp, #24]
 80074a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80074a2:	443b      	add	r3, r7
 80074a4:	9306      	str	r3, [sp, #24]
 80074a6:	2300      	movs	r3, #0
 80074a8:	9308      	str	r3, [sp, #32]
 80074aa:	9b07      	ldr	r3, [sp, #28]
 80074ac:	2b09      	cmp	r3, #9
 80074ae:	d863      	bhi.n	8007578 <_dtoa_r+0x280>
 80074b0:	2b05      	cmp	r3, #5
 80074b2:	bfc4      	itt	gt
 80074b4:	3b04      	subgt	r3, #4
 80074b6:	9307      	strgt	r3, [sp, #28]
 80074b8:	9b07      	ldr	r3, [sp, #28]
 80074ba:	f1a3 0302 	sub.w	r3, r3, #2
 80074be:	bfcc      	ite	gt
 80074c0:	2400      	movgt	r4, #0
 80074c2:	2401      	movle	r4, #1
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d863      	bhi.n	8007590 <_dtoa_r+0x298>
 80074c8:	e8df f003 	tbb	[pc, r3]
 80074cc:	2b375452 	.word	0x2b375452
 80074d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80074d4:	441e      	add	r6, r3
 80074d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074da:	2b20      	cmp	r3, #32
 80074dc:	bfc1      	itttt	gt
 80074de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074e2:	409f      	lslgt	r7, r3
 80074e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074ec:	bfd6      	itet	le
 80074ee:	f1c3 0320 	rsble	r3, r3, #32
 80074f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80074f6:	fa04 f003 	lslle.w	r0, r4, r3
 80074fa:	f7f9 f803 	bl	8000504 <__aeabi_ui2d>
 80074fe:	2201      	movs	r2, #1
 8007500:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007504:	3e01      	subs	r6, #1
 8007506:	9212      	str	r2, [sp, #72]	@ 0x48
 8007508:	e776      	b.n	80073f8 <_dtoa_r+0x100>
 800750a:	2301      	movs	r3, #1
 800750c:	e7b7      	b.n	800747e <_dtoa_r+0x186>
 800750e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007510:	e7b6      	b.n	8007480 <_dtoa_r+0x188>
 8007512:	9b00      	ldr	r3, [sp, #0]
 8007514:	1bdb      	subs	r3, r3, r7
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	427b      	negs	r3, r7
 800751a:	9308      	str	r3, [sp, #32]
 800751c:	2300      	movs	r3, #0
 800751e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007520:	e7c3      	b.n	80074aa <_dtoa_r+0x1b2>
 8007522:	2301      	movs	r3, #1
 8007524:	9309      	str	r3, [sp, #36]	@ 0x24
 8007526:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007528:	eb07 0b03 	add.w	fp, r7, r3
 800752c:	f10b 0301 	add.w	r3, fp, #1
 8007530:	2b01      	cmp	r3, #1
 8007532:	9303      	str	r3, [sp, #12]
 8007534:	bfb8      	it	lt
 8007536:	2301      	movlt	r3, #1
 8007538:	e006      	b.n	8007548 <_dtoa_r+0x250>
 800753a:	2301      	movs	r3, #1
 800753c:	9309      	str	r3, [sp, #36]	@ 0x24
 800753e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007540:	2b00      	cmp	r3, #0
 8007542:	dd28      	ble.n	8007596 <_dtoa_r+0x29e>
 8007544:	469b      	mov	fp, r3
 8007546:	9303      	str	r3, [sp, #12]
 8007548:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800754c:	2100      	movs	r1, #0
 800754e:	2204      	movs	r2, #4
 8007550:	f102 0514 	add.w	r5, r2, #20
 8007554:	429d      	cmp	r5, r3
 8007556:	d926      	bls.n	80075a6 <_dtoa_r+0x2ae>
 8007558:	6041      	str	r1, [r0, #4]
 800755a:	4648      	mov	r0, r9
 800755c:	f000 fd9c 	bl	8008098 <_Balloc>
 8007560:	4682      	mov	sl, r0
 8007562:	2800      	cmp	r0, #0
 8007564:	d142      	bne.n	80075ec <_dtoa_r+0x2f4>
 8007566:	4b1e      	ldr	r3, [pc, #120]	@ (80075e0 <_dtoa_r+0x2e8>)
 8007568:	4602      	mov	r2, r0
 800756a:	f240 11af 	movw	r1, #431	@ 0x1af
 800756e:	e6da      	b.n	8007326 <_dtoa_r+0x2e>
 8007570:	2300      	movs	r3, #0
 8007572:	e7e3      	b.n	800753c <_dtoa_r+0x244>
 8007574:	2300      	movs	r3, #0
 8007576:	e7d5      	b.n	8007524 <_dtoa_r+0x22c>
 8007578:	2401      	movs	r4, #1
 800757a:	2300      	movs	r3, #0
 800757c:	9307      	str	r3, [sp, #28]
 800757e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007580:	f04f 3bff 	mov.w	fp, #4294967295
 8007584:	2200      	movs	r2, #0
 8007586:	f8cd b00c 	str.w	fp, [sp, #12]
 800758a:	2312      	movs	r3, #18
 800758c:	920c      	str	r2, [sp, #48]	@ 0x30
 800758e:	e7db      	b.n	8007548 <_dtoa_r+0x250>
 8007590:	2301      	movs	r3, #1
 8007592:	9309      	str	r3, [sp, #36]	@ 0x24
 8007594:	e7f4      	b.n	8007580 <_dtoa_r+0x288>
 8007596:	f04f 0b01 	mov.w	fp, #1
 800759a:	f8cd b00c 	str.w	fp, [sp, #12]
 800759e:	465b      	mov	r3, fp
 80075a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80075a4:	e7d0      	b.n	8007548 <_dtoa_r+0x250>
 80075a6:	3101      	adds	r1, #1
 80075a8:	0052      	lsls	r2, r2, #1
 80075aa:	e7d1      	b.n	8007550 <_dtoa_r+0x258>
 80075ac:	f3af 8000 	nop.w
 80075b0:	636f4361 	.word	0x636f4361
 80075b4:	3fd287a7 	.word	0x3fd287a7
 80075b8:	8b60c8b3 	.word	0x8b60c8b3
 80075bc:	3fc68a28 	.word	0x3fc68a28
 80075c0:	509f79fb 	.word	0x509f79fb
 80075c4:	3fd34413 	.word	0x3fd34413
 80075c8:	080093b5 	.word	0x080093b5
 80075cc:	080093cc 	.word	0x080093cc
 80075d0:	7ff00000 	.word	0x7ff00000
 80075d4:	08009385 	.word	0x08009385
 80075d8:	3ff80000 	.word	0x3ff80000
 80075dc:	08009520 	.word	0x08009520
 80075e0:	08009424 	.word	0x08009424
 80075e4:	080093b1 	.word	0x080093b1
 80075e8:	08009384 	.word	0x08009384
 80075ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80075f0:	6018      	str	r0, [r3, #0]
 80075f2:	9b03      	ldr	r3, [sp, #12]
 80075f4:	2b0e      	cmp	r3, #14
 80075f6:	f200 80a1 	bhi.w	800773c <_dtoa_r+0x444>
 80075fa:	2c00      	cmp	r4, #0
 80075fc:	f000 809e 	beq.w	800773c <_dtoa_r+0x444>
 8007600:	2f00      	cmp	r7, #0
 8007602:	dd33      	ble.n	800766c <_dtoa_r+0x374>
 8007604:	4b9c      	ldr	r3, [pc, #624]	@ (8007878 <_dtoa_r+0x580>)
 8007606:	f007 020f 	and.w	r2, r7, #15
 800760a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800760e:	ed93 7b00 	vldr	d7, [r3]
 8007612:	05f8      	lsls	r0, r7, #23
 8007614:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007618:	ea4f 1427 	mov.w	r4, r7, asr #4
 800761c:	d516      	bpl.n	800764c <_dtoa_r+0x354>
 800761e:	4b97      	ldr	r3, [pc, #604]	@ (800787c <_dtoa_r+0x584>)
 8007620:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007628:	f7f9 f910 	bl	800084c <__aeabi_ddiv>
 800762c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007630:	f004 040f 	and.w	r4, r4, #15
 8007634:	2603      	movs	r6, #3
 8007636:	4d91      	ldr	r5, [pc, #580]	@ (800787c <_dtoa_r+0x584>)
 8007638:	b954      	cbnz	r4, 8007650 <_dtoa_r+0x358>
 800763a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800763e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007642:	f7f9 f903 	bl	800084c <__aeabi_ddiv>
 8007646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800764a:	e028      	b.n	800769e <_dtoa_r+0x3a6>
 800764c:	2602      	movs	r6, #2
 800764e:	e7f2      	b.n	8007636 <_dtoa_r+0x33e>
 8007650:	07e1      	lsls	r1, r4, #31
 8007652:	d508      	bpl.n	8007666 <_dtoa_r+0x36e>
 8007654:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800765c:	f7f8 ffcc 	bl	80005f8 <__aeabi_dmul>
 8007660:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007664:	3601      	adds	r6, #1
 8007666:	1064      	asrs	r4, r4, #1
 8007668:	3508      	adds	r5, #8
 800766a:	e7e5      	b.n	8007638 <_dtoa_r+0x340>
 800766c:	f000 80af 	beq.w	80077ce <_dtoa_r+0x4d6>
 8007670:	427c      	negs	r4, r7
 8007672:	4b81      	ldr	r3, [pc, #516]	@ (8007878 <_dtoa_r+0x580>)
 8007674:	4d81      	ldr	r5, [pc, #516]	@ (800787c <_dtoa_r+0x584>)
 8007676:	f004 020f 	and.w	r2, r4, #15
 800767a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007686:	f7f8 ffb7 	bl	80005f8 <__aeabi_dmul>
 800768a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800768e:	1124      	asrs	r4, r4, #4
 8007690:	2300      	movs	r3, #0
 8007692:	2602      	movs	r6, #2
 8007694:	2c00      	cmp	r4, #0
 8007696:	f040 808f 	bne.w	80077b8 <_dtoa_r+0x4c0>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1d3      	bne.n	8007646 <_dtoa_r+0x34e>
 800769e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 8094 	beq.w	80077d2 <_dtoa_r+0x4da>
 80076aa:	4b75      	ldr	r3, [pc, #468]	@ (8007880 <_dtoa_r+0x588>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	f7f9 fa13 	bl	8000adc <__aeabi_dcmplt>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	f000 808b 	beq.w	80077d2 <_dtoa_r+0x4da>
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 8087 	beq.w	80077d2 <_dtoa_r+0x4da>
 80076c4:	f1bb 0f00 	cmp.w	fp, #0
 80076c8:	dd34      	ble.n	8007734 <_dtoa_r+0x43c>
 80076ca:	4620      	mov	r0, r4
 80076cc:	4b6d      	ldr	r3, [pc, #436]	@ (8007884 <_dtoa_r+0x58c>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	4629      	mov	r1, r5
 80076d2:	f7f8 ff91 	bl	80005f8 <__aeabi_dmul>
 80076d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076da:	f107 38ff 	add.w	r8, r7, #4294967295
 80076de:	3601      	adds	r6, #1
 80076e0:	465c      	mov	r4, fp
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7f8 ff1e 	bl	8000524 <__aeabi_i2d>
 80076e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076ec:	f7f8 ff84 	bl	80005f8 <__aeabi_dmul>
 80076f0:	4b65      	ldr	r3, [pc, #404]	@ (8007888 <_dtoa_r+0x590>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	f7f8 fdca 	bl	800028c <__adddf3>
 80076f8:	4605      	mov	r5, r0
 80076fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076fe:	2c00      	cmp	r4, #0
 8007700:	d16a      	bne.n	80077d8 <_dtoa_r+0x4e0>
 8007702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007706:	4b61      	ldr	r3, [pc, #388]	@ (800788c <_dtoa_r+0x594>)
 8007708:	2200      	movs	r2, #0
 800770a:	f7f8 fdbd 	bl	8000288 <__aeabi_dsub>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007716:	462a      	mov	r2, r5
 8007718:	4633      	mov	r3, r6
 800771a:	f7f9 f9fd 	bl	8000b18 <__aeabi_dcmpgt>
 800771e:	2800      	cmp	r0, #0
 8007720:	f040 8298 	bne.w	8007c54 <_dtoa_r+0x95c>
 8007724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007728:	462a      	mov	r2, r5
 800772a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800772e:	f7f9 f9d5 	bl	8000adc <__aeabi_dcmplt>
 8007732:	bb38      	cbnz	r0, 8007784 <_dtoa_r+0x48c>
 8007734:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007738:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800773c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800773e:	2b00      	cmp	r3, #0
 8007740:	f2c0 8157 	blt.w	80079f2 <_dtoa_r+0x6fa>
 8007744:	2f0e      	cmp	r7, #14
 8007746:	f300 8154 	bgt.w	80079f2 <_dtoa_r+0x6fa>
 800774a:	4b4b      	ldr	r3, [pc, #300]	@ (8007878 <_dtoa_r+0x580>)
 800774c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007750:	ed93 7b00 	vldr	d7, [r3]
 8007754:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007756:	2b00      	cmp	r3, #0
 8007758:	ed8d 7b00 	vstr	d7, [sp]
 800775c:	f280 80e5 	bge.w	800792a <_dtoa_r+0x632>
 8007760:	9b03      	ldr	r3, [sp, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	f300 80e1 	bgt.w	800792a <_dtoa_r+0x632>
 8007768:	d10c      	bne.n	8007784 <_dtoa_r+0x48c>
 800776a:	4b48      	ldr	r3, [pc, #288]	@ (800788c <_dtoa_r+0x594>)
 800776c:	2200      	movs	r2, #0
 800776e:	ec51 0b17 	vmov	r0, r1, d7
 8007772:	f7f8 ff41 	bl	80005f8 <__aeabi_dmul>
 8007776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800777a:	f7f9 f9c3 	bl	8000b04 <__aeabi_dcmpge>
 800777e:	2800      	cmp	r0, #0
 8007780:	f000 8266 	beq.w	8007c50 <_dtoa_r+0x958>
 8007784:	2400      	movs	r4, #0
 8007786:	4625      	mov	r5, r4
 8007788:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800778a:	4656      	mov	r6, sl
 800778c:	ea6f 0803 	mvn.w	r8, r3
 8007790:	2700      	movs	r7, #0
 8007792:	4621      	mov	r1, r4
 8007794:	4648      	mov	r0, r9
 8007796:	f000 fcbf 	bl	8008118 <_Bfree>
 800779a:	2d00      	cmp	r5, #0
 800779c:	f000 80bd 	beq.w	800791a <_dtoa_r+0x622>
 80077a0:	b12f      	cbz	r7, 80077ae <_dtoa_r+0x4b6>
 80077a2:	42af      	cmp	r7, r5
 80077a4:	d003      	beq.n	80077ae <_dtoa_r+0x4b6>
 80077a6:	4639      	mov	r1, r7
 80077a8:	4648      	mov	r0, r9
 80077aa:	f000 fcb5 	bl	8008118 <_Bfree>
 80077ae:	4629      	mov	r1, r5
 80077b0:	4648      	mov	r0, r9
 80077b2:	f000 fcb1 	bl	8008118 <_Bfree>
 80077b6:	e0b0      	b.n	800791a <_dtoa_r+0x622>
 80077b8:	07e2      	lsls	r2, r4, #31
 80077ba:	d505      	bpl.n	80077c8 <_dtoa_r+0x4d0>
 80077bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077c0:	f7f8 ff1a 	bl	80005f8 <__aeabi_dmul>
 80077c4:	3601      	adds	r6, #1
 80077c6:	2301      	movs	r3, #1
 80077c8:	1064      	asrs	r4, r4, #1
 80077ca:	3508      	adds	r5, #8
 80077cc:	e762      	b.n	8007694 <_dtoa_r+0x39c>
 80077ce:	2602      	movs	r6, #2
 80077d0:	e765      	b.n	800769e <_dtoa_r+0x3a6>
 80077d2:	9c03      	ldr	r4, [sp, #12]
 80077d4:	46b8      	mov	r8, r7
 80077d6:	e784      	b.n	80076e2 <_dtoa_r+0x3ea>
 80077d8:	4b27      	ldr	r3, [pc, #156]	@ (8007878 <_dtoa_r+0x580>)
 80077da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077e4:	4454      	add	r4, sl
 80077e6:	2900      	cmp	r1, #0
 80077e8:	d054      	beq.n	8007894 <_dtoa_r+0x59c>
 80077ea:	4929      	ldr	r1, [pc, #164]	@ (8007890 <_dtoa_r+0x598>)
 80077ec:	2000      	movs	r0, #0
 80077ee:	f7f9 f82d 	bl	800084c <__aeabi_ddiv>
 80077f2:	4633      	mov	r3, r6
 80077f4:	462a      	mov	r2, r5
 80077f6:	f7f8 fd47 	bl	8000288 <__aeabi_dsub>
 80077fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80077fe:	4656      	mov	r6, sl
 8007800:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007804:	f7f9 f9a8 	bl	8000b58 <__aeabi_d2iz>
 8007808:	4605      	mov	r5, r0
 800780a:	f7f8 fe8b 	bl	8000524 <__aeabi_i2d>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007816:	f7f8 fd37 	bl	8000288 <__aeabi_dsub>
 800781a:	3530      	adds	r5, #48	@ 0x30
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007824:	f806 5b01 	strb.w	r5, [r6], #1
 8007828:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800782c:	f7f9 f956 	bl	8000adc <__aeabi_dcmplt>
 8007830:	2800      	cmp	r0, #0
 8007832:	d172      	bne.n	800791a <_dtoa_r+0x622>
 8007834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007838:	4911      	ldr	r1, [pc, #68]	@ (8007880 <_dtoa_r+0x588>)
 800783a:	2000      	movs	r0, #0
 800783c:	f7f8 fd24 	bl	8000288 <__aeabi_dsub>
 8007840:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007844:	f7f9 f94a 	bl	8000adc <__aeabi_dcmplt>
 8007848:	2800      	cmp	r0, #0
 800784a:	f040 80b4 	bne.w	80079b6 <_dtoa_r+0x6be>
 800784e:	42a6      	cmp	r6, r4
 8007850:	f43f af70 	beq.w	8007734 <_dtoa_r+0x43c>
 8007854:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007858:	4b0a      	ldr	r3, [pc, #40]	@ (8007884 <_dtoa_r+0x58c>)
 800785a:	2200      	movs	r2, #0
 800785c:	f7f8 fecc 	bl	80005f8 <__aeabi_dmul>
 8007860:	4b08      	ldr	r3, [pc, #32]	@ (8007884 <_dtoa_r+0x58c>)
 8007862:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007866:	2200      	movs	r2, #0
 8007868:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800786c:	f7f8 fec4 	bl	80005f8 <__aeabi_dmul>
 8007870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007874:	e7c4      	b.n	8007800 <_dtoa_r+0x508>
 8007876:	bf00      	nop
 8007878:	08009520 	.word	0x08009520
 800787c:	080094f8 	.word	0x080094f8
 8007880:	3ff00000 	.word	0x3ff00000
 8007884:	40240000 	.word	0x40240000
 8007888:	401c0000 	.word	0x401c0000
 800788c:	40140000 	.word	0x40140000
 8007890:	3fe00000 	.word	0x3fe00000
 8007894:	4631      	mov	r1, r6
 8007896:	4628      	mov	r0, r5
 8007898:	f7f8 feae 	bl	80005f8 <__aeabi_dmul>
 800789c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80078a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80078a2:	4656      	mov	r6, sl
 80078a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078a8:	f7f9 f956 	bl	8000b58 <__aeabi_d2iz>
 80078ac:	4605      	mov	r5, r0
 80078ae:	f7f8 fe39 	bl	8000524 <__aeabi_i2d>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078ba:	f7f8 fce5 	bl	8000288 <__aeabi_dsub>
 80078be:	3530      	adds	r5, #48	@ 0x30
 80078c0:	f806 5b01 	strb.w	r5, [r6], #1
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	42a6      	cmp	r6, r4
 80078ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	d124      	bne.n	800791e <_dtoa_r+0x626>
 80078d4:	4baf      	ldr	r3, [pc, #700]	@ (8007b94 <_dtoa_r+0x89c>)
 80078d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80078da:	f7f8 fcd7 	bl	800028c <__adddf3>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078e6:	f7f9 f917 	bl	8000b18 <__aeabi_dcmpgt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d163      	bne.n	80079b6 <_dtoa_r+0x6be>
 80078ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80078f2:	49a8      	ldr	r1, [pc, #672]	@ (8007b94 <_dtoa_r+0x89c>)
 80078f4:	2000      	movs	r0, #0
 80078f6:	f7f8 fcc7 	bl	8000288 <__aeabi_dsub>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007902:	f7f9 f8eb 	bl	8000adc <__aeabi_dcmplt>
 8007906:	2800      	cmp	r0, #0
 8007908:	f43f af14 	beq.w	8007734 <_dtoa_r+0x43c>
 800790c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800790e:	1e73      	subs	r3, r6, #1
 8007910:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007912:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007916:	2b30      	cmp	r3, #48	@ 0x30
 8007918:	d0f8      	beq.n	800790c <_dtoa_r+0x614>
 800791a:	4647      	mov	r7, r8
 800791c:	e03b      	b.n	8007996 <_dtoa_r+0x69e>
 800791e:	4b9e      	ldr	r3, [pc, #632]	@ (8007b98 <_dtoa_r+0x8a0>)
 8007920:	f7f8 fe6a 	bl	80005f8 <__aeabi_dmul>
 8007924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007928:	e7bc      	b.n	80078a4 <_dtoa_r+0x5ac>
 800792a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800792e:	4656      	mov	r6, sl
 8007930:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007934:	4620      	mov	r0, r4
 8007936:	4629      	mov	r1, r5
 8007938:	f7f8 ff88 	bl	800084c <__aeabi_ddiv>
 800793c:	f7f9 f90c 	bl	8000b58 <__aeabi_d2iz>
 8007940:	4680      	mov	r8, r0
 8007942:	f7f8 fdef 	bl	8000524 <__aeabi_i2d>
 8007946:	e9dd 2300 	ldrd	r2, r3, [sp]
 800794a:	f7f8 fe55 	bl	80005f8 <__aeabi_dmul>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4620      	mov	r0, r4
 8007954:	4629      	mov	r1, r5
 8007956:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800795a:	f7f8 fc95 	bl	8000288 <__aeabi_dsub>
 800795e:	f806 4b01 	strb.w	r4, [r6], #1
 8007962:	9d03      	ldr	r5, [sp, #12]
 8007964:	eba6 040a 	sub.w	r4, r6, sl
 8007968:	42a5      	cmp	r5, r4
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	d133      	bne.n	80079d8 <_dtoa_r+0x6e0>
 8007970:	f7f8 fc8c 	bl	800028c <__adddf3>
 8007974:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007978:	4604      	mov	r4, r0
 800797a:	460d      	mov	r5, r1
 800797c:	f7f9 f8cc 	bl	8000b18 <__aeabi_dcmpgt>
 8007980:	b9c0      	cbnz	r0, 80079b4 <_dtoa_r+0x6bc>
 8007982:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007986:	4620      	mov	r0, r4
 8007988:	4629      	mov	r1, r5
 800798a:	f7f9 f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800798e:	b110      	cbz	r0, 8007996 <_dtoa_r+0x69e>
 8007990:	f018 0f01 	tst.w	r8, #1
 8007994:	d10e      	bne.n	80079b4 <_dtoa_r+0x6bc>
 8007996:	9902      	ldr	r1, [sp, #8]
 8007998:	4648      	mov	r0, r9
 800799a:	f000 fbbd 	bl	8008118 <_Bfree>
 800799e:	2300      	movs	r3, #0
 80079a0:	7033      	strb	r3, [r6, #0]
 80079a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079a4:	3701      	adds	r7, #1
 80079a6:	601f      	str	r7, [r3, #0]
 80079a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 824b 	beq.w	8007e46 <_dtoa_r+0xb4e>
 80079b0:	601e      	str	r6, [r3, #0]
 80079b2:	e248      	b.n	8007e46 <_dtoa_r+0xb4e>
 80079b4:	46b8      	mov	r8, r7
 80079b6:	4633      	mov	r3, r6
 80079b8:	461e      	mov	r6, r3
 80079ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079be:	2a39      	cmp	r2, #57	@ 0x39
 80079c0:	d106      	bne.n	80079d0 <_dtoa_r+0x6d8>
 80079c2:	459a      	cmp	sl, r3
 80079c4:	d1f8      	bne.n	80079b8 <_dtoa_r+0x6c0>
 80079c6:	2230      	movs	r2, #48	@ 0x30
 80079c8:	f108 0801 	add.w	r8, r8, #1
 80079cc:	f88a 2000 	strb.w	r2, [sl]
 80079d0:	781a      	ldrb	r2, [r3, #0]
 80079d2:	3201      	adds	r2, #1
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	e7a0      	b.n	800791a <_dtoa_r+0x622>
 80079d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007b98 <_dtoa_r+0x8a0>)
 80079da:	2200      	movs	r2, #0
 80079dc:	f7f8 fe0c 	bl	80005f8 <__aeabi_dmul>
 80079e0:	2200      	movs	r2, #0
 80079e2:	2300      	movs	r3, #0
 80079e4:	4604      	mov	r4, r0
 80079e6:	460d      	mov	r5, r1
 80079e8:	f7f9 f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d09f      	beq.n	8007930 <_dtoa_r+0x638>
 80079f0:	e7d1      	b.n	8007996 <_dtoa_r+0x69e>
 80079f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	f000 80ea 	beq.w	8007bce <_dtoa_r+0x8d6>
 80079fa:	9a07      	ldr	r2, [sp, #28]
 80079fc:	2a01      	cmp	r2, #1
 80079fe:	f300 80cd 	bgt.w	8007b9c <_dtoa_r+0x8a4>
 8007a02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007a04:	2a00      	cmp	r2, #0
 8007a06:	f000 80c1 	beq.w	8007b8c <_dtoa_r+0x894>
 8007a0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a0e:	9c08      	ldr	r4, [sp, #32]
 8007a10:	9e00      	ldr	r6, [sp, #0]
 8007a12:	9a00      	ldr	r2, [sp, #0]
 8007a14:	441a      	add	r2, r3
 8007a16:	9200      	str	r2, [sp, #0]
 8007a18:	9a06      	ldr	r2, [sp, #24]
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	441a      	add	r2, r3
 8007a1e:	4648      	mov	r0, r9
 8007a20:	9206      	str	r2, [sp, #24]
 8007a22:	f000 fc2d 	bl	8008280 <__i2b>
 8007a26:	4605      	mov	r5, r0
 8007a28:	b166      	cbz	r6, 8007a44 <_dtoa_r+0x74c>
 8007a2a:	9b06      	ldr	r3, [sp, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dd09      	ble.n	8007a44 <_dtoa_r+0x74c>
 8007a30:	42b3      	cmp	r3, r6
 8007a32:	9a00      	ldr	r2, [sp, #0]
 8007a34:	bfa8      	it	ge
 8007a36:	4633      	movge	r3, r6
 8007a38:	1ad2      	subs	r2, r2, r3
 8007a3a:	9200      	str	r2, [sp, #0]
 8007a3c:	9a06      	ldr	r2, [sp, #24]
 8007a3e:	1af6      	subs	r6, r6, r3
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	9306      	str	r3, [sp, #24]
 8007a44:	9b08      	ldr	r3, [sp, #32]
 8007a46:	b30b      	cbz	r3, 8007a8c <_dtoa_r+0x794>
 8007a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 80c6 	beq.w	8007bdc <_dtoa_r+0x8e4>
 8007a50:	2c00      	cmp	r4, #0
 8007a52:	f000 80c0 	beq.w	8007bd6 <_dtoa_r+0x8de>
 8007a56:	4629      	mov	r1, r5
 8007a58:	4622      	mov	r2, r4
 8007a5a:	4648      	mov	r0, r9
 8007a5c:	f000 fcc8 	bl	80083f0 <__pow5mult>
 8007a60:	9a02      	ldr	r2, [sp, #8]
 8007a62:	4601      	mov	r1, r0
 8007a64:	4605      	mov	r5, r0
 8007a66:	4648      	mov	r0, r9
 8007a68:	f000 fc20 	bl	80082ac <__multiply>
 8007a6c:	9902      	ldr	r1, [sp, #8]
 8007a6e:	4680      	mov	r8, r0
 8007a70:	4648      	mov	r0, r9
 8007a72:	f000 fb51 	bl	8008118 <_Bfree>
 8007a76:	9b08      	ldr	r3, [sp, #32]
 8007a78:	1b1b      	subs	r3, r3, r4
 8007a7a:	9308      	str	r3, [sp, #32]
 8007a7c:	f000 80b1 	beq.w	8007be2 <_dtoa_r+0x8ea>
 8007a80:	9a08      	ldr	r2, [sp, #32]
 8007a82:	4641      	mov	r1, r8
 8007a84:	4648      	mov	r0, r9
 8007a86:	f000 fcb3 	bl	80083f0 <__pow5mult>
 8007a8a:	9002      	str	r0, [sp, #8]
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	4648      	mov	r0, r9
 8007a90:	f000 fbf6 	bl	8008280 <__i2b>
 8007a94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a96:	4604      	mov	r4, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 81d8 	beq.w	8007e4e <_dtoa_r+0xb56>
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4601      	mov	r1, r0
 8007aa2:	4648      	mov	r0, r9
 8007aa4:	f000 fca4 	bl	80083f0 <__pow5mult>
 8007aa8:	9b07      	ldr	r3, [sp, #28]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	4604      	mov	r4, r0
 8007aae:	f300 809f 	bgt.w	8007bf0 <_dtoa_r+0x8f8>
 8007ab2:	9b04      	ldr	r3, [sp, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f040 8097 	bne.w	8007be8 <_dtoa_r+0x8f0>
 8007aba:	9b05      	ldr	r3, [sp, #20]
 8007abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f040 8093 	bne.w	8007bec <_dtoa_r+0x8f4>
 8007ac6:	9b05      	ldr	r3, [sp, #20]
 8007ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007acc:	0d1b      	lsrs	r3, r3, #20
 8007ace:	051b      	lsls	r3, r3, #20
 8007ad0:	b133      	cbz	r3, 8007ae0 <_dtoa_r+0x7e8>
 8007ad2:	9b00      	ldr	r3, [sp, #0]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	9b06      	ldr	r3, [sp, #24]
 8007ada:	3301      	adds	r3, #1
 8007adc:	9306      	str	r3, [sp, #24]
 8007ade:	2301      	movs	r3, #1
 8007ae0:	9308      	str	r3, [sp, #32]
 8007ae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 81b8 	beq.w	8007e5a <_dtoa_r+0xb62>
 8007aea:	6923      	ldr	r3, [r4, #16]
 8007aec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007af0:	6918      	ldr	r0, [r3, #16]
 8007af2:	f000 fb79 	bl	80081e8 <__hi0bits>
 8007af6:	f1c0 0020 	rsb	r0, r0, #32
 8007afa:	9b06      	ldr	r3, [sp, #24]
 8007afc:	4418      	add	r0, r3
 8007afe:	f010 001f 	ands.w	r0, r0, #31
 8007b02:	f000 8082 	beq.w	8007c0a <_dtoa_r+0x912>
 8007b06:	f1c0 0320 	rsb	r3, r0, #32
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	dd73      	ble.n	8007bf6 <_dtoa_r+0x8fe>
 8007b0e:	9b00      	ldr	r3, [sp, #0]
 8007b10:	f1c0 001c 	rsb	r0, r0, #28
 8007b14:	4403      	add	r3, r0
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	9b06      	ldr	r3, [sp, #24]
 8007b1a:	4403      	add	r3, r0
 8007b1c:	4406      	add	r6, r0
 8007b1e:	9306      	str	r3, [sp, #24]
 8007b20:	9b00      	ldr	r3, [sp, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	dd05      	ble.n	8007b32 <_dtoa_r+0x83a>
 8007b26:	9902      	ldr	r1, [sp, #8]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4648      	mov	r0, r9
 8007b2c:	f000 fcba 	bl	80084a4 <__lshift>
 8007b30:	9002      	str	r0, [sp, #8]
 8007b32:	9b06      	ldr	r3, [sp, #24]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dd05      	ble.n	8007b44 <_dtoa_r+0x84c>
 8007b38:	4621      	mov	r1, r4
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4648      	mov	r0, r9
 8007b3e:	f000 fcb1 	bl	80084a4 <__lshift>
 8007b42:	4604      	mov	r4, r0
 8007b44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d061      	beq.n	8007c0e <_dtoa_r+0x916>
 8007b4a:	9802      	ldr	r0, [sp, #8]
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	f000 fd15 	bl	800857c <__mcmp>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	da5b      	bge.n	8007c0e <_dtoa_r+0x916>
 8007b56:	2300      	movs	r3, #0
 8007b58:	9902      	ldr	r1, [sp, #8]
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	4648      	mov	r0, r9
 8007b5e:	f000 fafd 	bl	800815c <__multadd>
 8007b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b64:	9002      	str	r0, [sp, #8]
 8007b66:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8177 	beq.w	8007e5e <_dtoa_r+0xb66>
 8007b70:	4629      	mov	r1, r5
 8007b72:	2300      	movs	r3, #0
 8007b74:	220a      	movs	r2, #10
 8007b76:	4648      	mov	r0, r9
 8007b78:	f000 faf0 	bl	800815c <__multadd>
 8007b7c:	f1bb 0f00 	cmp.w	fp, #0
 8007b80:	4605      	mov	r5, r0
 8007b82:	dc6f      	bgt.n	8007c64 <_dtoa_r+0x96c>
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	dc49      	bgt.n	8007c1e <_dtoa_r+0x926>
 8007b8a:	e06b      	b.n	8007c64 <_dtoa_r+0x96c>
 8007b8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b92:	e73c      	b.n	8007a0e <_dtoa_r+0x716>
 8007b94:	3fe00000 	.word	0x3fe00000
 8007b98:	40240000 	.word	0x40240000
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	1e5c      	subs	r4, r3, #1
 8007ba0:	9b08      	ldr	r3, [sp, #32]
 8007ba2:	42a3      	cmp	r3, r4
 8007ba4:	db09      	blt.n	8007bba <_dtoa_r+0x8c2>
 8007ba6:	1b1c      	subs	r4, r3, r4
 8007ba8:	9b03      	ldr	r3, [sp, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f6bf af30 	bge.w	8007a10 <_dtoa_r+0x718>
 8007bb0:	9b00      	ldr	r3, [sp, #0]
 8007bb2:	9a03      	ldr	r2, [sp, #12]
 8007bb4:	1a9e      	subs	r6, r3, r2
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	e72b      	b.n	8007a12 <_dtoa_r+0x71a>
 8007bba:	9b08      	ldr	r3, [sp, #32]
 8007bbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bbe:	9408      	str	r4, [sp, #32]
 8007bc0:	1ae3      	subs	r3, r4, r3
 8007bc2:	441a      	add	r2, r3
 8007bc4:	9e00      	ldr	r6, [sp, #0]
 8007bc6:	9b03      	ldr	r3, [sp, #12]
 8007bc8:	920d      	str	r2, [sp, #52]	@ 0x34
 8007bca:	2400      	movs	r4, #0
 8007bcc:	e721      	b.n	8007a12 <_dtoa_r+0x71a>
 8007bce:	9c08      	ldr	r4, [sp, #32]
 8007bd0:	9e00      	ldr	r6, [sp, #0]
 8007bd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007bd4:	e728      	b.n	8007a28 <_dtoa_r+0x730>
 8007bd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007bda:	e751      	b.n	8007a80 <_dtoa_r+0x788>
 8007bdc:	9a08      	ldr	r2, [sp, #32]
 8007bde:	9902      	ldr	r1, [sp, #8]
 8007be0:	e750      	b.n	8007a84 <_dtoa_r+0x78c>
 8007be2:	f8cd 8008 	str.w	r8, [sp, #8]
 8007be6:	e751      	b.n	8007a8c <_dtoa_r+0x794>
 8007be8:	2300      	movs	r3, #0
 8007bea:	e779      	b.n	8007ae0 <_dtoa_r+0x7e8>
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	e777      	b.n	8007ae0 <_dtoa_r+0x7e8>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	9308      	str	r3, [sp, #32]
 8007bf4:	e779      	b.n	8007aea <_dtoa_r+0x7f2>
 8007bf6:	d093      	beq.n	8007b20 <_dtoa_r+0x828>
 8007bf8:	9a00      	ldr	r2, [sp, #0]
 8007bfa:	331c      	adds	r3, #28
 8007bfc:	441a      	add	r2, r3
 8007bfe:	9200      	str	r2, [sp, #0]
 8007c00:	9a06      	ldr	r2, [sp, #24]
 8007c02:	441a      	add	r2, r3
 8007c04:	441e      	add	r6, r3
 8007c06:	9206      	str	r2, [sp, #24]
 8007c08:	e78a      	b.n	8007b20 <_dtoa_r+0x828>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	e7f4      	b.n	8007bf8 <_dtoa_r+0x900>
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	46b8      	mov	r8, r7
 8007c14:	dc20      	bgt.n	8007c58 <_dtoa_r+0x960>
 8007c16:	469b      	mov	fp, r3
 8007c18:	9b07      	ldr	r3, [sp, #28]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	dd1e      	ble.n	8007c5c <_dtoa_r+0x964>
 8007c1e:	f1bb 0f00 	cmp.w	fp, #0
 8007c22:	f47f adb1 	bne.w	8007788 <_dtoa_r+0x490>
 8007c26:	4621      	mov	r1, r4
 8007c28:	465b      	mov	r3, fp
 8007c2a:	2205      	movs	r2, #5
 8007c2c:	4648      	mov	r0, r9
 8007c2e:	f000 fa95 	bl	800815c <__multadd>
 8007c32:	4601      	mov	r1, r0
 8007c34:	4604      	mov	r4, r0
 8007c36:	9802      	ldr	r0, [sp, #8]
 8007c38:	f000 fca0 	bl	800857c <__mcmp>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f77f ada3 	ble.w	8007788 <_dtoa_r+0x490>
 8007c42:	4656      	mov	r6, sl
 8007c44:	2331      	movs	r3, #49	@ 0x31
 8007c46:	f806 3b01 	strb.w	r3, [r6], #1
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	e59f      	b.n	8007790 <_dtoa_r+0x498>
 8007c50:	9c03      	ldr	r4, [sp, #12]
 8007c52:	46b8      	mov	r8, r7
 8007c54:	4625      	mov	r5, r4
 8007c56:	e7f4      	b.n	8007c42 <_dtoa_r+0x94a>
 8007c58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8101 	beq.w	8007e66 <_dtoa_r+0xb6e>
 8007c64:	2e00      	cmp	r6, #0
 8007c66:	dd05      	ble.n	8007c74 <_dtoa_r+0x97c>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4632      	mov	r2, r6
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	f000 fc19 	bl	80084a4 <__lshift>
 8007c72:	4605      	mov	r5, r0
 8007c74:	9b08      	ldr	r3, [sp, #32]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d05c      	beq.n	8007d34 <_dtoa_r+0xa3c>
 8007c7a:	6869      	ldr	r1, [r5, #4]
 8007c7c:	4648      	mov	r0, r9
 8007c7e:	f000 fa0b 	bl	8008098 <_Balloc>
 8007c82:	4606      	mov	r6, r0
 8007c84:	b928      	cbnz	r0, 8007c92 <_dtoa_r+0x99a>
 8007c86:	4b82      	ldr	r3, [pc, #520]	@ (8007e90 <_dtoa_r+0xb98>)
 8007c88:	4602      	mov	r2, r0
 8007c8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c8e:	f7ff bb4a 	b.w	8007326 <_dtoa_r+0x2e>
 8007c92:	692a      	ldr	r2, [r5, #16]
 8007c94:	3202      	adds	r2, #2
 8007c96:	0092      	lsls	r2, r2, #2
 8007c98:	f105 010c 	add.w	r1, r5, #12
 8007c9c:	300c      	adds	r0, #12
 8007c9e:	f000 ffa3 	bl	8008be8 <memcpy>
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4648      	mov	r0, r9
 8007ca8:	f000 fbfc 	bl	80084a4 <__lshift>
 8007cac:	f10a 0301 	add.w	r3, sl, #1
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	eb0a 030b 	add.w	r3, sl, fp
 8007cb6:	9308      	str	r3, [sp, #32]
 8007cb8:	9b04      	ldr	r3, [sp, #16]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	462f      	mov	r7, r5
 8007cc0:	9306      	str	r3, [sp, #24]
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	9b00      	ldr	r3, [sp, #0]
 8007cc6:	9802      	ldr	r0, [sp, #8]
 8007cc8:	4621      	mov	r1, r4
 8007cca:	f103 3bff 	add.w	fp, r3, #4294967295
 8007cce:	f7ff fa88 	bl	80071e2 <quorem>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	3330      	adds	r3, #48	@ 0x30
 8007cd6:	9003      	str	r0, [sp, #12]
 8007cd8:	4639      	mov	r1, r7
 8007cda:	9802      	ldr	r0, [sp, #8]
 8007cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cde:	f000 fc4d 	bl	800857c <__mcmp>
 8007ce2:	462a      	mov	r2, r5
 8007ce4:	9004      	str	r0, [sp, #16]
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4648      	mov	r0, r9
 8007cea:	f000 fc63 	bl	80085b4 <__mdiff>
 8007cee:	68c2      	ldr	r2, [r0, #12]
 8007cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	bb02      	cbnz	r2, 8007d38 <_dtoa_r+0xa40>
 8007cf6:	4601      	mov	r1, r0
 8007cf8:	9802      	ldr	r0, [sp, #8]
 8007cfa:	f000 fc3f 	bl	800857c <__mcmp>
 8007cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d00:	4602      	mov	r2, r0
 8007d02:	4631      	mov	r1, r6
 8007d04:	4648      	mov	r0, r9
 8007d06:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d08:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d0a:	f000 fa05 	bl	8008118 <_Bfree>
 8007d0e:	9b07      	ldr	r3, [sp, #28]
 8007d10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007d12:	9e00      	ldr	r6, [sp, #0]
 8007d14:	ea42 0103 	orr.w	r1, r2, r3
 8007d18:	9b06      	ldr	r3, [sp, #24]
 8007d1a:	4319      	orrs	r1, r3
 8007d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d1e:	d10d      	bne.n	8007d3c <_dtoa_r+0xa44>
 8007d20:	2b39      	cmp	r3, #57	@ 0x39
 8007d22:	d027      	beq.n	8007d74 <_dtoa_r+0xa7c>
 8007d24:	9a04      	ldr	r2, [sp, #16]
 8007d26:	2a00      	cmp	r2, #0
 8007d28:	dd01      	ble.n	8007d2e <_dtoa_r+0xa36>
 8007d2a:	9b03      	ldr	r3, [sp, #12]
 8007d2c:	3331      	adds	r3, #49	@ 0x31
 8007d2e:	f88b 3000 	strb.w	r3, [fp]
 8007d32:	e52e      	b.n	8007792 <_dtoa_r+0x49a>
 8007d34:	4628      	mov	r0, r5
 8007d36:	e7b9      	b.n	8007cac <_dtoa_r+0x9b4>
 8007d38:	2201      	movs	r2, #1
 8007d3a:	e7e2      	b.n	8007d02 <_dtoa_r+0xa0a>
 8007d3c:	9904      	ldr	r1, [sp, #16]
 8007d3e:	2900      	cmp	r1, #0
 8007d40:	db04      	blt.n	8007d4c <_dtoa_r+0xa54>
 8007d42:	9807      	ldr	r0, [sp, #28]
 8007d44:	4301      	orrs	r1, r0
 8007d46:	9806      	ldr	r0, [sp, #24]
 8007d48:	4301      	orrs	r1, r0
 8007d4a:	d120      	bne.n	8007d8e <_dtoa_r+0xa96>
 8007d4c:	2a00      	cmp	r2, #0
 8007d4e:	ddee      	ble.n	8007d2e <_dtoa_r+0xa36>
 8007d50:	9902      	ldr	r1, [sp, #8]
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	2201      	movs	r2, #1
 8007d56:	4648      	mov	r0, r9
 8007d58:	f000 fba4 	bl	80084a4 <__lshift>
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	9002      	str	r0, [sp, #8]
 8007d60:	f000 fc0c 	bl	800857c <__mcmp>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	9b00      	ldr	r3, [sp, #0]
 8007d68:	dc02      	bgt.n	8007d70 <_dtoa_r+0xa78>
 8007d6a:	d1e0      	bne.n	8007d2e <_dtoa_r+0xa36>
 8007d6c:	07da      	lsls	r2, r3, #31
 8007d6e:	d5de      	bpl.n	8007d2e <_dtoa_r+0xa36>
 8007d70:	2b39      	cmp	r3, #57	@ 0x39
 8007d72:	d1da      	bne.n	8007d2a <_dtoa_r+0xa32>
 8007d74:	2339      	movs	r3, #57	@ 0x39
 8007d76:	f88b 3000 	strb.w	r3, [fp]
 8007d7a:	4633      	mov	r3, r6
 8007d7c:	461e      	mov	r6, r3
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d84:	2a39      	cmp	r2, #57	@ 0x39
 8007d86:	d04e      	beq.n	8007e26 <_dtoa_r+0xb2e>
 8007d88:	3201      	adds	r2, #1
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	e501      	b.n	8007792 <_dtoa_r+0x49a>
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	dd03      	ble.n	8007d9a <_dtoa_r+0xaa2>
 8007d92:	2b39      	cmp	r3, #57	@ 0x39
 8007d94:	d0ee      	beq.n	8007d74 <_dtoa_r+0xa7c>
 8007d96:	3301      	adds	r3, #1
 8007d98:	e7c9      	b.n	8007d2e <_dtoa_r+0xa36>
 8007d9a:	9a00      	ldr	r2, [sp, #0]
 8007d9c:	9908      	ldr	r1, [sp, #32]
 8007d9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007da2:	428a      	cmp	r2, r1
 8007da4:	d028      	beq.n	8007df8 <_dtoa_r+0xb00>
 8007da6:	9902      	ldr	r1, [sp, #8]
 8007da8:	2300      	movs	r3, #0
 8007daa:	220a      	movs	r2, #10
 8007dac:	4648      	mov	r0, r9
 8007dae:	f000 f9d5 	bl	800815c <__multadd>
 8007db2:	42af      	cmp	r7, r5
 8007db4:	9002      	str	r0, [sp, #8]
 8007db6:	f04f 0300 	mov.w	r3, #0
 8007dba:	f04f 020a 	mov.w	r2, #10
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	4648      	mov	r0, r9
 8007dc2:	d107      	bne.n	8007dd4 <_dtoa_r+0xadc>
 8007dc4:	f000 f9ca 	bl	800815c <__multadd>
 8007dc8:	4607      	mov	r7, r0
 8007dca:	4605      	mov	r5, r0
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	e777      	b.n	8007cc4 <_dtoa_r+0x9cc>
 8007dd4:	f000 f9c2 	bl	800815c <__multadd>
 8007dd8:	4629      	mov	r1, r5
 8007dda:	4607      	mov	r7, r0
 8007ddc:	2300      	movs	r3, #0
 8007dde:	220a      	movs	r2, #10
 8007de0:	4648      	mov	r0, r9
 8007de2:	f000 f9bb 	bl	800815c <__multadd>
 8007de6:	4605      	mov	r5, r0
 8007de8:	e7f0      	b.n	8007dcc <_dtoa_r+0xad4>
 8007dea:	f1bb 0f00 	cmp.w	fp, #0
 8007dee:	bfcc      	ite	gt
 8007df0:	465e      	movgt	r6, fp
 8007df2:	2601      	movle	r6, #1
 8007df4:	4456      	add	r6, sl
 8007df6:	2700      	movs	r7, #0
 8007df8:	9902      	ldr	r1, [sp, #8]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	4648      	mov	r0, r9
 8007e00:	f000 fb50 	bl	80084a4 <__lshift>
 8007e04:	4621      	mov	r1, r4
 8007e06:	9002      	str	r0, [sp, #8]
 8007e08:	f000 fbb8 	bl	800857c <__mcmp>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	dcb4      	bgt.n	8007d7a <_dtoa_r+0xa82>
 8007e10:	d102      	bne.n	8007e18 <_dtoa_r+0xb20>
 8007e12:	9b00      	ldr	r3, [sp, #0]
 8007e14:	07db      	lsls	r3, r3, #31
 8007e16:	d4b0      	bmi.n	8007d7a <_dtoa_r+0xa82>
 8007e18:	4633      	mov	r3, r6
 8007e1a:	461e      	mov	r6, r3
 8007e1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e20:	2a30      	cmp	r2, #48	@ 0x30
 8007e22:	d0fa      	beq.n	8007e1a <_dtoa_r+0xb22>
 8007e24:	e4b5      	b.n	8007792 <_dtoa_r+0x49a>
 8007e26:	459a      	cmp	sl, r3
 8007e28:	d1a8      	bne.n	8007d7c <_dtoa_r+0xa84>
 8007e2a:	2331      	movs	r3, #49	@ 0x31
 8007e2c:	f108 0801 	add.w	r8, r8, #1
 8007e30:	f88a 3000 	strb.w	r3, [sl]
 8007e34:	e4ad      	b.n	8007792 <_dtoa_r+0x49a>
 8007e36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007e94 <_dtoa_r+0xb9c>
 8007e3c:	b11b      	cbz	r3, 8007e46 <_dtoa_r+0xb4e>
 8007e3e:	f10a 0308 	add.w	r3, sl, #8
 8007e42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	4650      	mov	r0, sl
 8007e48:	b017      	add	sp, #92	@ 0x5c
 8007e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4e:	9b07      	ldr	r3, [sp, #28]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	f77f ae2e 	ble.w	8007ab2 <_dtoa_r+0x7ba>
 8007e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e58:	9308      	str	r3, [sp, #32]
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	e64d      	b.n	8007afa <_dtoa_r+0x802>
 8007e5e:	f1bb 0f00 	cmp.w	fp, #0
 8007e62:	f77f aed9 	ble.w	8007c18 <_dtoa_r+0x920>
 8007e66:	4656      	mov	r6, sl
 8007e68:	9802      	ldr	r0, [sp, #8]
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	f7ff f9b9 	bl	80071e2 <quorem>
 8007e70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007e74:	f806 3b01 	strb.w	r3, [r6], #1
 8007e78:	eba6 020a 	sub.w	r2, r6, sl
 8007e7c:	4593      	cmp	fp, r2
 8007e7e:	ddb4      	ble.n	8007dea <_dtoa_r+0xaf2>
 8007e80:	9902      	ldr	r1, [sp, #8]
 8007e82:	2300      	movs	r3, #0
 8007e84:	220a      	movs	r2, #10
 8007e86:	4648      	mov	r0, r9
 8007e88:	f000 f968 	bl	800815c <__multadd>
 8007e8c:	9002      	str	r0, [sp, #8]
 8007e8e:	e7eb      	b.n	8007e68 <_dtoa_r+0xb70>
 8007e90:	08009424 	.word	0x08009424
 8007e94:	080093a8 	.word	0x080093a8

08007e98 <_free_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	d041      	beq.n	8007f24 <_free_r+0x8c>
 8007ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea4:	1f0c      	subs	r4, r1, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfb8      	it	lt
 8007eaa:	18e4      	addlt	r4, r4, r3
 8007eac:	f000 f8e8 	bl	8008080 <__malloc_lock>
 8007eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f28 <_free_r+0x90>)
 8007eb2:	6813      	ldr	r3, [r2, #0]
 8007eb4:	b933      	cbnz	r3, 8007ec4 <_free_r+0x2c>
 8007eb6:	6063      	str	r3, [r4, #4]
 8007eb8:	6014      	str	r4, [r2, #0]
 8007eba:	4628      	mov	r0, r5
 8007ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec0:	f000 b8e4 	b.w	800808c <__malloc_unlock>
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	d908      	bls.n	8007eda <_free_r+0x42>
 8007ec8:	6820      	ldr	r0, [r4, #0]
 8007eca:	1821      	adds	r1, r4, r0
 8007ecc:	428b      	cmp	r3, r1
 8007ece:	bf01      	itttt	eq
 8007ed0:	6819      	ldreq	r1, [r3, #0]
 8007ed2:	685b      	ldreq	r3, [r3, #4]
 8007ed4:	1809      	addeq	r1, r1, r0
 8007ed6:	6021      	streq	r1, [r4, #0]
 8007ed8:	e7ed      	b.n	8007eb6 <_free_r+0x1e>
 8007eda:	461a      	mov	r2, r3
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	b10b      	cbz	r3, 8007ee4 <_free_r+0x4c>
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	d9fa      	bls.n	8007eda <_free_r+0x42>
 8007ee4:	6811      	ldr	r1, [r2, #0]
 8007ee6:	1850      	adds	r0, r2, r1
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d10b      	bne.n	8007f04 <_free_r+0x6c>
 8007eec:	6820      	ldr	r0, [r4, #0]
 8007eee:	4401      	add	r1, r0
 8007ef0:	1850      	adds	r0, r2, r1
 8007ef2:	4283      	cmp	r3, r0
 8007ef4:	6011      	str	r1, [r2, #0]
 8007ef6:	d1e0      	bne.n	8007eba <_free_r+0x22>
 8007ef8:	6818      	ldr	r0, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	6053      	str	r3, [r2, #4]
 8007efe:	4408      	add	r0, r1
 8007f00:	6010      	str	r0, [r2, #0]
 8007f02:	e7da      	b.n	8007eba <_free_r+0x22>
 8007f04:	d902      	bls.n	8007f0c <_free_r+0x74>
 8007f06:	230c      	movs	r3, #12
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	e7d6      	b.n	8007eba <_free_r+0x22>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	1821      	adds	r1, r4, r0
 8007f10:	428b      	cmp	r3, r1
 8007f12:	bf04      	itt	eq
 8007f14:	6819      	ldreq	r1, [r3, #0]
 8007f16:	685b      	ldreq	r3, [r3, #4]
 8007f18:	6063      	str	r3, [r4, #4]
 8007f1a:	bf04      	itt	eq
 8007f1c:	1809      	addeq	r1, r1, r0
 8007f1e:	6021      	streq	r1, [r4, #0]
 8007f20:	6054      	str	r4, [r2, #4]
 8007f22:	e7ca      	b.n	8007eba <_free_r+0x22>
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	bf00      	nop
 8007f28:	200033e4 	.word	0x200033e4

08007f2c <malloc>:
 8007f2c:	4b02      	ldr	r3, [pc, #8]	@ (8007f38 <malloc+0xc>)
 8007f2e:	4601      	mov	r1, r0
 8007f30:	6818      	ldr	r0, [r3, #0]
 8007f32:	f000 b825 	b.w	8007f80 <_malloc_r>
 8007f36:	bf00      	nop
 8007f38:	20000018 	.word	0x20000018

08007f3c <sbrk_aligned>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	4e0f      	ldr	r6, [pc, #60]	@ (8007f7c <sbrk_aligned+0x40>)
 8007f40:	460c      	mov	r4, r1
 8007f42:	6831      	ldr	r1, [r6, #0]
 8007f44:	4605      	mov	r5, r0
 8007f46:	b911      	cbnz	r1, 8007f4e <sbrk_aligned+0x12>
 8007f48:	f000 fe3e 	bl	8008bc8 <_sbrk_r>
 8007f4c:	6030      	str	r0, [r6, #0]
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 fe39 	bl	8008bc8 <_sbrk_r>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d103      	bne.n	8007f62 <sbrk_aligned+0x26>
 8007f5a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f5e:	4620      	mov	r0, r4
 8007f60:	bd70      	pop	{r4, r5, r6, pc}
 8007f62:	1cc4      	adds	r4, r0, #3
 8007f64:	f024 0403 	bic.w	r4, r4, #3
 8007f68:	42a0      	cmp	r0, r4
 8007f6a:	d0f8      	beq.n	8007f5e <sbrk_aligned+0x22>
 8007f6c:	1a21      	subs	r1, r4, r0
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 fe2a 	bl	8008bc8 <_sbrk_r>
 8007f74:	3001      	adds	r0, #1
 8007f76:	d1f2      	bne.n	8007f5e <sbrk_aligned+0x22>
 8007f78:	e7ef      	b.n	8007f5a <sbrk_aligned+0x1e>
 8007f7a:	bf00      	nop
 8007f7c:	200033e0 	.word	0x200033e0

08007f80 <_malloc_r>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	1ccd      	adds	r5, r1, #3
 8007f86:	f025 0503 	bic.w	r5, r5, #3
 8007f8a:	3508      	adds	r5, #8
 8007f8c:	2d0c      	cmp	r5, #12
 8007f8e:	bf38      	it	cc
 8007f90:	250c      	movcc	r5, #12
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	4606      	mov	r6, r0
 8007f96:	db01      	blt.n	8007f9c <_malloc_r+0x1c>
 8007f98:	42a9      	cmp	r1, r5
 8007f9a:	d904      	bls.n	8007fa6 <_malloc_r+0x26>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	6033      	str	r3, [r6, #0]
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800807c <_malloc_r+0xfc>
 8007faa:	f000 f869 	bl	8008080 <__malloc_lock>
 8007fae:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb2:	461c      	mov	r4, r3
 8007fb4:	bb44      	cbnz	r4, 8008008 <_malloc_r+0x88>
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7ff ffbf 	bl	8007f3c <sbrk_aligned>
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	d158      	bne.n	8008076 <_malloc_r+0xf6>
 8007fc4:	f8d8 4000 	ldr.w	r4, [r8]
 8007fc8:	4627      	mov	r7, r4
 8007fca:	2f00      	cmp	r7, #0
 8007fcc:	d143      	bne.n	8008056 <_malloc_r+0xd6>
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	d04b      	beq.n	800806a <_malloc_r+0xea>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	eb04 0903 	add.w	r9, r4, r3
 8007fdc:	f000 fdf4 	bl	8008bc8 <_sbrk_r>
 8007fe0:	4581      	cmp	r9, r0
 8007fe2:	d142      	bne.n	800806a <_malloc_r+0xea>
 8007fe4:	6821      	ldr	r1, [r4, #0]
 8007fe6:	1a6d      	subs	r5, r5, r1
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7ff ffa6 	bl	8007f3c <sbrk_aligned>
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d03a      	beq.n	800806a <_malloc_r+0xea>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	442b      	add	r3, r5
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	bb62      	cbnz	r2, 800805c <_malloc_r+0xdc>
 8008002:	f8c8 7000 	str.w	r7, [r8]
 8008006:	e00f      	b.n	8008028 <_malloc_r+0xa8>
 8008008:	6822      	ldr	r2, [r4, #0]
 800800a:	1b52      	subs	r2, r2, r5
 800800c:	d420      	bmi.n	8008050 <_malloc_r+0xd0>
 800800e:	2a0b      	cmp	r2, #11
 8008010:	d917      	bls.n	8008042 <_malloc_r+0xc2>
 8008012:	1961      	adds	r1, r4, r5
 8008014:	42a3      	cmp	r3, r4
 8008016:	6025      	str	r5, [r4, #0]
 8008018:	bf18      	it	ne
 800801a:	6059      	strne	r1, [r3, #4]
 800801c:	6863      	ldr	r3, [r4, #4]
 800801e:	bf08      	it	eq
 8008020:	f8c8 1000 	streq.w	r1, [r8]
 8008024:	5162      	str	r2, [r4, r5]
 8008026:	604b      	str	r3, [r1, #4]
 8008028:	4630      	mov	r0, r6
 800802a:	f000 f82f 	bl	800808c <__malloc_unlock>
 800802e:	f104 000b 	add.w	r0, r4, #11
 8008032:	1d23      	adds	r3, r4, #4
 8008034:	f020 0007 	bic.w	r0, r0, #7
 8008038:	1ac2      	subs	r2, r0, r3
 800803a:	bf1c      	itt	ne
 800803c:	1a1b      	subne	r3, r3, r0
 800803e:	50a3      	strne	r3, [r4, r2]
 8008040:	e7af      	b.n	8007fa2 <_malloc_r+0x22>
 8008042:	6862      	ldr	r2, [r4, #4]
 8008044:	42a3      	cmp	r3, r4
 8008046:	bf0c      	ite	eq
 8008048:	f8c8 2000 	streq.w	r2, [r8]
 800804c:	605a      	strne	r2, [r3, #4]
 800804e:	e7eb      	b.n	8008028 <_malloc_r+0xa8>
 8008050:	4623      	mov	r3, r4
 8008052:	6864      	ldr	r4, [r4, #4]
 8008054:	e7ae      	b.n	8007fb4 <_malloc_r+0x34>
 8008056:	463c      	mov	r4, r7
 8008058:	687f      	ldr	r7, [r7, #4]
 800805a:	e7b6      	b.n	8007fca <_malloc_r+0x4a>
 800805c:	461a      	mov	r2, r3
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	42a3      	cmp	r3, r4
 8008062:	d1fb      	bne.n	800805c <_malloc_r+0xdc>
 8008064:	2300      	movs	r3, #0
 8008066:	6053      	str	r3, [r2, #4]
 8008068:	e7de      	b.n	8008028 <_malloc_r+0xa8>
 800806a:	230c      	movs	r3, #12
 800806c:	6033      	str	r3, [r6, #0]
 800806e:	4630      	mov	r0, r6
 8008070:	f000 f80c 	bl	800808c <__malloc_unlock>
 8008074:	e794      	b.n	8007fa0 <_malloc_r+0x20>
 8008076:	6005      	str	r5, [r0, #0]
 8008078:	e7d6      	b.n	8008028 <_malloc_r+0xa8>
 800807a:	bf00      	nop
 800807c:	200033e4 	.word	0x200033e4

08008080 <__malloc_lock>:
 8008080:	4801      	ldr	r0, [pc, #4]	@ (8008088 <__malloc_lock+0x8>)
 8008082:	f7ff b8ac 	b.w	80071de <__retarget_lock_acquire_recursive>
 8008086:	bf00      	nop
 8008088:	200033dc 	.word	0x200033dc

0800808c <__malloc_unlock>:
 800808c:	4801      	ldr	r0, [pc, #4]	@ (8008094 <__malloc_unlock+0x8>)
 800808e:	f7ff b8a7 	b.w	80071e0 <__retarget_lock_release_recursive>
 8008092:	bf00      	nop
 8008094:	200033dc 	.word	0x200033dc

08008098 <_Balloc>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	69c6      	ldr	r6, [r0, #28]
 800809c:	4604      	mov	r4, r0
 800809e:	460d      	mov	r5, r1
 80080a0:	b976      	cbnz	r6, 80080c0 <_Balloc+0x28>
 80080a2:	2010      	movs	r0, #16
 80080a4:	f7ff ff42 	bl	8007f2c <malloc>
 80080a8:	4602      	mov	r2, r0
 80080aa:	61e0      	str	r0, [r4, #28]
 80080ac:	b920      	cbnz	r0, 80080b8 <_Balloc+0x20>
 80080ae:	4b18      	ldr	r3, [pc, #96]	@ (8008110 <_Balloc+0x78>)
 80080b0:	4818      	ldr	r0, [pc, #96]	@ (8008114 <_Balloc+0x7c>)
 80080b2:	216b      	movs	r1, #107	@ 0x6b
 80080b4:	f000 fda6 	bl	8008c04 <__assert_func>
 80080b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080bc:	6006      	str	r6, [r0, #0]
 80080be:	60c6      	str	r6, [r0, #12]
 80080c0:	69e6      	ldr	r6, [r4, #28]
 80080c2:	68f3      	ldr	r3, [r6, #12]
 80080c4:	b183      	cbz	r3, 80080e8 <_Balloc+0x50>
 80080c6:	69e3      	ldr	r3, [r4, #28]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ce:	b9b8      	cbnz	r0, 8008100 <_Balloc+0x68>
 80080d0:	2101      	movs	r1, #1
 80080d2:	fa01 f605 	lsl.w	r6, r1, r5
 80080d6:	1d72      	adds	r2, r6, #5
 80080d8:	0092      	lsls	r2, r2, #2
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fdb0 	bl	8008c40 <_calloc_r>
 80080e0:	b160      	cbz	r0, 80080fc <_Balloc+0x64>
 80080e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080e6:	e00e      	b.n	8008106 <_Balloc+0x6e>
 80080e8:	2221      	movs	r2, #33	@ 0x21
 80080ea:	2104      	movs	r1, #4
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 fda7 	bl	8008c40 <_calloc_r>
 80080f2:	69e3      	ldr	r3, [r4, #28]
 80080f4:	60f0      	str	r0, [r6, #12]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e4      	bne.n	80080c6 <_Balloc+0x2e>
 80080fc:	2000      	movs	r0, #0
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	6802      	ldr	r2, [r0, #0]
 8008102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008106:	2300      	movs	r3, #0
 8008108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800810c:	e7f7      	b.n	80080fe <_Balloc+0x66>
 800810e:	bf00      	nop
 8008110:	080093b5 	.word	0x080093b5
 8008114:	08009435 	.word	0x08009435

08008118 <_Bfree>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	69c6      	ldr	r6, [r0, #28]
 800811c:	4605      	mov	r5, r0
 800811e:	460c      	mov	r4, r1
 8008120:	b976      	cbnz	r6, 8008140 <_Bfree+0x28>
 8008122:	2010      	movs	r0, #16
 8008124:	f7ff ff02 	bl	8007f2c <malloc>
 8008128:	4602      	mov	r2, r0
 800812a:	61e8      	str	r0, [r5, #28]
 800812c:	b920      	cbnz	r0, 8008138 <_Bfree+0x20>
 800812e:	4b09      	ldr	r3, [pc, #36]	@ (8008154 <_Bfree+0x3c>)
 8008130:	4809      	ldr	r0, [pc, #36]	@ (8008158 <_Bfree+0x40>)
 8008132:	218f      	movs	r1, #143	@ 0x8f
 8008134:	f000 fd66 	bl	8008c04 <__assert_func>
 8008138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800813c:	6006      	str	r6, [r0, #0]
 800813e:	60c6      	str	r6, [r0, #12]
 8008140:	b13c      	cbz	r4, 8008152 <_Bfree+0x3a>
 8008142:	69eb      	ldr	r3, [r5, #28]
 8008144:	6862      	ldr	r2, [r4, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800814c:	6021      	str	r1, [r4, #0]
 800814e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	080093b5 	.word	0x080093b5
 8008158:	08009435 	.word	0x08009435

0800815c <__multadd>:
 800815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008160:	690d      	ldr	r5, [r1, #16]
 8008162:	4607      	mov	r7, r0
 8008164:	460c      	mov	r4, r1
 8008166:	461e      	mov	r6, r3
 8008168:	f101 0c14 	add.w	ip, r1, #20
 800816c:	2000      	movs	r0, #0
 800816e:	f8dc 3000 	ldr.w	r3, [ip]
 8008172:	b299      	uxth	r1, r3
 8008174:	fb02 6101 	mla	r1, r2, r1, r6
 8008178:	0c1e      	lsrs	r6, r3, #16
 800817a:	0c0b      	lsrs	r3, r1, #16
 800817c:	fb02 3306 	mla	r3, r2, r6, r3
 8008180:	b289      	uxth	r1, r1
 8008182:	3001      	adds	r0, #1
 8008184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008188:	4285      	cmp	r5, r0
 800818a:	f84c 1b04 	str.w	r1, [ip], #4
 800818e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008192:	dcec      	bgt.n	800816e <__multadd+0x12>
 8008194:	b30e      	cbz	r6, 80081da <__multadd+0x7e>
 8008196:	68a3      	ldr	r3, [r4, #8]
 8008198:	42ab      	cmp	r3, r5
 800819a:	dc19      	bgt.n	80081d0 <__multadd+0x74>
 800819c:	6861      	ldr	r1, [r4, #4]
 800819e:	4638      	mov	r0, r7
 80081a0:	3101      	adds	r1, #1
 80081a2:	f7ff ff79 	bl	8008098 <_Balloc>
 80081a6:	4680      	mov	r8, r0
 80081a8:	b928      	cbnz	r0, 80081b6 <__multadd+0x5a>
 80081aa:	4602      	mov	r2, r0
 80081ac:	4b0c      	ldr	r3, [pc, #48]	@ (80081e0 <__multadd+0x84>)
 80081ae:	480d      	ldr	r0, [pc, #52]	@ (80081e4 <__multadd+0x88>)
 80081b0:	21ba      	movs	r1, #186	@ 0xba
 80081b2:	f000 fd27 	bl	8008c04 <__assert_func>
 80081b6:	6922      	ldr	r2, [r4, #16]
 80081b8:	3202      	adds	r2, #2
 80081ba:	f104 010c 	add.w	r1, r4, #12
 80081be:	0092      	lsls	r2, r2, #2
 80081c0:	300c      	adds	r0, #12
 80081c2:	f000 fd11 	bl	8008be8 <memcpy>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4638      	mov	r0, r7
 80081ca:	f7ff ffa5 	bl	8008118 <_Bfree>
 80081ce:	4644      	mov	r4, r8
 80081d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081d4:	3501      	adds	r5, #1
 80081d6:	615e      	str	r6, [r3, #20]
 80081d8:	6125      	str	r5, [r4, #16]
 80081da:	4620      	mov	r0, r4
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e0:	08009424 	.word	0x08009424
 80081e4:	08009435 	.word	0x08009435

080081e8 <__hi0bits>:
 80081e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081ec:	4603      	mov	r3, r0
 80081ee:	bf36      	itet	cc
 80081f0:	0403      	lslcc	r3, r0, #16
 80081f2:	2000      	movcs	r0, #0
 80081f4:	2010      	movcc	r0, #16
 80081f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081fa:	bf3c      	itt	cc
 80081fc:	021b      	lslcc	r3, r3, #8
 80081fe:	3008      	addcc	r0, #8
 8008200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008204:	bf3c      	itt	cc
 8008206:	011b      	lslcc	r3, r3, #4
 8008208:	3004      	addcc	r0, #4
 800820a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800820e:	bf3c      	itt	cc
 8008210:	009b      	lslcc	r3, r3, #2
 8008212:	3002      	addcc	r0, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	db05      	blt.n	8008224 <__hi0bits+0x3c>
 8008218:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800821c:	f100 0001 	add.w	r0, r0, #1
 8008220:	bf08      	it	eq
 8008222:	2020      	moveq	r0, #32
 8008224:	4770      	bx	lr

08008226 <__lo0bits>:
 8008226:	6803      	ldr	r3, [r0, #0]
 8008228:	4602      	mov	r2, r0
 800822a:	f013 0007 	ands.w	r0, r3, #7
 800822e:	d00b      	beq.n	8008248 <__lo0bits+0x22>
 8008230:	07d9      	lsls	r1, r3, #31
 8008232:	d421      	bmi.n	8008278 <__lo0bits+0x52>
 8008234:	0798      	lsls	r0, r3, #30
 8008236:	bf49      	itett	mi
 8008238:	085b      	lsrmi	r3, r3, #1
 800823a:	089b      	lsrpl	r3, r3, #2
 800823c:	2001      	movmi	r0, #1
 800823e:	6013      	strmi	r3, [r2, #0]
 8008240:	bf5c      	itt	pl
 8008242:	6013      	strpl	r3, [r2, #0]
 8008244:	2002      	movpl	r0, #2
 8008246:	4770      	bx	lr
 8008248:	b299      	uxth	r1, r3
 800824a:	b909      	cbnz	r1, 8008250 <__lo0bits+0x2a>
 800824c:	0c1b      	lsrs	r3, r3, #16
 800824e:	2010      	movs	r0, #16
 8008250:	b2d9      	uxtb	r1, r3
 8008252:	b909      	cbnz	r1, 8008258 <__lo0bits+0x32>
 8008254:	3008      	adds	r0, #8
 8008256:	0a1b      	lsrs	r3, r3, #8
 8008258:	0719      	lsls	r1, r3, #28
 800825a:	bf04      	itt	eq
 800825c:	091b      	lsreq	r3, r3, #4
 800825e:	3004      	addeq	r0, #4
 8008260:	0799      	lsls	r1, r3, #30
 8008262:	bf04      	itt	eq
 8008264:	089b      	lsreq	r3, r3, #2
 8008266:	3002      	addeq	r0, #2
 8008268:	07d9      	lsls	r1, r3, #31
 800826a:	d403      	bmi.n	8008274 <__lo0bits+0x4e>
 800826c:	085b      	lsrs	r3, r3, #1
 800826e:	f100 0001 	add.w	r0, r0, #1
 8008272:	d003      	beq.n	800827c <__lo0bits+0x56>
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	4770      	bx	lr
 8008278:	2000      	movs	r0, #0
 800827a:	4770      	bx	lr
 800827c:	2020      	movs	r0, #32
 800827e:	4770      	bx	lr

08008280 <__i2b>:
 8008280:	b510      	push	{r4, lr}
 8008282:	460c      	mov	r4, r1
 8008284:	2101      	movs	r1, #1
 8008286:	f7ff ff07 	bl	8008098 <_Balloc>
 800828a:	4602      	mov	r2, r0
 800828c:	b928      	cbnz	r0, 800829a <__i2b+0x1a>
 800828e:	4b05      	ldr	r3, [pc, #20]	@ (80082a4 <__i2b+0x24>)
 8008290:	4805      	ldr	r0, [pc, #20]	@ (80082a8 <__i2b+0x28>)
 8008292:	f240 1145 	movw	r1, #325	@ 0x145
 8008296:	f000 fcb5 	bl	8008c04 <__assert_func>
 800829a:	2301      	movs	r3, #1
 800829c:	6144      	str	r4, [r0, #20]
 800829e:	6103      	str	r3, [r0, #16]
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	bf00      	nop
 80082a4:	08009424 	.word	0x08009424
 80082a8:	08009435 	.word	0x08009435

080082ac <__multiply>:
 80082ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b0:	4617      	mov	r7, r2
 80082b2:	690a      	ldr	r2, [r1, #16]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	bfa8      	it	ge
 80082ba:	463b      	movge	r3, r7
 80082bc:	4689      	mov	r9, r1
 80082be:	bfa4      	itt	ge
 80082c0:	460f      	movge	r7, r1
 80082c2:	4699      	movge	r9, r3
 80082c4:	693d      	ldr	r5, [r7, #16]
 80082c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	eb05 060a 	add.w	r6, r5, sl
 80082d2:	42b3      	cmp	r3, r6
 80082d4:	b085      	sub	sp, #20
 80082d6:	bfb8      	it	lt
 80082d8:	3101      	addlt	r1, #1
 80082da:	f7ff fedd 	bl	8008098 <_Balloc>
 80082de:	b930      	cbnz	r0, 80082ee <__multiply+0x42>
 80082e0:	4602      	mov	r2, r0
 80082e2:	4b41      	ldr	r3, [pc, #260]	@ (80083e8 <__multiply+0x13c>)
 80082e4:	4841      	ldr	r0, [pc, #260]	@ (80083ec <__multiply+0x140>)
 80082e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082ea:	f000 fc8b 	bl	8008c04 <__assert_func>
 80082ee:	f100 0414 	add.w	r4, r0, #20
 80082f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80082f6:	4623      	mov	r3, r4
 80082f8:	2200      	movs	r2, #0
 80082fa:	4573      	cmp	r3, lr
 80082fc:	d320      	bcc.n	8008340 <__multiply+0x94>
 80082fe:	f107 0814 	add.w	r8, r7, #20
 8008302:	f109 0114 	add.w	r1, r9, #20
 8008306:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800830a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800830e:	9302      	str	r3, [sp, #8]
 8008310:	1beb      	subs	r3, r5, r7
 8008312:	3b15      	subs	r3, #21
 8008314:	f023 0303 	bic.w	r3, r3, #3
 8008318:	3304      	adds	r3, #4
 800831a:	3715      	adds	r7, #21
 800831c:	42bd      	cmp	r5, r7
 800831e:	bf38      	it	cc
 8008320:	2304      	movcc	r3, #4
 8008322:	9301      	str	r3, [sp, #4]
 8008324:	9b02      	ldr	r3, [sp, #8]
 8008326:	9103      	str	r1, [sp, #12]
 8008328:	428b      	cmp	r3, r1
 800832a:	d80c      	bhi.n	8008346 <__multiply+0x9a>
 800832c:	2e00      	cmp	r6, #0
 800832e:	dd03      	ble.n	8008338 <__multiply+0x8c>
 8008330:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008334:	2b00      	cmp	r3, #0
 8008336:	d055      	beq.n	80083e4 <__multiply+0x138>
 8008338:	6106      	str	r6, [r0, #16]
 800833a:	b005      	add	sp, #20
 800833c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008340:	f843 2b04 	str.w	r2, [r3], #4
 8008344:	e7d9      	b.n	80082fa <__multiply+0x4e>
 8008346:	f8b1 a000 	ldrh.w	sl, [r1]
 800834a:	f1ba 0f00 	cmp.w	sl, #0
 800834e:	d01f      	beq.n	8008390 <__multiply+0xe4>
 8008350:	46c4      	mov	ip, r8
 8008352:	46a1      	mov	r9, r4
 8008354:	2700      	movs	r7, #0
 8008356:	f85c 2b04 	ldr.w	r2, [ip], #4
 800835a:	f8d9 3000 	ldr.w	r3, [r9]
 800835e:	fa1f fb82 	uxth.w	fp, r2
 8008362:	b29b      	uxth	r3, r3
 8008364:	fb0a 330b 	mla	r3, sl, fp, r3
 8008368:	443b      	add	r3, r7
 800836a:	f8d9 7000 	ldr.w	r7, [r9]
 800836e:	0c12      	lsrs	r2, r2, #16
 8008370:	0c3f      	lsrs	r7, r7, #16
 8008372:	fb0a 7202 	mla	r2, sl, r2, r7
 8008376:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800837a:	b29b      	uxth	r3, r3
 800837c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008380:	4565      	cmp	r5, ip
 8008382:	f849 3b04 	str.w	r3, [r9], #4
 8008386:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800838a:	d8e4      	bhi.n	8008356 <__multiply+0xaa>
 800838c:	9b01      	ldr	r3, [sp, #4]
 800838e:	50e7      	str	r7, [r4, r3]
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008396:	3104      	adds	r1, #4
 8008398:	f1b9 0f00 	cmp.w	r9, #0
 800839c:	d020      	beq.n	80083e0 <__multiply+0x134>
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	4647      	mov	r7, r8
 80083a2:	46a4      	mov	ip, r4
 80083a4:	f04f 0a00 	mov.w	sl, #0
 80083a8:	f8b7 b000 	ldrh.w	fp, [r7]
 80083ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80083b0:	fb09 220b 	mla	r2, r9, fp, r2
 80083b4:	4452      	add	r2, sl
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083bc:	f84c 3b04 	str.w	r3, [ip], #4
 80083c0:	f857 3b04 	ldr.w	r3, [r7], #4
 80083c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80083cc:	fb09 330a 	mla	r3, r9, sl, r3
 80083d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80083d4:	42bd      	cmp	r5, r7
 80083d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083da:	d8e5      	bhi.n	80083a8 <__multiply+0xfc>
 80083dc:	9a01      	ldr	r2, [sp, #4]
 80083de:	50a3      	str	r3, [r4, r2]
 80083e0:	3404      	adds	r4, #4
 80083e2:	e79f      	b.n	8008324 <__multiply+0x78>
 80083e4:	3e01      	subs	r6, #1
 80083e6:	e7a1      	b.n	800832c <__multiply+0x80>
 80083e8:	08009424 	.word	0x08009424
 80083ec:	08009435 	.word	0x08009435

080083f0 <__pow5mult>:
 80083f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f4:	4615      	mov	r5, r2
 80083f6:	f012 0203 	ands.w	r2, r2, #3
 80083fa:	4607      	mov	r7, r0
 80083fc:	460e      	mov	r6, r1
 80083fe:	d007      	beq.n	8008410 <__pow5mult+0x20>
 8008400:	4c25      	ldr	r4, [pc, #148]	@ (8008498 <__pow5mult+0xa8>)
 8008402:	3a01      	subs	r2, #1
 8008404:	2300      	movs	r3, #0
 8008406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800840a:	f7ff fea7 	bl	800815c <__multadd>
 800840e:	4606      	mov	r6, r0
 8008410:	10ad      	asrs	r5, r5, #2
 8008412:	d03d      	beq.n	8008490 <__pow5mult+0xa0>
 8008414:	69fc      	ldr	r4, [r7, #28]
 8008416:	b97c      	cbnz	r4, 8008438 <__pow5mult+0x48>
 8008418:	2010      	movs	r0, #16
 800841a:	f7ff fd87 	bl	8007f2c <malloc>
 800841e:	4602      	mov	r2, r0
 8008420:	61f8      	str	r0, [r7, #28]
 8008422:	b928      	cbnz	r0, 8008430 <__pow5mult+0x40>
 8008424:	4b1d      	ldr	r3, [pc, #116]	@ (800849c <__pow5mult+0xac>)
 8008426:	481e      	ldr	r0, [pc, #120]	@ (80084a0 <__pow5mult+0xb0>)
 8008428:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800842c:	f000 fbea 	bl	8008c04 <__assert_func>
 8008430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008434:	6004      	str	r4, [r0, #0]
 8008436:	60c4      	str	r4, [r0, #12]
 8008438:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800843c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008440:	b94c      	cbnz	r4, 8008456 <__pow5mult+0x66>
 8008442:	f240 2171 	movw	r1, #625	@ 0x271
 8008446:	4638      	mov	r0, r7
 8008448:	f7ff ff1a 	bl	8008280 <__i2b>
 800844c:	2300      	movs	r3, #0
 800844e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008452:	4604      	mov	r4, r0
 8008454:	6003      	str	r3, [r0, #0]
 8008456:	f04f 0900 	mov.w	r9, #0
 800845a:	07eb      	lsls	r3, r5, #31
 800845c:	d50a      	bpl.n	8008474 <__pow5mult+0x84>
 800845e:	4631      	mov	r1, r6
 8008460:	4622      	mov	r2, r4
 8008462:	4638      	mov	r0, r7
 8008464:	f7ff ff22 	bl	80082ac <__multiply>
 8008468:	4631      	mov	r1, r6
 800846a:	4680      	mov	r8, r0
 800846c:	4638      	mov	r0, r7
 800846e:	f7ff fe53 	bl	8008118 <_Bfree>
 8008472:	4646      	mov	r6, r8
 8008474:	106d      	asrs	r5, r5, #1
 8008476:	d00b      	beq.n	8008490 <__pow5mult+0xa0>
 8008478:	6820      	ldr	r0, [r4, #0]
 800847a:	b938      	cbnz	r0, 800848c <__pow5mult+0x9c>
 800847c:	4622      	mov	r2, r4
 800847e:	4621      	mov	r1, r4
 8008480:	4638      	mov	r0, r7
 8008482:	f7ff ff13 	bl	80082ac <__multiply>
 8008486:	6020      	str	r0, [r4, #0]
 8008488:	f8c0 9000 	str.w	r9, [r0]
 800848c:	4604      	mov	r4, r0
 800848e:	e7e4      	b.n	800845a <__pow5mult+0x6a>
 8008490:	4630      	mov	r0, r6
 8008492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008496:	bf00      	nop
 8008498:	080094e8 	.word	0x080094e8
 800849c:	080093b5 	.word	0x080093b5
 80084a0:	08009435 	.word	0x08009435

080084a4 <__lshift>:
 80084a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a8:	460c      	mov	r4, r1
 80084aa:	6849      	ldr	r1, [r1, #4]
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084b2:	68a3      	ldr	r3, [r4, #8]
 80084b4:	4607      	mov	r7, r0
 80084b6:	4691      	mov	r9, r2
 80084b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084bc:	f108 0601 	add.w	r6, r8, #1
 80084c0:	42b3      	cmp	r3, r6
 80084c2:	db0b      	blt.n	80084dc <__lshift+0x38>
 80084c4:	4638      	mov	r0, r7
 80084c6:	f7ff fde7 	bl	8008098 <_Balloc>
 80084ca:	4605      	mov	r5, r0
 80084cc:	b948      	cbnz	r0, 80084e2 <__lshift+0x3e>
 80084ce:	4602      	mov	r2, r0
 80084d0:	4b28      	ldr	r3, [pc, #160]	@ (8008574 <__lshift+0xd0>)
 80084d2:	4829      	ldr	r0, [pc, #164]	@ (8008578 <__lshift+0xd4>)
 80084d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084d8:	f000 fb94 	bl	8008c04 <__assert_func>
 80084dc:	3101      	adds	r1, #1
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	e7ee      	b.n	80084c0 <__lshift+0x1c>
 80084e2:	2300      	movs	r3, #0
 80084e4:	f100 0114 	add.w	r1, r0, #20
 80084e8:	f100 0210 	add.w	r2, r0, #16
 80084ec:	4618      	mov	r0, r3
 80084ee:	4553      	cmp	r3, sl
 80084f0:	db33      	blt.n	800855a <__lshift+0xb6>
 80084f2:	6920      	ldr	r0, [r4, #16]
 80084f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084f8:	f104 0314 	add.w	r3, r4, #20
 80084fc:	f019 091f 	ands.w	r9, r9, #31
 8008500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008508:	d02b      	beq.n	8008562 <__lshift+0xbe>
 800850a:	f1c9 0e20 	rsb	lr, r9, #32
 800850e:	468a      	mov	sl, r1
 8008510:	2200      	movs	r2, #0
 8008512:	6818      	ldr	r0, [r3, #0]
 8008514:	fa00 f009 	lsl.w	r0, r0, r9
 8008518:	4310      	orrs	r0, r2
 800851a:	f84a 0b04 	str.w	r0, [sl], #4
 800851e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008522:	459c      	cmp	ip, r3
 8008524:	fa22 f20e 	lsr.w	r2, r2, lr
 8008528:	d8f3      	bhi.n	8008512 <__lshift+0x6e>
 800852a:	ebac 0304 	sub.w	r3, ip, r4
 800852e:	3b15      	subs	r3, #21
 8008530:	f023 0303 	bic.w	r3, r3, #3
 8008534:	3304      	adds	r3, #4
 8008536:	f104 0015 	add.w	r0, r4, #21
 800853a:	4560      	cmp	r0, ip
 800853c:	bf88      	it	hi
 800853e:	2304      	movhi	r3, #4
 8008540:	50ca      	str	r2, [r1, r3]
 8008542:	b10a      	cbz	r2, 8008548 <__lshift+0xa4>
 8008544:	f108 0602 	add.w	r6, r8, #2
 8008548:	3e01      	subs	r6, #1
 800854a:	4638      	mov	r0, r7
 800854c:	612e      	str	r6, [r5, #16]
 800854e:	4621      	mov	r1, r4
 8008550:	f7ff fde2 	bl	8008118 <_Bfree>
 8008554:	4628      	mov	r0, r5
 8008556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855a:	f842 0f04 	str.w	r0, [r2, #4]!
 800855e:	3301      	adds	r3, #1
 8008560:	e7c5      	b.n	80084ee <__lshift+0x4a>
 8008562:	3904      	subs	r1, #4
 8008564:	f853 2b04 	ldr.w	r2, [r3], #4
 8008568:	f841 2f04 	str.w	r2, [r1, #4]!
 800856c:	459c      	cmp	ip, r3
 800856e:	d8f9      	bhi.n	8008564 <__lshift+0xc0>
 8008570:	e7ea      	b.n	8008548 <__lshift+0xa4>
 8008572:	bf00      	nop
 8008574:	08009424 	.word	0x08009424
 8008578:	08009435 	.word	0x08009435

0800857c <__mcmp>:
 800857c:	690a      	ldr	r2, [r1, #16]
 800857e:	4603      	mov	r3, r0
 8008580:	6900      	ldr	r0, [r0, #16]
 8008582:	1a80      	subs	r0, r0, r2
 8008584:	b530      	push	{r4, r5, lr}
 8008586:	d10e      	bne.n	80085a6 <__mcmp+0x2a>
 8008588:	3314      	adds	r3, #20
 800858a:	3114      	adds	r1, #20
 800858c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008590:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800859c:	4295      	cmp	r5, r2
 800859e:	d003      	beq.n	80085a8 <__mcmp+0x2c>
 80085a0:	d205      	bcs.n	80085ae <__mcmp+0x32>
 80085a2:	f04f 30ff 	mov.w	r0, #4294967295
 80085a6:	bd30      	pop	{r4, r5, pc}
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	d3f3      	bcc.n	8008594 <__mcmp+0x18>
 80085ac:	e7fb      	b.n	80085a6 <__mcmp+0x2a>
 80085ae:	2001      	movs	r0, #1
 80085b0:	e7f9      	b.n	80085a6 <__mcmp+0x2a>
	...

080085b4 <__mdiff>:
 80085b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	4689      	mov	r9, r1
 80085ba:	4606      	mov	r6, r0
 80085bc:	4611      	mov	r1, r2
 80085be:	4648      	mov	r0, r9
 80085c0:	4614      	mov	r4, r2
 80085c2:	f7ff ffdb 	bl	800857c <__mcmp>
 80085c6:	1e05      	subs	r5, r0, #0
 80085c8:	d112      	bne.n	80085f0 <__mdiff+0x3c>
 80085ca:	4629      	mov	r1, r5
 80085cc:	4630      	mov	r0, r6
 80085ce:	f7ff fd63 	bl	8008098 <_Balloc>
 80085d2:	4602      	mov	r2, r0
 80085d4:	b928      	cbnz	r0, 80085e2 <__mdiff+0x2e>
 80085d6:	4b3f      	ldr	r3, [pc, #252]	@ (80086d4 <__mdiff+0x120>)
 80085d8:	f240 2137 	movw	r1, #567	@ 0x237
 80085dc:	483e      	ldr	r0, [pc, #248]	@ (80086d8 <__mdiff+0x124>)
 80085de:	f000 fb11 	bl	8008c04 <__assert_func>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085e8:	4610      	mov	r0, r2
 80085ea:	b003      	add	sp, #12
 80085ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f0:	bfbc      	itt	lt
 80085f2:	464b      	movlt	r3, r9
 80085f4:	46a1      	movlt	r9, r4
 80085f6:	4630      	mov	r0, r6
 80085f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085fc:	bfba      	itte	lt
 80085fe:	461c      	movlt	r4, r3
 8008600:	2501      	movlt	r5, #1
 8008602:	2500      	movge	r5, #0
 8008604:	f7ff fd48 	bl	8008098 <_Balloc>
 8008608:	4602      	mov	r2, r0
 800860a:	b918      	cbnz	r0, 8008614 <__mdiff+0x60>
 800860c:	4b31      	ldr	r3, [pc, #196]	@ (80086d4 <__mdiff+0x120>)
 800860e:	f240 2145 	movw	r1, #581	@ 0x245
 8008612:	e7e3      	b.n	80085dc <__mdiff+0x28>
 8008614:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008618:	6926      	ldr	r6, [r4, #16]
 800861a:	60c5      	str	r5, [r0, #12]
 800861c:	f109 0310 	add.w	r3, r9, #16
 8008620:	f109 0514 	add.w	r5, r9, #20
 8008624:	f104 0e14 	add.w	lr, r4, #20
 8008628:	f100 0b14 	add.w	fp, r0, #20
 800862c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008630:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	46d9      	mov	r9, fp
 8008638:	f04f 0c00 	mov.w	ip, #0
 800863c:	9b01      	ldr	r3, [sp, #4]
 800863e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008642:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	fa1f f38a 	uxth.w	r3, sl
 800864c:	4619      	mov	r1, r3
 800864e:	b283      	uxth	r3, r0
 8008650:	1acb      	subs	r3, r1, r3
 8008652:	0c00      	lsrs	r0, r0, #16
 8008654:	4463      	add	r3, ip
 8008656:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800865a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800865e:	b29b      	uxth	r3, r3
 8008660:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008664:	4576      	cmp	r6, lr
 8008666:	f849 3b04 	str.w	r3, [r9], #4
 800866a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800866e:	d8e5      	bhi.n	800863c <__mdiff+0x88>
 8008670:	1b33      	subs	r3, r6, r4
 8008672:	3b15      	subs	r3, #21
 8008674:	f023 0303 	bic.w	r3, r3, #3
 8008678:	3415      	adds	r4, #21
 800867a:	3304      	adds	r3, #4
 800867c:	42a6      	cmp	r6, r4
 800867e:	bf38      	it	cc
 8008680:	2304      	movcc	r3, #4
 8008682:	441d      	add	r5, r3
 8008684:	445b      	add	r3, fp
 8008686:	461e      	mov	r6, r3
 8008688:	462c      	mov	r4, r5
 800868a:	4544      	cmp	r4, r8
 800868c:	d30e      	bcc.n	80086ac <__mdiff+0xf8>
 800868e:	f108 0103 	add.w	r1, r8, #3
 8008692:	1b49      	subs	r1, r1, r5
 8008694:	f021 0103 	bic.w	r1, r1, #3
 8008698:	3d03      	subs	r5, #3
 800869a:	45a8      	cmp	r8, r5
 800869c:	bf38      	it	cc
 800869e:	2100      	movcc	r1, #0
 80086a0:	440b      	add	r3, r1
 80086a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086a6:	b191      	cbz	r1, 80086ce <__mdiff+0x11a>
 80086a8:	6117      	str	r7, [r2, #16]
 80086aa:	e79d      	b.n	80085e8 <__mdiff+0x34>
 80086ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80086b0:	46e6      	mov	lr, ip
 80086b2:	0c08      	lsrs	r0, r1, #16
 80086b4:	fa1c fc81 	uxtah	ip, ip, r1
 80086b8:	4471      	add	r1, lr
 80086ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80086be:	b289      	uxth	r1, r1
 80086c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80086c4:	f846 1b04 	str.w	r1, [r6], #4
 80086c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086cc:	e7dd      	b.n	800868a <__mdiff+0xd6>
 80086ce:	3f01      	subs	r7, #1
 80086d0:	e7e7      	b.n	80086a2 <__mdiff+0xee>
 80086d2:	bf00      	nop
 80086d4:	08009424 	.word	0x08009424
 80086d8:	08009435 	.word	0x08009435

080086dc <__d2b>:
 80086dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086e0:	460f      	mov	r7, r1
 80086e2:	2101      	movs	r1, #1
 80086e4:	ec59 8b10 	vmov	r8, r9, d0
 80086e8:	4616      	mov	r6, r2
 80086ea:	f7ff fcd5 	bl	8008098 <_Balloc>
 80086ee:	4604      	mov	r4, r0
 80086f0:	b930      	cbnz	r0, 8008700 <__d2b+0x24>
 80086f2:	4602      	mov	r2, r0
 80086f4:	4b23      	ldr	r3, [pc, #140]	@ (8008784 <__d2b+0xa8>)
 80086f6:	4824      	ldr	r0, [pc, #144]	@ (8008788 <__d2b+0xac>)
 80086f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80086fc:	f000 fa82 	bl	8008c04 <__assert_func>
 8008700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008708:	b10d      	cbz	r5, 800870e <__d2b+0x32>
 800870a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	f1b8 0300 	subs.w	r3, r8, #0
 8008714:	d023      	beq.n	800875e <__d2b+0x82>
 8008716:	4668      	mov	r0, sp
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	f7ff fd84 	bl	8008226 <__lo0bits>
 800871e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008722:	b1d0      	cbz	r0, 800875a <__d2b+0x7e>
 8008724:	f1c0 0320 	rsb	r3, r0, #32
 8008728:	fa02 f303 	lsl.w	r3, r2, r3
 800872c:	430b      	orrs	r3, r1
 800872e:	40c2      	lsrs	r2, r0
 8008730:	6163      	str	r3, [r4, #20]
 8008732:	9201      	str	r2, [sp, #4]
 8008734:	9b01      	ldr	r3, [sp, #4]
 8008736:	61a3      	str	r3, [r4, #24]
 8008738:	2b00      	cmp	r3, #0
 800873a:	bf0c      	ite	eq
 800873c:	2201      	moveq	r2, #1
 800873e:	2202      	movne	r2, #2
 8008740:	6122      	str	r2, [r4, #16]
 8008742:	b1a5      	cbz	r5, 800876e <__d2b+0x92>
 8008744:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008748:	4405      	add	r5, r0
 800874a:	603d      	str	r5, [r7, #0]
 800874c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008750:	6030      	str	r0, [r6, #0]
 8008752:	4620      	mov	r0, r4
 8008754:	b003      	add	sp, #12
 8008756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800875a:	6161      	str	r1, [r4, #20]
 800875c:	e7ea      	b.n	8008734 <__d2b+0x58>
 800875e:	a801      	add	r0, sp, #4
 8008760:	f7ff fd61 	bl	8008226 <__lo0bits>
 8008764:	9b01      	ldr	r3, [sp, #4]
 8008766:	6163      	str	r3, [r4, #20]
 8008768:	3020      	adds	r0, #32
 800876a:	2201      	movs	r2, #1
 800876c:	e7e8      	b.n	8008740 <__d2b+0x64>
 800876e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008772:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008776:	6038      	str	r0, [r7, #0]
 8008778:	6918      	ldr	r0, [r3, #16]
 800877a:	f7ff fd35 	bl	80081e8 <__hi0bits>
 800877e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008782:	e7e5      	b.n	8008750 <__d2b+0x74>
 8008784:	08009424 	.word	0x08009424
 8008788:	08009435 	.word	0x08009435

0800878c <__ssputs_r>:
 800878c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008790:	688e      	ldr	r6, [r1, #8]
 8008792:	461f      	mov	r7, r3
 8008794:	42be      	cmp	r6, r7
 8008796:	680b      	ldr	r3, [r1, #0]
 8008798:	4682      	mov	sl, r0
 800879a:	460c      	mov	r4, r1
 800879c:	4690      	mov	r8, r2
 800879e:	d82d      	bhi.n	80087fc <__ssputs_r+0x70>
 80087a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087a8:	d026      	beq.n	80087f8 <__ssputs_r+0x6c>
 80087aa:	6965      	ldr	r5, [r4, #20]
 80087ac:	6909      	ldr	r1, [r1, #16]
 80087ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087b2:	eba3 0901 	sub.w	r9, r3, r1
 80087b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087ba:	1c7b      	adds	r3, r7, #1
 80087bc:	444b      	add	r3, r9
 80087be:	106d      	asrs	r5, r5, #1
 80087c0:	429d      	cmp	r5, r3
 80087c2:	bf38      	it	cc
 80087c4:	461d      	movcc	r5, r3
 80087c6:	0553      	lsls	r3, r2, #21
 80087c8:	d527      	bpl.n	800881a <__ssputs_r+0x8e>
 80087ca:	4629      	mov	r1, r5
 80087cc:	f7ff fbd8 	bl	8007f80 <_malloc_r>
 80087d0:	4606      	mov	r6, r0
 80087d2:	b360      	cbz	r0, 800882e <__ssputs_r+0xa2>
 80087d4:	6921      	ldr	r1, [r4, #16]
 80087d6:	464a      	mov	r2, r9
 80087d8:	f000 fa06 	bl	8008be8 <memcpy>
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	6126      	str	r6, [r4, #16]
 80087ea:	6165      	str	r5, [r4, #20]
 80087ec:	444e      	add	r6, r9
 80087ee:	eba5 0509 	sub.w	r5, r5, r9
 80087f2:	6026      	str	r6, [r4, #0]
 80087f4:	60a5      	str	r5, [r4, #8]
 80087f6:	463e      	mov	r6, r7
 80087f8:	42be      	cmp	r6, r7
 80087fa:	d900      	bls.n	80087fe <__ssputs_r+0x72>
 80087fc:	463e      	mov	r6, r7
 80087fe:	6820      	ldr	r0, [r4, #0]
 8008800:	4632      	mov	r2, r6
 8008802:	4641      	mov	r1, r8
 8008804:	f000 f9c6 	bl	8008b94 <memmove>
 8008808:	68a3      	ldr	r3, [r4, #8]
 800880a:	1b9b      	subs	r3, r3, r6
 800880c:	60a3      	str	r3, [r4, #8]
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	4433      	add	r3, r6
 8008812:	6023      	str	r3, [r4, #0]
 8008814:	2000      	movs	r0, #0
 8008816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881a:	462a      	mov	r2, r5
 800881c:	f000 fa36 	bl	8008c8c <_realloc_r>
 8008820:	4606      	mov	r6, r0
 8008822:	2800      	cmp	r0, #0
 8008824:	d1e0      	bne.n	80087e8 <__ssputs_r+0x5c>
 8008826:	6921      	ldr	r1, [r4, #16]
 8008828:	4650      	mov	r0, sl
 800882a:	f7ff fb35 	bl	8007e98 <_free_r>
 800882e:	230c      	movs	r3, #12
 8008830:	f8ca 3000 	str.w	r3, [sl]
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	e7e9      	b.n	8008816 <__ssputs_r+0x8a>
	...

08008844 <_svfiprintf_r>:
 8008844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	4698      	mov	r8, r3
 800884a:	898b      	ldrh	r3, [r1, #12]
 800884c:	061b      	lsls	r3, r3, #24
 800884e:	b09d      	sub	sp, #116	@ 0x74
 8008850:	4607      	mov	r7, r0
 8008852:	460d      	mov	r5, r1
 8008854:	4614      	mov	r4, r2
 8008856:	d510      	bpl.n	800887a <_svfiprintf_r+0x36>
 8008858:	690b      	ldr	r3, [r1, #16]
 800885a:	b973      	cbnz	r3, 800887a <_svfiprintf_r+0x36>
 800885c:	2140      	movs	r1, #64	@ 0x40
 800885e:	f7ff fb8f 	bl	8007f80 <_malloc_r>
 8008862:	6028      	str	r0, [r5, #0]
 8008864:	6128      	str	r0, [r5, #16]
 8008866:	b930      	cbnz	r0, 8008876 <_svfiprintf_r+0x32>
 8008868:	230c      	movs	r3, #12
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	b01d      	add	sp, #116	@ 0x74
 8008872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008876:	2340      	movs	r3, #64	@ 0x40
 8008878:	616b      	str	r3, [r5, #20]
 800887a:	2300      	movs	r3, #0
 800887c:	9309      	str	r3, [sp, #36]	@ 0x24
 800887e:	2320      	movs	r3, #32
 8008880:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008884:	f8cd 800c 	str.w	r8, [sp, #12]
 8008888:	2330      	movs	r3, #48	@ 0x30
 800888a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a28 <_svfiprintf_r+0x1e4>
 800888e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008892:	f04f 0901 	mov.w	r9, #1
 8008896:	4623      	mov	r3, r4
 8008898:	469a      	mov	sl, r3
 800889a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800889e:	b10a      	cbz	r2, 80088a4 <_svfiprintf_r+0x60>
 80088a0:	2a25      	cmp	r2, #37	@ 0x25
 80088a2:	d1f9      	bne.n	8008898 <_svfiprintf_r+0x54>
 80088a4:	ebba 0b04 	subs.w	fp, sl, r4
 80088a8:	d00b      	beq.n	80088c2 <_svfiprintf_r+0x7e>
 80088aa:	465b      	mov	r3, fp
 80088ac:	4622      	mov	r2, r4
 80088ae:	4629      	mov	r1, r5
 80088b0:	4638      	mov	r0, r7
 80088b2:	f7ff ff6b 	bl	800878c <__ssputs_r>
 80088b6:	3001      	adds	r0, #1
 80088b8:	f000 80a7 	beq.w	8008a0a <_svfiprintf_r+0x1c6>
 80088bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088be:	445a      	add	r2, fp
 80088c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80088c2:	f89a 3000 	ldrb.w	r3, [sl]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 809f 	beq.w	8008a0a <_svfiprintf_r+0x1c6>
 80088cc:	2300      	movs	r3, #0
 80088ce:	f04f 32ff 	mov.w	r2, #4294967295
 80088d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088d6:	f10a 0a01 	add.w	sl, sl, #1
 80088da:	9304      	str	r3, [sp, #16]
 80088dc:	9307      	str	r3, [sp, #28]
 80088de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80088e4:	4654      	mov	r4, sl
 80088e6:	2205      	movs	r2, #5
 80088e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ec:	484e      	ldr	r0, [pc, #312]	@ (8008a28 <_svfiprintf_r+0x1e4>)
 80088ee:	f7f7 fc6f 	bl	80001d0 <memchr>
 80088f2:	9a04      	ldr	r2, [sp, #16]
 80088f4:	b9d8      	cbnz	r0, 800892e <_svfiprintf_r+0xea>
 80088f6:	06d0      	lsls	r0, r2, #27
 80088f8:	bf44      	itt	mi
 80088fa:	2320      	movmi	r3, #32
 80088fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008900:	0711      	lsls	r1, r2, #28
 8008902:	bf44      	itt	mi
 8008904:	232b      	movmi	r3, #43	@ 0x2b
 8008906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800890a:	f89a 3000 	ldrb.w	r3, [sl]
 800890e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008910:	d015      	beq.n	800893e <_svfiprintf_r+0xfa>
 8008912:	9a07      	ldr	r2, [sp, #28]
 8008914:	4654      	mov	r4, sl
 8008916:	2000      	movs	r0, #0
 8008918:	f04f 0c0a 	mov.w	ip, #10
 800891c:	4621      	mov	r1, r4
 800891e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008922:	3b30      	subs	r3, #48	@ 0x30
 8008924:	2b09      	cmp	r3, #9
 8008926:	d94b      	bls.n	80089c0 <_svfiprintf_r+0x17c>
 8008928:	b1b0      	cbz	r0, 8008958 <_svfiprintf_r+0x114>
 800892a:	9207      	str	r2, [sp, #28]
 800892c:	e014      	b.n	8008958 <_svfiprintf_r+0x114>
 800892e:	eba0 0308 	sub.w	r3, r0, r8
 8008932:	fa09 f303 	lsl.w	r3, r9, r3
 8008936:	4313      	orrs	r3, r2
 8008938:	9304      	str	r3, [sp, #16]
 800893a:	46a2      	mov	sl, r4
 800893c:	e7d2      	b.n	80088e4 <_svfiprintf_r+0xa0>
 800893e:	9b03      	ldr	r3, [sp, #12]
 8008940:	1d19      	adds	r1, r3, #4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	9103      	str	r1, [sp, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	bfbb      	ittet	lt
 800894a:	425b      	neglt	r3, r3
 800894c:	f042 0202 	orrlt.w	r2, r2, #2
 8008950:	9307      	strge	r3, [sp, #28]
 8008952:	9307      	strlt	r3, [sp, #28]
 8008954:	bfb8      	it	lt
 8008956:	9204      	strlt	r2, [sp, #16]
 8008958:	7823      	ldrb	r3, [r4, #0]
 800895a:	2b2e      	cmp	r3, #46	@ 0x2e
 800895c:	d10a      	bne.n	8008974 <_svfiprintf_r+0x130>
 800895e:	7863      	ldrb	r3, [r4, #1]
 8008960:	2b2a      	cmp	r3, #42	@ 0x2a
 8008962:	d132      	bne.n	80089ca <_svfiprintf_r+0x186>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	1d1a      	adds	r2, r3, #4
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	9203      	str	r2, [sp, #12]
 800896c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008970:	3402      	adds	r4, #2
 8008972:	9305      	str	r3, [sp, #20]
 8008974:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a38 <_svfiprintf_r+0x1f4>
 8008978:	7821      	ldrb	r1, [r4, #0]
 800897a:	2203      	movs	r2, #3
 800897c:	4650      	mov	r0, sl
 800897e:	f7f7 fc27 	bl	80001d0 <memchr>
 8008982:	b138      	cbz	r0, 8008994 <_svfiprintf_r+0x150>
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	eba0 000a 	sub.w	r0, r0, sl
 800898a:	2240      	movs	r2, #64	@ 0x40
 800898c:	4082      	lsls	r2, r0
 800898e:	4313      	orrs	r3, r2
 8008990:	3401      	adds	r4, #1
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008998:	4824      	ldr	r0, [pc, #144]	@ (8008a2c <_svfiprintf_r+0x1e8>)
 800899a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800899e:	2206      	movs	r2, #6
 80089a0:	f7f7 fc16 	bl	80001d0 <memchr>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d036      	beq.n	8008a16 <_svfiprintf_r+0x1d2>
 80089a8:	4b21      	ldr	r3, [pc, #132]	@ (8008a30 <_svfiprintf_r+0x1ec>)
 80089aa:	bb1b      	cbnz	r3, 80089f4 <_svfiprintf_r+0x1b0>
 80089ac:	9b03      	ldr	r3, [sp, #12]
 80089ae:	3307      	adds	r3, #7
 80089b0:	f023 0307 	bic.w	r3, r3, #7
 80089b4:	3308      	adds	r3, #8
 80089b6:	9303      	str	r3, [sp, #12]
 80089b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ba:	4433      	add	r3, r6
 80089bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80089be:	e76a      	b.n	8008896 <_svfiprintf_r+0x52>
 80089c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089c4:	460c      	mov	r4, r1
 80089c6:	2001      	movs	r0, #1
 80089c8:	e7a8      	b.n	800891c <_svfiprintf_r+0xd8>
 80089ca:	2300      	movs	r3, #0
 80089cc:	3401      	adds	r4, #1
 80089ce:	9305      	str	r3, [sp, #20]
 80089d0:	4619      	mov	r1, r3
 80089d2:	f04f 0c0a 	mov.w	ip, #10
 80089d6:	4620      	mov	r0, r4
 80089d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089dc:	3a30      	subs	r2, #48	@ 0x30
 80089de:	2a09      	cmp	r2, #9
 80089e0:	d903      	bls.n	80089ea <_svfiprintf_r+0x1a6>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0c6      	beq.n	8008974 <_svfiprintf_r+0x130>
 80089e6:	9105      	str	r1, [sp, #20]
 80089e8:	e7c4      	b.n	8008974 <_svfiprintf_r+0x130>
 80089ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ee:	4604      	mov	r4, r0
 80089f0:	2301      	movs	r3, #1
 80089f2:	e7f0      	b.n	80089d6 <_svfiprintf_r+0x192>
 80089f4:	ab03      	add	r3, sp, #12
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	462a      	mov	r2, r5
 80089fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008a34 <_svfiprintf_r+0x1f0>)
 80089fc:	a904      	add	r1, sp, #16
 80089fe:	4638      	mov	r0, r7
 8008a00:	f7fd fe7e 	bl	8006700 <_printf_float>
 8008a04:	1c42      	adds	r2, r0, #1
 8008a06:	4606      	mov	r6, r0
 8008a08:	d1d6      	bne.n	80089b8 <_svfiprintf_r+0x174>
 8008a0a:	89ab      	ldrh	r3, [r5, #12]
 8008a0c:	065b      	lsls	r3, r3, #25
 8008a0e:	f53f af2d 	bmi.w	800886c <_svfiprintf_r+0x28>
 8008a12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a14:	e72c      	b.n	8008870 <_svfiprintf_r+0x2c>
 8008a16:	ab03      	add	r3, sp, #12
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	4b05      	ldr	r3, [pc, #20]	@ (8008a34 <_svfiprintf_r+0x1f0>)
 8008a1e:	a904      	add	r1, sp, #16
 8008a20:	4638      	mov	r0, r7
 8008a22:	f7fe f905 	bl	8006c30 <_printf_i>
 8008a26:	e7ed      	b.n	8008a04 <_svfiprintf_r+0x1c0>
 8008a28:	0800948e 	.word	0x0800948e
 8008a2c:	08009498 	.word	0x08009498
 8008a30:	08006701 	.word	0x08006701
 8008a34:	0800878d 	.word	0x0800878d
 8008a38:	08009494 	.word	0x08009494

08008a3c <__sflush_r>:
 8008a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a44:	0716      	lsls	r6, r2, #28
 8008a46:	4605      	mov	r5, r0
 8008a48:	460c      	mov	r4, r1
 8008a4a:	d454      	bmi.n	8008af6 <__sflush_r+0xba>
 8008a4c:	684b      	ldr	r3, [r1, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	dc02      	bgt.n	8008a58 <__sflush_r+0x1c>
 8008a52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dd48      	ble.n	8008aea <__sflush_r+0xae>
 8008a58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a5a:	2e00      	cmp	r6, #0
 8008a5c:	d045      	beq.n	8008aea <__sflush_r+0xae>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a64:	682f      	ldr	r7, [r5, #0]
 8008a66:	6a21      	ldr	r1, [r4, #32]
 8008a68:	602b      	str	r3, [r5, #0]
 8008a6a:	d030      	beq.n	8008ace <__sflush_r+0x92>
 8008a6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	0759      	lsls	r1, r3, #29
 8008a72:	d505      	bpl.n	8008a80 <__sflush_r+0x44>
 8008a74:	6863      	ldr	r3, [r4, #4]
 8008a76:	1ad2      	subs	r2, r2, r3
 8008a78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a7a:	b10b      	cbz	r3, 8008a80 <__sflush_r+0x44>
 8008a7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a7e:	1ad2      	subs	r2, r2, r3
 8008a80:	2300      	movs	r3, #0
 8008a82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a84:	6a21      	ldr	r1, [r4, #32]
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b0      	blx	r6
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	d106      	bne.n	8008a9e <__sflush_r+0x62>
 8008a90:	6829      	ldr	r1, [r5, #0]
 8008a92:	291d      	cmp	r1, #29
 8008a94:	d82b      	bhi.n	8008aee <__sflush_r+0xb2>
 8008a96:	4a2a      	ldr	r2, [pc, #168]	@ (8008b40 <__sflush_r+0x104>)
 8008a98:	40ca      	lsrs	r2, r1
 8008a9a:	07d6      	lsls	r6, r2, #31
 8008a9c:	d527      	bpl.n	8008aee <__sflush_r+0xb2>
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	6062      	str	r2, [r4, #4]
 8008aa2:	04d9      	lsls	r1, r3, #19
 8008aa4:	6922      	ldr	r2, [r4, #16]
 8008aa6:	6022      	str	r2, [r4, #0]
 8008aa8:	d504      	bpl.n	8008ab4 <__sflush_r+0x78>
 8008aaa:	1c42      	adds	r2, r0, #1
 8008aac:	d101      	bne.n	8008ab2 <__sflush_r+0x76>
 8008aae:	682b      	ldr	r3, [r5, #0]
 8008ab0:	b903      	cbnz	r3, 8008ab4 <__sflush_r+0x78>
 8008ab2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ab6:	602f      	str	r7, [r5, #0]
 8008ab8:	b1b9      	cbz	r1, 8008aea <__sflush_r+0xae>
 8008aba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008abe:	4299      	cmp	r1, r3
 8008ac0:	d002      	beq.n	8008ac8 <__sflush_r+0x8c>
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f7ff f9e8 	bl	8007e98 <_free_r>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	6363      	str	r3, [r4, #52]	@ 0x34
 8008acc:	e00d      	b.n	8008aea <__sflush_r+0xae>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	47b0      	blx	r6
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	1c50      	adds	r0, r2, #1
 8008ad8:	d1c9      	bne.n	8008a6e <__sflush_r+0x32>
 8008ada:	682b      	ldr	r3, [r5, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d0c6      	beq.n	8008a6e <__sflush_r+0x32>
 8008ae0:	2b1d      	cmp	r3, #29
 8008ae2:	d001      	beq.n	8008ae8 <__sflush_r+0xac>
 8008ae4:	2b16      	cmp	r3, #22
 8008ae6:	d11e      	bne.n	8008b26 <__sflush_r+0xea>
 8008ae8:	602f      	str	r7, [r5, #0]
 8008aea:	2000      	movs	r0, #0
 8008aec:	e022      	b.n	8008b34 <__sflush_r+0xf8>
 8008aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008af2:	b21b      	sxth	r3, r3
 8008af4:	e01b      	b.n	8008b2e <__sflush_r+0xf2>
 8008af6:	690f      	ldr	r7, [r1, #16]
 8008af8:	2f00      	cmp	r7, #0
 8008afa:	d0f6      	beq.n	8008aea <__sflush_r+0xae>
 8008afc:	0793      	lsls	r3, r2, #30
 8008afe:	680e      	ldr	r6, [r1, #0]
 8008b00:	bf08      	it	eq
 8008b02:	694b      	ldreq	r3, [r1, #20]
 8008b04:	600f      	str	r7, [r1, #0]
 8008b06:	bf18      	it	ne
 8008b08:	2300      	movne	r3, #0
 8008b0a:	eba6 0807 	sub.w	r8, r6, r7
 8008b0e:	608b      	str	r3, [r1, #8]
 8008b10:	f1b8 0f00 	cmp.w	r8, #0
 8008b14:	dde9      	ble.n	8008aea <__sflush_r+0xae>
 8008b16:	6a21      	ldr	r1, [r4, #32]
 8008b18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b1a:	4643      	mov	r3, r8
 8008b1c:	463a      	mov	r2, r7
 8008b1e:	4628      	mov	r0, r5
 8008b20:	47b0      	blx	r6
 8008b22:	2800      	cmp	r0, #0
 8008b24:	dc08      	bgt.n	8008b38 <__sflush_r+0xfc>
 8008b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b38:	4407      	add	r7, r0
 8008b3a:	eba8 0800 	sub.w	r8, r8, r0
 8008b3e:	e7e7      	b.n	8008b10 <__sflush_r+0xd4>
 8008b40:	20400001 	.word	0x20400001

08008b44 <_fflush_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	690b      	ldr	r3, [r1, #16]
 8008b48:	4605      	mov	r5, r0
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	b913      	cbnz	r3, 8008b54 <_fflush_r+0x10>
 8008b4e:	2500      	movs	r5, #0
 8008b50:	4628      	mov	r0, r5
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	b118      	cbz	r0, 8008b5e <_fflush_r+0x1a>
 8008b56:	6a03      	ldr	r3, [r0, #32]
 8008b58:	b90b      	cbnz	r3, 8008b5e <_fflush_r+0x1a>
 8008b5a:	f7fe fa13 	bl	8006f84 <__sinit>
 8008b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0f3      	beq.n	8008b4e <_fflush_r+0xa>
 8008b66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b68:	07d0      	lsls	r0, r2, #31
 8008b6a:	d404      	bmi.n	8008b76 <_fflush_r+0x32>
 8008b6c:	0599      	lsls	r1, r3, #22
 8008b6e:	d402      	bmi.n	8008b76 <_fflush_r+0x32>
 8008b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b72:	f7fe fb34 	bl	80071de <__retarget_lock_acquire_recursive>
 8008b76:	4628      	mov	r0, r5
 8008b78:	4621      	mov	r1, r4
 8008b7a:	f7ff ff5f 	bl	8008a3c <__sflush_r>
 8008b7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b80:	07da      	lsls	r2, r3, #31
 8008b82:	4605      	mov	r5, r0
 8008b84:	d4e4      	bmi.n	8008b50 <_fflush_r+0xc>
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	059b      	lsls	r3, r3, #22
 8008b8a:	d4e1      	bmi.n	8008b50 <_fflush_r+0xc>
 8008b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b8e:	f7fe fb27 	bl	80071e0 <__retarget_lock_release_recursive>
 8008b92:	e7dd      	b.n	8008b50 <_fflush_r+0xc>

08008b94 <memmove>:
 8008b94:	4288      	cmp	r0, r1
 8008b96:	b510      	push	{r4, lr}
 8008b98:	eb01 0402 	add.w	r4, r1, r2
 8008b9c:	d902      	bls.n	8008ba4 <memmove+0x10>
 8008b9e:	4284      	cmp	r4, r0
 8008ba0:	4623      	mov	r3, r4
 8008ba2:	d807      	bhi.n	8008bb4 <memmove+0x20>
 8008ba4:	1e43      	subs	r3, r0, #1
 8008ba6:	42a1      	cmp	r1, r4
 8008ba8:	d008      	beq.n	8008bbc <memmove+0x28>
 8008baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bb2:	e7f8      	b.n	8008ba6 <memmove+0x12>
 8008bb4:	4402      	add	r2, r0
 8008bb6:	4601      	mov	r1, r0
 8008bb8:	428a      	cmp	r2, r1
 8008bba:	d100      	bne.n	8008bbe <memmove+0x2a>
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bc6:	e7f7      	b.n	8008bb8 <memmove+0x24>

08008bc8 <_sbrk_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d06      	ldr	r5, [pc, #24]	@ (8008be4 <_sbrk_r+0x1c>)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	f7f8 fea2 	bl	800191c <_sbrk>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d102      	bne.n	8008be2 <_sbrk_r+0x1a>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b103      	cbz	r3, 8008be2 <_sbrk_r+0x1a>
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	200033d8 	.word	0x200033d8

08008be8 <memcpy>:
 8008be8:	440a      	add	r2, r1
 8008bea:	4291      	cmp	r1, r2
 8008bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bf0:	d100      	bne.n	8008bf4 <memcpy+0xc>
 8008bf2:	4770      	bx	lr
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bfe:	4291      	cmp	r1, r2
 8008c00:	d1f9      	bne.n	8008bf6 <memcpy+0xe>
 8008c02:	bd10      	pop	{r4, pc}

08008c04 <__assert_func>:
 8008c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c06:	4614      	mov	r4, r2
 8008c08:	461a      	mov	r2, r3
 8008c0a:	4b09      	ldr	r3, [pc, #36]	@ (8008c30 <__assert_func+0x2c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4605      	mov	r5, r0
 8008c10:	68d8      	ldr	r0, [r3, #12]
 8008c12:	b14c      	cbz	r4, 8008c28 <__assert_func+0x24>
 8008c14:	4b07      	ldr	r3, [pc, #28]	@ (8008c34 <__assert_func+0x30>)
 8008c16:	9100      	str	r1, [sp, #0]
 8008c18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c1c:	4906      	ldr	r1, [pc, #24]	@ (8008c38 <__assert_func+0x34>)
 8008c1e:	462b      	mov	r3, r5
 8008c20:	f000 f870 	bl	8008d04 <fiprintf>
 8008c24:	f000 f880 	bl	8008d28 <abort>
 8008c28:	4b04      	ldr	r3, [pc, #16]	@ (8008c3c <__assert_func+0x38>)
 8008c2a:	461c      	mov	r4, r3
 8008c2c:	e7f3      	b.n	8008c16 <__assert_func+0x12>
 8008c2e:	bf00      	nop
 8008c30:	20000018 	.word	0x20000018
 8008c34:	080094a9 	.word	0x080094a9
 8008c38:	080094b6 	.word	0x080094b6
 8008c3c:	080094e4 	.word	0x080094e4

08008c40 <_calloc_r>:
 8008c40:	b570      	push	{r4, r5, r6, lr}
 8008c42:	fba1 5402 	umull	r5, r4, r1, r2
 8008c46:	b934      	cbnz	r4, 8008c56 <_calloc_r+0x16>
 8008c48:	4629      	mov	r1, r5
 8008c4a:	f7ff f999 	bl	8007f80 <_malloc_r>
 8008c4e:	4606      	mov	r6, r0
 8008c50:	b928      	cbnz	r0, 8008c5e <_calloc_r+0x1e>
 8008c52:	4630      	mov	r0, r6
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
 8008c56:	220c      	movs	r2, #12
 8008c58:	6002      	str	r2, [r0, #0]
 8008c5a:	2600      	movs	r6, #0
 8008c5c:	e7f9      	b.n	8008c52 <_calloc_r+0x12>
 8008c5e:	462a      	mov	r2, r5
 8008c60:	4621      	mov	r1, r4
 8008c62:	f7fe fa3e 	bl	80070e2 <memset>
 8008c66:	e7f4      	b.n	8008c52 <_calloc_r+0x12>

08008c68 <__ascii_mbtowc>:
 8008c68:	b082      	sub	sp, #8
 8008c6a:	b901      	cbnz	r1, 8008c6e <__ascii_mbtowc+0x6>
 8008c6c:	a901      	add	r1, sp, #4
 8008c6e:	b142      	cbz	r2, 8008c82 <__ascii_mbtowc+0x1a>
 8008c70:	b14b      	cbz	r3, 8008c86 <__ascii_mbtowc+0x1e>
 8008c72:	7813      	ldrb	r3, [r2, #0]
 8008c74:	600b      	str	r3, [r1, #0]
 8008c76:	7812      	ldrb	r2, [r2, #0]
 8008c78:	1e10      	subs	r0, r2, #0
 8008c7a:	bf18      	it	ne
 8008c7c:	2001      	movne	r0, #1
 8008c7e:	b002      	add	sp, #8
 8008c80:	4770      	bx	lr
 8008c82:	4610      	mov	r0, r2
 8008c84:	e7fb      	b.n	8008c7e <__ascii_mbtowc+0x16>
 8008c86:	f06f 0001 	mvn.w	r0, #1
 8008c8a:	e7f8      	b.n	8008c7e <__ascii_mbtowc+0x16>

08008c8c <_realloc_r>:
 8008c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c90:	4607      	mov	r7, r0
 8008c92:	4614      	mov	r4, r2
 8008c94:	460d      	mov	r5, r1
 8008c96:	b921      	cbnz	r1, 8008ca2 <_realloc_r+0x16>
 8008c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	f7ff b96f 	b.w	8007f80 <_malloc_r>
 8008ca2:	b92a      	cbnz	r2, 8008cb0 <_realloc_r+0x24>
 8008ca4:	f7ff f8f8 	bl	8007e98 <_free_r>
 8008ca8:	4625      	mov	r5, r4
 8008caa:	4628      	mov	r0, r5
 8008cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb0:	f000 f841 	bl	8008d36 <_malloc_usable_size_r>
 8008cb4:	4284      	cmp	r4, r0
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	d802      	bhi.n	8008cc0 <_realloc_r+0x34>
 8008cba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cbe:	d8f4      	bhi.n	8008caa <_realloc_r+0x1e>
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	f7ff f95c 	bl	8007f80 <_malloc_r>
 8008cc8:	4680      	mov	r8, r0
 8008cca:	b908      	cbnz	r0, 8008cd0 <_realloc_r+0x44>
 8008ccc:	4645      	mov	r5, r8
 8008cce:	e7ec      	b.n	8008caa <_realloc_r+0x1e>
 8008cd0:	42b4      	cmp	r4, r6
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	bf28      	it	cs
 8008cd8:	4632      	movcs	r2, r6
 8008cda:	f7ff ff85 	bl	8008be8 <memcpy>
 8008cde:	4629      	mov	r1, r5
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	f7ff f8d9 	bl	8007e98 <_free_r>
 8008ce6:	e7f1      	b.n	8008ccc <_realloc_r+0x40>

08008ce8 <__ascii_wctomb>:
 8008ce8:	4603      	mov	r3, r0
 8008cea:	4608      	mov	r0, r1
 8008cec:	b141      	cbz	r1, 8008d00 <__ascii_wctomb+0x18>
 8008cee:	2aff      	cmp	r2, #255	@ 0xff
 8008cf0:	d904      	bls.n	8008cfc <__ascii_wctomb+0x14>
 8008cf2:	228a      	movs	r2, #138	@ 0x8a
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfa:	4770      	bx	lr
 8008cfc:	700a      	strb	r2, [r1, #0]
 8008cfe:	2001      	movs	r0, #1
 8008d00:	4770      	bx	lr
	...

08008d04 <fiprintf>:
 8008d04:	b40e      	push	{r1, r2, r3}
 8008d06:	b503      	push	{r0, r1, lr}
 8008d08:	4601      	mov	r1, r0
 8008d0a:	ab03      	add	r3, sp, #12
 8008d0c:	4805      	ldr	r0, [pc, #20]	@ (8008d24 <fiprintf+0x20>)
 8008d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d12:	6800      	ldr	r0, [r0, #0]
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	f000 f83f 	bl	8008d98 <_vfiprintf_r>
 8008d1a:	b002      	add	sp, #8
 8008d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d20:	b003      	add	sp, #12
 8008d22:	4770      	bx	lr
 8008d24:	20000018 	.word	0x20000018

08008d28 <abort>:
 8008d28:	b508      	push	{r3, lr}
 8008d2a:	2006      	movs	r0, #6
 8008d2c:	f000 fa08 	bl	8009140 <raise>
 8008d30:	2001      	movs	r0, #1
 8008d32:	f7f8 fd7b 	bl	800182c <_exit>

08008d36 <_malloc_usable_size_r>:
 8008d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d3a:	1f18      	subs	r0, r3, #4
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	bfbc      	itt	lt
 8008d40:	580b      	ldrlt	r3, [r1, r0]
 8008d42:	18c0      	addlt	r0, r0, r3
 8008d44:	4770      	bx	lr

08008d46 <__sfputc_r>:
 8008d46:	6893      	ldr	r3, [r2, #8]
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	b410      	push	{r4}
 8008d4e:	6093      	str	r3, [r2, #8]
 8008d50:	da08      	bge.n	8008d64 <__sfputc_r+0x1e>
 8008d52:	6994      	ldr	r4, [r2, #24]
 8008d54:	42a3      	cmp	r3, r4
 8008d56:	db01      	blt.n	8008d5c <__sfputc_r+0x16>
 8008d58:	290a      	cmp	r1, #10
 8008d5a:	d103      	bne.n	8008d64 <__sfputc_r+0x1e>
 8008d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d60:	f000 b932 	b.w	8008fc8 <__swbuf_r>
 8008d64:	6813      	ldr	r3, [r2, #0]
 8008d66:	1c58      	adds	r0, r3, #1
 8008d68:	6010      	str	r0, [r2, #0]
 8008d6a:	7019      	strb	r1, [r3, #0]
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <__sfputs_r>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	4606      	mov	r6, r0
 8008d78:	460f      	mov	r7, r1
 8008d7a:	4614      	mov	r4, r2
 8008d7c:	18d5      	adds	r5, r2, r3
 8008d7e:	42ac      	cmp	r4, r5
 8008d80:	d101      	bne.n	8008d86 <__sfputs_r+0x12>
 8008d82:	2000      	movs	r0, #0
 8008d84:	e007      	b.n	8008d96 <__sfputs_r+0x22>
 8008d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8a:	463a      	mov	r2, r7
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f7ff ffda 	bl	8008d46 <__sfputc_r>
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	d1f3      	bne.n	8008d7e <__sfputs_r+0xa>
 8008d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d98 <_vfiprintf_r>:
 8008d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9c:	460d      	mov	r5, r1
 8008d9e:	b09d      	sub	sp, #116	@ 0x74
 8008da0:	4614      	mov	r4, r2
 8008da2:	4698      	mov	r8, r3
 8008da4:	4606      	mov	r6, r0
 8008da6:	b118      	cbz	r0, 8008db0 <_vfiprintf_r+0x18>
 8008da8:	6a03      	ldr	r3, [r0, #32]
 8008daa:	b90b      	cbnz	r3, 8008db0 <_vfiprintf_r+0x18>
 8008dac:	f7fe f8ea 	bl	8006f84 <__sinit>
 8008db0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008db2:	07d9      	lsls	r1, r3, #31
 8008db4:	d405      	bmi.n	8008dc2 <_vfiprintf_r+0x2a>
 8008db6:	89ab      	ldrh	r3, [r5, #12]
 8008db8:	059a      	lsls	r2, r3, #22
 8008dba:	d402      	bmi.n	8008dc2 <_vfiprintf_r+0x2a>
 8008dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dbe:	f7fe fa0e 	bl	80071de <__retarget_lock_acquire_recursive>
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	071b      	lsls	r3, r3, #28
 8008dc6:	d501      	bpl.n	8008dcc <_vfiprintf_r+0x34>
 8008dc8:	692b      	ldr	r3, [r5, #16]
 8008dca:	b99b      	cbnz	r3, 8008df4 <_vfiprintf_r+0x5c>
 8008dcc:	4629      	mov	r1, r5
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f000 f938 	bl	8009044 <__swsetup_r>
 8008dd4:	b170      	cbz	r0, 8008df4 <_vfiprintf_r+0x5c>
 8008dd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dd8:	07dc      	lsls	r4, r3, #31
 8008dda:	d504      	bpl.n	8008de6 <_vfiprintf_r+0x4e>
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8008de0:	b01d      	add	sp, #116	@ 0x74
 8008de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de6:	89ab      	ldrh	r3, [r5, #12]
 8008de8:	0598      	lsls	r0, r3, #22
 8008dea:	d4f7      	bmi.n	8008ddc <_vfiprintf_r+0x44>
 8008dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dee:	f7fe f9f7 	bl	80071e0 <__retarget_lock_release_recursive>
 8008df2:	e7f3      	b.n	8008ddc <_vfiprintf_r+0x44>
 8008df4:	2300      	movs	r3, #0
 8008df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df8:	2320      	movs	r3, #32
 8008dfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e02:	2330      	movs	r3, #48	@ 0x30
 8008e04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fb4 <_vfiprintf_r+0x21c>
 8008e08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e0c:	f04f 0901 	mov.w	r9, #1
 8008e10:	4623      	mov	r3, r4
 8008e12:	469a      	mov	sl, r3
 8008e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e18:	b10a      	cbz	r2, 8008e1e <_vfiprintf_r+0x86>
 8008e1a:	2a25      	cmp	r2, #37	@ 0x25
 8008e1c:	d1f9      	bne.n	8008e12 <_vfiprintf_r+0x7a>
 8008e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e22:	d00b      	beq.n	8008e3c <_vfiprintf_r+0xa4>
 8008e24:	465b      	mov	r3, fp
 8008e26:	4622      	mov	r2, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f7ff ffa2 	bl	8008d74 <__sfputs_r>
 8008e30:	3001      	adds	r0, #1
 8008e32:	f000 80a7 	beq.w	8008f84 <_vfiprintf_r+0x1ec>
 8008e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e38:	445a      	add	r2, fp
 8008e3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 809f 	beq.w	8008f84 <_vfiprintf_r+0x1ec>
 8008e46:	2300      	movs	r3, #0
 8008e48:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e50:	f10a 0a01 	add.w	sl, sl, #1
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	9307      	str	r3, [sp, #28]
 8008e58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e5e:	4654      	mov	r4, sl
 8008e60:	2205      	movs	r2, #5
 8008e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e66:	4853      	ldr	r0, [pc, #332]	@ (8008fb4 <_vfiprintf_r+0x21c>)
 8008e68:	f7f7 f9b2 	bl	80001d0 <memchr>
 8008e6c:	9a04      	ldr	r2, [sp, #16]
 8008e6e:	b9d8      	cbnz	r0, 8008ea8 <_vfiprintf_r+0x110>
 8008e70:	06d1      	lsls	r1, r2, #27
 8008e72:	bf44      	itt	mi
 8008e74:	2320      	movmi	r3, #32
 8008e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e7a:	0713      	lsls	r3, r2, #28
 8008e7c:	bf44      	itt	mi
 8008e7e:	232b      	movmi	r3, #43	@ 0x2b
 8008e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e84:	f89a 3000 	ldrb.w	r3, [sl]
 8008e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e8a:	d015      	beq.n	8008eb8 <_vfiprintf_r+0x120>
 8008e8c:	9a07      	ldr	r2, [sp, #28]
 8008e8e:	4654      	mov	r4, sl
 8008e90:	2000      	movs	r0, #0
 8008e92:	f04f 0c0a 	mov.w	ip, #10
 8008e96:	4621      	mov	r1, r4
 8008e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e9c:	3b30      	subs	r3, #48	@ 0x30
 8008e9e:	2b09      	cmp	r3, #9
 8008ea0:	d94b      	bls.n	8008f3a <_vfiprintf_r+0x1a2>
 8008ea2:	b1b0      	cbz	r0, 8008ed2 <_vfiprintf_r+0x13a>
 8008ea4:	9207      	str	r2, [sp, #28]
 8008ea6:	e014      	b.n	8008ed2 <_vfiprintf_r+0x13a>
 8008ea8:	eba0 0308 	sub.w	r3, r0, r8
 8008eac:	fa09 f303 	lsl.w	r3, r9, r3
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	9304      	str	r3, [sp, #16]
 8008eb4:	46a2      	mov	sl, r4
 8008eb6:	e7d2      	b.n	8008e5e <_vfiprintf_r+0xc6>
 8008eb8:	9b03      	ldr	r3, [sp, #12]
 8008eba:	1d19      	adds	r1, r3, #4
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	9103      	str	r1, [sp, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	bfbb      	ittet	lt
 8008ec4:	425b      	neglt	r3, r3
 8008ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eca:	9307      	strge	r3, [sp, #28]
 8008ecc:	9307      	strlt	r3, [sp, #28]
 8008ece:	bfb8      	it	lt
 8008ed0:	9204      	strlt	r2, [sp, #16]
 8008ed2:	7823      	ldrb	r3, [r4, #0]
 8008ed4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ed6:	d10a      	bne.n	8008eee <_vfiprintf_r+0x156>
 8008ed8:	7863      	ldrb	r3, [r4, #1]
 8008eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8008edc:	d132      	bne.n	8008f44 <_vfiprintf_r+0x1ac>
 8008ede:	9b03      	ldr	r3, [sp, #12]
 8008ee0:	1d1a      	adds	r2, r3, #4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	9203      	str	r2, [sp, #12]
 8008ee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008eea:	3402      	adds	r4, #2
 8008eec:	9305      	str	r3, [sp, #20]
 8008eee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fc4 <_vfiprintf_r+0x22c>
 8008ef2:	7821      	ldrb	r1, [r4, #0]
 8008ef4:	2203      	movs	r2, #3
 8008ef6:	4650      	mov	r0, sl
 8008ef8:	f7f7 f96a 	bl	80001d0 <memchr>
 8008efc:	b138      	cbz	r0, 8008f0e <_vfiprintf_r+0x176>
 8008efe:	9b04      	ldr	r3, [sp, #16]
 8008f00:	eba0 000a 	sub.w	r0, r0, sl
 8008f04:	2240      	movs	r2, #64	@ 0x40
 8008f06:	4082      	lsls	r2, r0
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	3401      	adds	r4, #1
 8008f0c:	9304      	str	r3, [sp, #16]
 8008f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f12:	4829      	ldr	r0, [pc, #164]	@ (8008fb8 <_vfiprintf_r+0x220>)
 8008f14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f18:	2206      	movs	r2, #6
 8008f1a:	f7f7 f959 	bl	80001d0 <memchr>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d03f      	beq.n	8008fa2 <_vfiprintf_r+0x20a>
 8008f22:	4b26      	ldr	r3, [pc, #152]	@ (8008fbc <_vfiprintf_r+0x224>)
 8008f24:	bb1b      	cbnz	r3, 8008f6e <_vfiprintf_r+0x1d6>
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	3307      	adds	r3, #7
 8008f2a:	f023 0307 	bic.w	r3, r3, #7
 8008f2e:	3308      	adds	r3, #8
 8008f30:	9303      	str	r3, [sp, #12]
 8008f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f34:	443b      	add	r3, r7
 8008f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f38:	e76a      	b.n	8008e10 <_vfiprintf_r+0x78>
 8008f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f3e:	460c      	mov	r4, r1
 8008f40:	2001      	movs	r0, #1
 8008f42:	e7a8      	b.n	8008e96 <_vfiprintf_r+0xfe>
 8008f44:	2300      	movs	r3, #0
 8008f46:	3401      	adds	r4, #1
 8008f48:	9305      	str	r3, [sp, #20]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	f04f 0c0a 	mov.w	ip, #10
 8008f50:	4620      	mov	r0, r4
 8008f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f56:	3a30      	subs	r2, #48	@ 0x30
 8008f58:	2a09      	cmp	r2, #9
 8008f5a:	d903      	bls.n	8008f64 <_vfiprintf_r+0x1cc>
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0c6      	beq.n	8008eee <_vfiprintf_r+0x156>
 8008f60:	9105      	str	r1, [sp, #20]
 8008f62:	e7c4      	b.n	8008eee <_vfiprintf_r+0x156>
 8008f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f68:	4604      	mov	r4, r0
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e7f0      	b.n	8008f50 <_vfiprintf_r+0x1b8>
 8008f6e:	ab03      	add	r3, sp, #12
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	462a      	mov	r2, r5
 8008f74:	4b12      	ldr	r3, [pc, #72]	@ (8008fc0 <_vfiprintf_r+0x228>)
 8008f76:	a904      	add	r1, sp, #16
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f7fd fbc1 	bl	8006700 <_printf_float>
 8008f7e:	4607      	mov	r7, r0
 8008f80:	1c78      	adds	r0, r7, #1
 8008f82:	d1d6      	bne.n	8008f32 <_vfiprintf_r+0x19a>
 8008f84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f86:	07d9      	lsls	r1, r3, #31
 8008f88:	d405      	bmi.n	8008f96 <_vfiprintf_r+0x1fe>
 8008f8a:	89ab      	ldrh	r3, [r5, #12]
 8008f8c:	059a      	lsls	r2, r3, #22
 8008f8e:	d402      	bmi.n	8008f96 <_vfiprintf_r+0x1fe>
 8008f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f92:	f7fe f925 	bl	80071e0 <__retarget_lock_release_recursive>
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	065b      	lsls	r3, r3, #25
 8008f9a:	f53f af1f 	bmi.w	8008ddc <_vfiprintf_r+0x44>
 8008f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fa0:	e71e      	b.n	8008de0 <_vfiprintf_r+0x48>
 8008fa2:	ab03      	add	r3, sp, #12
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	462a      	mov	r2, r5
 8008fa8:	4b05      	ldr	r3, [pc, #20]	@ (8008fc0 <_vfiprintf_r+0x228>)
 8008faa:	a904      	add	r1, sp, #16
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7fd fe3f 	bl	8006c30 <_printf_i>
 8008fb2:	e7e4      	b.n	8008f7e <_vfiprintf_r+0x1e6>
 8008fb4:	0800948e 	.word	0x0800948e
 8008fb8:	08009498 	.word	0x08009498
 8008fbc:	08006701 	.word	0x08006701
 8008fc0:	08008d75 	.word	0x08008d75
 8008fc4:	08009494 	.word	0x08009494

08008fc8 <__swbuf_r>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	460e      	mov	r6, r1
 8008fcc:	4614      	mov	r4, r2
 8008fce:	4605      	mov	r5, r0
 8008fd0:	b118      	cbz	r0, 8008fda <__swbuf_r+0x12>
 8008fd2:	6a03      	ldr	r3, [r0, #32]
 8008fd4:	b90b      	cbnz	r3, 8008fda <__swbuf_r+0x12>
 8008fd6:	f7fd ffd5 	bl	8006f84 <__sinit>
 8008fda:	69a3      	ldr	r3, [r4, #24]
 8008fdc:	60a3      	str	r3, [r4, #8]
 8008fde:	89a3      	ldrh	r3, [r4, #12]
 8008fe0:	071a      	lsls	r2, r3, #28
 8008fe2:	d501      	bpl.n	8008fe8 <__swbuf_r+0x20>
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	b943      	cbnz	r3, 8008ffa <__swbuf_r+0x32>
 8008fe8:	4621      	mov	r1, r4
 8008fea:	4628      	mov	r0, r5
 8008fec:	f000 f82a 	bl	8009044 <__swsetup_r>
 8008ff0:	b118      	cbz	r0, 8008ffa <__swbuf_r+0x32>
 8008ff2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	6922      	ldr	r2, [r4, #16]
 8008ffe:	1a98      	subs	r0, r3, r2
 8009000:	6963      	ldr	r3, [r4, #20]
 8009002:	b2f6      	uxtb	r6, r6
 8009004:	4283      	cmp	r3, r0
 8009006:	4637      	mov	r7, r6
 8009008:	dc05      	bgt.n	8009016 <__swbuf_r+0x4e>
 800900a:	4621      	mov	r1, r4
 800900c:	4628      	mov	r0, r5
 800900e:	f7ff fd99 	bl	8008b44 <_fflush_r>
 8009012:	2800      	cmp	r0, #0
 8009014:	d1ed      	bne.n	8008ff2 <__swbuf_r+0x2a>
 8009016:	68a3      	ldr	r3, [r4, #8]
 8009018:	3b01      	subs	r3, #1
 800901a:	60a3      	str	r3, [r4, #8]
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	6022      	str	r2, [r4, #0]
 8009022:	701e      	strb	r6, [r3, #0]
 8009024:	6962      	ldr	r2, [r4, #20]
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	429a      	cmp	r2, r3
 800902a:	d004      	beq.n	8009036 <__swbuf_r+0x6e>
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	07db      	lsls	r3, r3, #31
 8009030:	d5e1      	bpl.n	8008ff6 <__swbuf_r+0x2e>
 8009032:	2e0a      	cmp	r6, #10
 8009034:	d1df      	bne.n	8008ff6 <__swbuf_r+0x2e>
 8009036:	4621      	mov	r1, r4
 8009038:	4628      	mov	r0, r5
 800903a:	f7ff fd83 	bl	8008b44 <_fflush_r>
 800903e:	2800      	cmp	r0, #0
 8009040:	d0d9      	beq.n	8008ff6 <__swbuf_r+0x2e>
 8009042:	e7d6      	b.n	8008ff2 <__swbuf_r+0x2a>

08009044 <__swsetup_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4b29      	ldr	r3, [pc, #164]	@ (80090ec <__swsetup_r+0xa8>)
 8009048:	4605      	mov	r5, r0
 800904a:	6818      	ldr	r0, [r3, #0]
 800904c:	460c      	mov	r4, r1
 800904e:	b118      	cbz	r0, 8009058 <__swsetup_r+0x14>
 8009050:	6a03      	ldr	r3, [r0, #32]
 8009052:	b90b      	cbnz	r3, 8009058 <__swsetup_r+0x14>
 8009054:	f7fd ff96 	bl	8006f84 <__sinit>
 8009058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905c:	0719      	lsls	r1, r3, #28
 800905e:	d422      	bmi.n	80090a6 <__swsetup_r+0x62>
 8009060:	06da      	lsls	r2, r3, #27
 8009062:	d407      	bmi.n	8009074 <__swsetup_r+0x30>
 8009064:	2209      	movs	r2, #9
 8009066:	602a      	str	r2, [r5, #0]
 8009068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800906c:	81a3      	strh	r3, [r4, #12]
 800906e:	f04f 30ff 	mov.w	r0, #4294967295
 8009072:	e033      	b.n	80090dc <__swsetup_r+0x98>
 8009074:	0758      	lsls	r0, r3, #29
 8009076:	d512      	bpl.n	800909e <__swsetup_r+0x5a>
 8009078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800907a:	b141      	cbz	r1, 800908e <__swsetup_r+0x4a>
 800907c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009080:	4299      	cmp	r1, r3
 8009082:	d002      	beq.n	800908a <__swsetup_r+0x46>
 8009084:	4628      	mov	r0, r5
 8009086:	f7fe ff07 	bl	8007e98 <_free_r>
 800908a:	2300      	movs	r3, #0
 800908c:	6363      	str	r3, [r4, #52]	@ 0x34
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009094:	81a3      	strh	r3, [r4, #12]
 8009096:	2300      	movs	r3, #0
 8009098:	6063      	str	r3, [r4, #4]
 800909a:	6923      	ldr	r3, [r4, #16]
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	f043 0308 	orr.w	r3, r3, #8
 80090a4:	81a3      	strh	r3, [r4, #12]
 80090a6:	6923      	ldr	r3, [r4, #16]
 80090a8:	b94b      	cbnz	r3, 80090be <__swsetup_r+0x7a>
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090b4:	d003      	beq.n	80090be <__swsetup_r+0x7a>
 80090b6:	4621      	mov	r1, r4
 80090b8:	4628      	mov	r0, r5
 80090ba:	f000 f883 	bl	80091c4 <__smakebuf_r>
 80090be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090c2:	f013 0201 	ands.w	r2, r3, #1
 80090c6:	d00a      	beq.n	80090de <__swsetup_r+0x9a>
 80090c8:	2200      	movs	r2, #0
 80090ca:	60a2      	str	r2, [r4, #8]
 80090cc:	6962      	ldr	r2, [r4, #20]
 80090ce:	4252      	negs	r2, r2
 80090d0:	61a2      	str	r2, [r4, #24]
 80090d2:	6922      	ldr	r2, [r4, #16]
 80090d4:	b942      	cbnz	r2, 80090e8 <__swsetup_r+0xa4>
 80090d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090da:	d1c5      	bne.n	8009068 <__swsetup_r+0x24>
 80090dc:	bd38      	pop	{r3, r4, r5, pc}
 80090de:	0799      	lsls	r1, r3, #30
 80090e0:	bf58      	it	pl
 80090e2:	6962      	ldrpl	r2, [r4, #20]
 80090e4:	60a2      	str	r2, [r4, #8]
 80090e6:	e7f4      	b.n	80090d2 <__swsetup_r+0x8e>
 80090e8:	2000      	movs	r0, #0
 80090ea:	e7f7      	b.n	80090dc <__swsetup_r+0x98>
 80090ec:	20000018 	.word	0x20000018

080090f0 <_raise_r>:
 80090f0:	291f      	cmp	r1, #31
 80090f2:	b538      	push	{r3, r4, r5, lr}
 80090f4:	4605      	mov	r5, r0
 80090f6:	460c      	mov	r4, r1
 80090f8:	d904      	bls.n	8009104 <_raise_r+0x14>
 80090fa:	2316      	movs	r3, #22
 80090fc:	6003      	str	r3, [r0, #0]
 80090fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009106:	b112      	cbz	r2, 800910e <_raise_r+0x1e>
 8009108:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800910c:	b94b      	cbnz	r3, 8009122 <_raise_r+0x32>
 800910e:	4628      	mov	r0, r5
 8009110:	f000 f830 	bl	8009174 <_getpid_r>
 8009114:	4622      	mov	r2, r4
 8009116:	4601      	mov	r1, r0
 8009118:	4628      	mov	r0, r5
 800911a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800911e:	f000 b817 	b.w	8009150 <_kill_r>
 8009122:	2b01      	cmp	r3, #1
 8009124:	d00a      	beq.n	800913c <_raise_r+0x4c>
 8009126:	1c59      	adds	r1, r3, #1
 8009128:	d103      	bne.n	8009132 <_raise_r+0x42>
 800912a:	2316      	movs	r3, #22
 800912c:	6003      	str	r3, [r0, #0]
 800912e:	2001      	movs	r0, #1
 8009130:	e7e7      	b.n	8009102 <_raise_r+0x12>
 8009132:	2100      	movs	r1, #0
 8009134:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009138:	4620      	mov	r0, r4
 800913a:	4798      	blx	r3
 800913c:	2000      	movs	r0, #0
 800913e:	e7e0      	b.n	8009102 <_raise_r+0x12>

08009140 <raise>:
 8009140:	4b02      	ldr	r3, [pc, #8]	@ (800914c <raise+0xc>)
 8009142:	4601      	mov	r1, r0
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	f7ff bfd3 	b.w	80090f0 <_raise_r>
 800914a:	bf00      	nop
 800914c:	20000018 	.word	0x20000018

08009150 <_kill_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d07      	ldr	r5, [pc, #28]	@ (8009170 <_kill_r+0x20>)
 8009154:	2300      	movs	r3, #0
 8009156:	4604      	mov	r4, r0
 8009158:	4608      	mov	r0, r1
 800915a:	4611      	mov	r1, r2
 800915c:	602b      	str	r3, [r5, #0]
 800915e:	f7f8 fb55 	bl	800180c <_kill>
 8009162:	1c43      	adds	r3, r0, #1
 8009164:	d102      	bne.n	800916c <_kill_r+0x1c>
 8009166:	682b      	ldr	r3, [r5, #0]
 8009168:	b103      	cbz	r3, 800916c <_kill_r+0x1c>
 800916a:	6023      	str	r3, [r4, #0]
 800916c:	bd38      	pop	{r3, r4, r5, pc}
 800916e:	bf00      	nop
 8009170:	200033d8 	.word	0x200033d8

08009174 <_getpid_r>:
 8009174:	f7f8 bb42 	b.w	80017fc <_getpid>

08009178 <__swhatbuf_r>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	460c      	mov	r4, r1
 800917c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009180:	2900      	cmp	r1, #0
 8009182:	b096      	sub	sp, #88	@ 0x58
 8009184:	4615      	mov	r5, r2
 8009186:	461e      	mov	r6, r3
 8009188:	da0d      	bge.n	80091a6 <__swhatbuf_r+0x2e>
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009190:	f04f 0100 	mov.w	r1, #0
 8009194:	bf14      	ite	ne
 8009196:	2340      	movne	r3, #64	@ 0x40
 8009198:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800919c:	2000      	movs	r0, #0
 800919e:	6031      	str	r1, [r6, #0]
 80091a0:	602b      	str	r3, [r5, #0]
 80091a2:	b016      	add	sp, #88	@ 0x58
 80091a4:	bd70      	pop	{r4, r5, r6, pc}
 80091a6:	466a      	mov	r2, sp
 80091a8:	f000 f848 	bl	800923c <_fstat_r>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	dbec      	blt.n	800918a <__swhatbuf_r+0x12>
 80091b0:	9901      	ldr	r1, [sp, #4]
 80091b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091ba:	4259      	negs	r1, r3
 80091bc:	4159      	adcs	r1, r3
 80091be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091c2:	e7eb      	b.n	800919c <__swhatbuf_r+0x24>

080091c4 <__smakebuf_r>:
 80091c4:	898b      	ldrh	r3, [r1, #12]
 80091c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091c8:	079d      	lsls	r5, r3, #30
 80091ca:	4606      	mov	r6, r0
 80091cc:	460c      	mov	r4, r1
 80091ce:	d507      	bpl.n	80091e0 <__smakebuf_r+0x1c>
 80091d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	2301      	movs	r3, #1
 80091da:	6163      	str	r3, [r4, #20]
 80091dc:	b003      	add	sp, #12
 80091de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e0:	ab01      	add	r3, sp, #4
 80091e2:	466a      	mov	r2, sp
 80091e4:	f7ff ffc8 	bl	8009178 <__swhatbuf_r>
 80091e8:	9f00      	ldr	r7, [sp, #0]
 80091ea:	4605      	mov	r5, r0
 80091ec:	4639      	mov	r1, r7
 80091ee:	4630      	mov	r0, r6
 80091f0:	f7fe fec6 	bl	8007f80 <_malloc_r>
 80091f4:	b948      	cbnz	r0, 800920a <__smakebuf_r+0x46>
 80091f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fa:	059a      	lsls	r2, r3, #22
 80091fc:	d4ee      	bmi.n	80091dc <__smakebuf_r+0x18>
 80091fe:	f023 0303 	bic.w	r3, r3, #3
 8009202:	f043 0302 	orr.w	r3, r3, #2
 8009206:	81a3      	strh	r3, [r4, #12]
 8009208:	e7e2      	b.n	80091d0 <__smakebuf_r+0xc>
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	6020      	str	r0, [r4, #0]
 800920e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009212:	81a3      	strh	r3, [r4, #12]
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800921a:	b15b      	cbz	r3, 8009234 <__smakebuf_r+0x70>
 800921c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009220:	4630      	mov	r0, r6
 8009222:	f000 f81d 	bl	8009260 <_isatty_r>
 8009226:	b128      	cbz	r0, 8009234 <__smakebuf_r+0x70>
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	f023 0303 	bic.w	r3, r3, #3
 800922e:	f043 0301 	orr.w	r3, r3, #1
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	431d      	orrs	r5, r3
 8009238:	81a5      	strh	r5, [r4, #12]
 800923a:	e7cf      	b.n	80091dc <__smakebuf_r+0x18>

0800923c <_fstat_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d07      	ldr	r5, [pc, #28]	@ (800925c <_fstat_r+0x20>)
 8009240:	2300      	movs	r3, #0
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	4611      	mov	r1, r2
 8009248:	602b      	str	r3, [r5, #0]
 800924a:	f7f8 fb3f 	bl	80018cc <_fstat>
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	d102      	bne.n	8009258 <_fstat_r+0x1c>
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	b103      	cbz	r3, 8009258 <_fstat_r+0x1c>
 8009256:	6023      	str	r3, [r4, #0]
 8009258:	bd38      	pop	{r3, r4, r5, pc}
 800925a:	bf00      	nop
 800925c:	200033d8 	.word	0x200033d8

08009260 <_isatty_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4d06      	ldr	r5, [pc, #24]	@ (800927c <_isatty_r+0x1c>)
 8009264:	2300      	movs	r3, #0
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	602b      	str	r3, [r5, #0]
 800926c:	f7f8 fb3e 	bl	80018ec <_isatty>
 8009270:	1c43      	adds	r3, r0, #1
 8009272:	d102      	bne.n	800927a <_isatty_r+0x1a>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	b103      	cbz	r3, 800927a <_isatty_r+0x1a>
 8009278:	6023      	str	r3, [r4, #0]
 800927a:	bd38      	pop	{r3, r4, r5, pc}
 800927c:	200033d8 	.word	0x200033d8

08009280 <_init>:
 8009280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009282:	bf00      	nop
 8009284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009286:	bc08      	pop	{r3}
 8009288:	469e      	mov	lr, r3
 800928a:	4770      	bx	lr

0800928c <_fini>:
 800928c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928e:	bf00      	nop
 8009290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009292:	bc08      	pop	{r3}
 8009294:	469e      	mov	lr, r3
 8009296:	4770      	bx	lr
