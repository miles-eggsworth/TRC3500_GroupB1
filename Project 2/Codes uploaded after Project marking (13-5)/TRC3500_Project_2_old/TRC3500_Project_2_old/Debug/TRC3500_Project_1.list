
TRC3500_Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cc8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08007e58  08007e58  00008e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008280  08008280  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008280  08008280  00009280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008288  08008288  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008288  08008288  00009288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800828c  0800828c  0000928c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008290  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e14  200001d4  08008464  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fe8  08008464  0000afe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f85b  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b0  00000000  00000000  00019a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  0001bd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5e  00000000  00000000  0001caa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022599  00000000  00000000  0001d506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3a7  00000000  00000000  0003fa9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d20da  00000000  00000000  0004ee46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120f20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a8  00000000  00000000  00120f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012590c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e40 	.word	0x08007e40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007e40 	.word	0x08007e40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <captureSamples>:
  * @retval int
  */

// 📥 Capture samples
void captureSamples(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < SAMPLE_COUNT; i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	80fb      	strh	r3, [r7, #6]
 8000ea2:	e02c      	b.n	8000efe <captureSamples+0x66>
    {
        HAL_ADC_Start(&hadc1);
 8000ea4:	481a      	ldr	r0, [pc, #104]	@ (8000f10 <captureSamples+0x78>)
 8000ea6:	f001 f8c1 	bl	800202c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8000eae:	4818      	ldr	r0, [pc, #96]	@ (8000f10 <captureSamples+0x78>)
 8000eb0:	f001 f91f 	bl	80020f2 <HAL_ADC_PollForConversion>
        adcBuffer[i] = HAL_ADC_GetValue(&hadc1);
 8000eb4:	4816      	ldr	r0, [pc, #88]	@ (8000f10 <captureSamples+0x78>)
 8000eb6:	f001 f9ab 	bl	8002210 <HAL_ADC_GetValue>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	b291      	uxth	r1, r2
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <captureSamples+0x7c>)
 8000ec2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        voltageBuffer[i] = ((float)adcBuffer[i] / 4095.0f) * 3.3f;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <captureSamples+0x7c>)
 8000eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ed6:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000f18 <captureSamples+0x80>
 8000eda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000f1c <captureSamples+0x84>
 8000ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <captureSamples+0x88>)
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	edc3 7a00 	vstr	s15, [r3]
        HAL_Delay(1); // 1ms sample rate
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f000 fd5a 	bl	80019ac <HAL_Delay>
    for (uint16_t i = 0; i < SAMPLE_COUNT; i++)
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	3301      	adds	r3, #1
 8000efc:	80fb      	strh	r3, [r7, #6]
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f04:	d3ce      	bcc.n	8000ea4 <captureSamples+0xc>
    }
}
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200001f0 	.word	0x200001f0
 8000f14:	200002dc 	.word	0x200002dc
 8000f18:	457ff000 	.word	0x457ff000
 8000f1c:	40533333 	.word	0x40533333
 8000f20:	200006c4 	.word	0x200006c4

08000f24 <calculateMean>:

// 📈 Calculate mean
float calculateMean(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
    float sum = 0;
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < SAMPLE_COUNT; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	807b      	strh	r3, [r7, #2]
 8000f34:	e00e      	b.n	8000f54 <calculateMean+0x30>
    {
        sum += voltageBuffer[i];
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	4a10      	ldr	r2, [pc, #64]	@ (8000f7c <calculateMean+0x58>)
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	edd3 7a00 	vldr	s15, [r3]
 8000f42:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4a:	edc7 7a01 	vstr	s15, [r7, #4]
    for (uint16_t i = 0; i < SAMPLE_COUNT; i++)
 8000f4e:	887b      	ldrh	r3, [r7, #2]
 8000f50:	3301      	adds	r3, #1
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f5a:	d3ec      	bcc.n	8000f36 <calculateMean+0x12>
    }
    return sum / SAMPLE_COUNT;
 8000f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f60:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f80 <calculateMean+0x5c>
 8000f64:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f68:	eef0 7a66 	vmov.f32	s15, s13
}
 8000f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200006c4 	.word	0x200006c4
 8000f80:	43fa0000 	.word	0x43fa0000

08000f84 <estimateFrequency>:

// 📊 Estimate frequency
float estimateFrequency(float meanVoltage)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t zeroCrossCount = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 1; i < SAMPLE_COUNT; i++)
 8000f92:	2301      	movs	r3, #1
 8000f94:	817b      	strh	r3, [r7, #10]
 8000f96:	e03b      	b.n	8001010 <estimateFrequency+0x8c>
    {
        if ((voltageBuffer[i-1] < meanVoltage && voltageBuffer[i] >= meanVoltage) ||
 8000f98:	897b      	ldrh	r3, [r7, #10]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	4a27      	ldr	r2, [pc, #156]	@ (800103c <estimateFrequency+0xb8>)
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb2:	dd0c      	ble.n	8000fce <estimateFrequency+0x4a>
 8000fb4:	897b      	ldrh	r3, [r7, #10]
 8000fb6:	4a21      	ldr	r2, [pc, #132]	@ (800103c <estimateFrequency+0xb8>)
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	d91a      	bls.n	8001004 <estimateFrequency+0x80>
            (voltageBuffer[i-1] > meanVoltage && voltageBuffer[i] <= meanVoltage))
 8000fce:	897b      	ldrh	r3, [r7, #10]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800103c <estimateFrequency+0xb8>)
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
        if ((voltageBuffer[i-1] < meanVoltage && voltageBuffer[i] >= meanVoltage) ||
 8000fdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	d50f      	bpl.n	800100a <estimateFrequency+0x86>
            (voltageBuffer[i-1] > meanVoltage && voltageBuffer[i] <= meanVoltage))
 8000fea:	897b      	ldrh	r3, [r7, #10]
 8000fec:	4a13      	ldr	r2, [pc, #76]	@ (800103c <estimateFrequency+0xb8>)
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	db02      	blt.n	800100a <estimateFrequency+0x86>
        {
            zeroCrossCount++;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 1; i < SAMPLE_COUNT; i++)
 800100a:	897b      	ldrh	r3, [r7, #10]
 800100c:	3301      	adds	r3, #1
 800100e:	817b      	strh	r3, [r7, #10]
 8001010:	897b      	ldrh	r3, [r7, #10]
 8001012:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001016:	d3bf      	bcc.n	8000f98 <estimateFrequency+0x14>
        }
    }
    return (zeroCrossCount / 2.0f) * (1000.0f / SAMPLE_COUNT); // Hz
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001022:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	ee77 7aa7 	vadd.f32	s15, s15, s15
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	200006c4 	.word	0x200006c4

08001040 <printResults>:

// 📤 Print results
void printResults(float meanVoltage, float estimatedFrequency)
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b0a0      	sub	sp, #128	@ 0x80
 8001044:	af02      	add	r7, sp, #8
 8001046:	ed87 0a01 	vstr	s0, [r7, #4]
 800104a:	edc7 0a00 	vstr	s1, [r7]
    char msg[100];

    // Print the basic results first
    sprintf(msg, "Drop Detected!\r\nMean Voltage = %.2f V\r\nEstimated Frequency = %.2f Hz\r\n",
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fa7a 	bl	8000548 <__aeabi_f2d>
 8001054:	4604      	mov	r4, r0
 8001056:	460d      	mov	r5, r1
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f7ff fa75 	bl	8000548 <__aeabi_f2d>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	f107 000c 	add.w	r0, r7, #12
 8001066:	e9cd 2300 	strd	r2, r3, [sp]
 800106a:	4622      	mov	r2, r4
 800106c:	462b      	mov	r3, r5
 800106e:	4928      	ldr	r1, [pc, #160]	@ (8001110 <printResults+0xd0>)
 8001070:	f004 fdb8 	bl	8005be4 <siprintf>
            meanVoltage, estimatedFrequency);
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f8f9 	bl	8000270 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f107 010c 	add.w	r1, r7, #12
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	4822      	ldr	r0, [pc, #136]	@ (8001114 <printResults+0xd4>)
 800108c:	f003 fbc0 	bl	8004810 <HAL_UART_Transmit>

    // Print the voltage samples
    HAL_UART_Transmit(&huart2, (uint8_t*)"Voltage samples:\r\n[", strlen("Voltage samples:\r\n["), HAL_MAX_DELAY);
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	2213      	movs	r2, #19
 8001096:	4920      	ldr	r1, [pc, #128]	@ (8001118 <printResults+0xd8>)
 8001098:	481e      	ldr	r0, [pc, #120]	@ (8001114 <printResults+0xd4>)
 800109a:	f003 fbb9 	bl	8004810 <HAL_UART_Transmit>

    for (int i = 0; i < SAMPLE_COUNT; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80010a2:	e026      	b.n	80010f2 <printResults+0xb2>
    {
        // Format each voltage sample as a float
        int len = sprintf(msg, "%.2f", voltageBuffer[i]);
 80010a4:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <printResults+0xdc>)
 80010a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa4a 	bl	8000548 <__aeabi_f2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	f107 000c 	add.w	r0, r7, #12
 80010bc:	4918      	ldr	r1, [pc, #96]	@ (8001120 <printResults+0xe0>)
 80010be:	f004 fd91 	bl	8005be4 <siprintf>
 80010c2:	6738      	str	r0, [r7, #112]	@ 0x70
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80010c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	f107 010c 	add.w	r1, r7, #12
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	4810      	ldr	r0, [pc, #64]	@ (8001114 <printResults+0xd4>)
 80010d2:	f003 fb9d 	bl	8004810 <HAL_UART_Transmit>

        if (i < SAMPLE_COUNT - 1) // Add a comma between samples, but not after the last one
 80010d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010d8:	f5b3 7ff9 	cmp.w	r3, #498	@ 0x1f2
 80010dc:	dc06      	bgt.n	80010ec <printResults+0xac>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)", ", 2, HAL_MAX_DELAY);
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	2202      	movs	r2, #2
 80010e4:	490f      	ldr	r1, [pc, #60]	@ (8001124 <printResults+0xe4>)
 80010e6:	480b      	ldr	r0, [pc, #44]	@ (8001114 <printResults+0xd4>)
 80010e8:	f003 fb92 	bl	8004810 <HAL_UART_Transmit>
    for (int i = 0; i < SAMPLE_COUNT; i++)
 80010ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010ee:	3301      	adds	r3, #1
 80010f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80010f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010f8:	dbd4      	blt.n	80010a4 <printResults+0x64>
        }
    }

    // End the list with a closing bracket
    HAL_UART_Transmit(&huart2, (uint8_t*)"]\r\n\r\n", 3, HAL_MAX_DELAY);
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	2203      	movs	r2, #3
 8001100:	4909      	ldr	r1, [pc, #36]	@ (8001128 <printResults+0xe8>)
 8001102:	4804      	ldr	r0, [pc, #16]	@ (8001114 <printResults+0xd4>)
 8001104:	f003 fb84 	bl	8004810 <HAL_UART_Transmit>
}
 8001108:	bf00      	nop
 800110a:	3778      	adds	r7, #120	@ 0x78
 800110c:	46bd      	mov	sp, r7
 800110e:	bdb0      	pop	{r4, r5, r7, pc}
 8001110:	08007e58 	.word	0x08007e58
 8001114:	20000254 	.word	0x20000254
 8001118:	08007ea0 	.word	0x08007ea0
 800111c:	200006c4 	.word	0x200006c4
 8001120:	08007eb4 	.word	0x08007eb4
 8001124:	08007ebc 	.word	0x08007ebc
 8001128:	08007ec0 	.word	0x08007ec0

0800112c <main>:
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001132:	f000 fbc6 	bl	80018c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001136:	f000 f849 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113a:	f000 f93d 	bl	80013b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800113e:	f000 f90b 	bl	8001358 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001142:	f000 f8a5 	bl	8001290 <MX_ADC1_Init>
  /* USER CODE BEGIN WHILE */

  while(1)
  {
      // Start ADC and check for a drop
      HAL_ADC_Start(&hadc1);
 8001146:	481d      	ldr	r0, [pc, #116]	@ (80011bc <main+0x90>)
 8001148:	f000 ff70 	bl	800202c <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	481a      	ldr	r0, [pc, #104]	@ (80011bc <main+0x90>)
 8001152:	f000 ffce 	bl	80020f2 <HAL_ADC_PollForConversion>
      uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8001156:	4819      	ldr	r0, [pc, #100]	@ (80011bc <main+0x90>)
 8001158:	f001 f85a 	bl	8002210 <HAL_ADC_GetValue>
 800115c:	4603      	mov	r3, r0
 800115e:	81fb      	strh	r3, [r7, #14]
      float voltage = ((float)raw / 4095.0f) * 3.3f;
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800116a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80011c0 <main+0x94>
 800116e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001172:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80011c4 <main+0x98>
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (voltage > THRESHOLD_VOLTAGE)
 800117e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001182:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80011c8 <main+0x9c>
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	dd14      	ble.n	80011ba <main+0x8e>
      {
          captureSamples();
 8001190:	f7ff fe82 	bl	8000e98 <captureSamples>

          float meanVoltage = calculateMean();
 8001194:	f7ff fec6 	bl	8000f24 <calculateMean>
 8001198:	ed87 0a01 	vstr	s0, [r7, #4]
          float frequency = estimateFrequency(meanVoltage);
 800119c:	ed97 0a01 	vldr	s0, [r7, #4]
 80011a0:	f7ff fef0 	bl	8000f84 <estimateFrequency>
 80011a4:	ed87 0a00 	vstr	s0, [r7]

          printResults(meanVoltage, frequency);
 80011a8:	edd7 0a00 	vldr	s1, [r7]
 80011ac:	ed97 0a01 	vldr	s0, [r7, #4]
 80011b0:	f7ff ff46 	bl	8001040 <printResults>

          // Optional: wait a bit after each detection
          HAL_Delay(50);
 80011b4:	2032      	movs	r0, #50	@ 0x32
 80011b6:	f000 fbf9 	bl	80019ac <HAL_Delay>
  {
 80011ba:	e7c4      	b.n	8001146 <main+0x1a>
 80011bc:	200001f0 	.word	0x200001f0
 80011c0:	457ff000 	.word	0x457ff000
 80011c4:	40533333 	.word	0x40533333
 80011c8:	3f333333 	.word	0x3f333333

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b096      	sub	sp, #88	@ 0x58
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2244      	movs	r2, #68	@ 0x44
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fd65 	bl	8005caa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011f2:	f002 f939 	bl	8003468 <HAL_PWREx_ControlVoltageScaling>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011fc:	f000 f926 	bl	800144c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001200:	f002 f914 	bl	800342c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001204:	4b21      	ldr	r3, [pc, #132]	@ (800128c <SystemClock_Config+0xc0>)
 8001206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800120a:	4a20      	ldr	r2, [pc, #128]	@ (800128c <SystemClock_Config+0xc0>)
 800120c:	f023 0318 	bic.w	r3, r3, #24
 8001210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001214:	2314      	movs	r3, #20
 8001216:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001224:	2360      	movs	r3, #96	@ 0x60
 8001226:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001228:	2302      	movs	r3, #2
 800122a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800122c:	2301      	movs	r3, #1
 800122e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001230:	2301      	movs	r3, #1
 8001232:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001234:	2310      	movs	r3, #16
 8001236:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001238:	2307      	movs	r3, #7
 800123a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800123c:	2302      	movs	r3, #2
 800123e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001240:	2302      	movs	r3, #2
 8001242:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4618      	mov	r0, r3
 800124a:	f002 f963 	bl	8003514 <HAL_RCC_OscConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001254:	f000 f8fa 	bl	800144c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001258:	230f      	movs	r3, #15
 800125a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125c:	2303      	movs	r3, #3
 800125e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	2101      	movs	r1, #1
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fd63 	bl	8003d3c <HAL_RCC_ClockConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800127c:	f000 f8e6 	bl	800144c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001280:	f003 f976 	bl	8004570 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001284:	bf00      	nop
 8001286:	3758      	adds	r7, #88	@ 0x58
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000

08001290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012a6:	4b29      	ldr	r3, [pc, #164]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012a8:	4a29      	ldr	r2, [pc, #164]	@ (8001350 <MX_ADC1_Init+0xc0>)
 80012aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012ac:	4b27      	ldr	r3, [pc, #156]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012b2:	4b26      	ldr	r3, [pc, #152]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b8:	4b24      	ldr	r3, [pc, #144]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012be:	4b23      	ldr	r3, [pc, #140]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c4:	4b21      	ldr	r3, [pc, #132]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ca:	4b20      	ldr	r3, [pc, #128]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012d8:	2201      	movs	r2, #1
 80012da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e4:	4b19      	ldr	r3, [pc, #100]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ea:	4b18      	ldr	r3, [pc, #96]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <MX_ADC1_Init+0xbc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <MX_ADC1_Init+0xbc>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001306:	4811      	ldr	r0, [pc, #68]	@ (800134c <MX_ADC1_Init+0xbc>)
 8001308:	f000 fd4e 	bl	8001da8 <HAL_ADC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001312:	f000 f89b 	bl	800144c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <MX_ADC1_Init+0xc4>)
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131a:	2306      	movs	r3, #6
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001322:	237f      	movs	r3, #127	@ 0x7f
 8001324:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001326:	2304      	movs	r3, #4
 8001328:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <MX_ADC1_Init+0xbc>)
 8001334:	f001 f94c 	bl	80025d0 <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800133e:	f000 f885 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001f0 	.word	0x200001f0
 8001350:	50040000 	.word	0x50040000
 8001354:	14f00020 	.word	0x14f00020

08001358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800135e:	4a15      	ldr	r2, [pc, #84]	@ (80013b4 <MX_USART2_UART_Init+0x5c>)
 8001360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800139c:	f003 f9ea 	bl	8004774 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013a6:	f000 f851 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000254 	.word	0x20000254
 80013b4:	40004400 	.word	0x40004400

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <MX_GPIO_Init+0x8c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <MX_GPIO_Init+0x8c>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_GPIO_Init+0x8c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_GPIO_Init+0x8c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a16      	ldr	r2, [pc, #88]	@ (8001444 <MX_GPIO_Init+0x8c>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <MX_GPIO_Init+0x8c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <MX_GPIO_Init+0x8c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4a10      	ldr	r2, [pc, #64]	@ (8001444 <MX_GPIO_Init+0x8c>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <MX_GPIO_Init+0x8c>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2108      	movs	r1, #8
 800141a:	480b      	ldr	r0, [pc, #44]	@ (8001448 <MX_GPIO_Init+0x90>)
 800141c:	f001 ffee 	bl	80033fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001420:	2308      	movs	r3, #8
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	4619      	mov	r1, r3
 8001436:	4804      	ldr	r0, [pc, #16]	@ (8001448 <MX_GPIO_Init+0x90>)
 8001438:	f001 fe76 	bl	8003128 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	48000400 	.word	0x48000400

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <Error_Handler+0x8>

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <HAL_MspInit+0x44>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001462:	4a0e      	ldr	r2, [pc, #56]	@ (800149c <HAL_MspInit+0x44>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6613      	str	r3, [r2, #96]	@ 0x60
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HAL_MspInit+0x44>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_MspInit+0x44>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147a:	4a08      	ldr	r2, [pc, #32]	@ (800149c <HAL_MspInit+0x44>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001480:	6593      	str	r3, [r2, #88]	@ 0x58
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_MspInit+0x44>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09e      	sub	sp, #120	@ 0x78
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	2254      	movs	r2, #84	@ 0x54
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 fbf2 	bl	8005caa <memset>
  if(hadc->Instance==ADC1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a29      	ldr	r2, [pc, #164]	@ (8001570 <HAL_ADC_MspInit+0xd0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d14b      	bne.n	8001568 <HAL_ADC_MspInit+0xc8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80014da:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014dc:	2301      	movs	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80014e4:	2310      	movs	r3, #16
 80014e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014e8:	2307      	movs	r3, #7
 80014ea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80014f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fe40 	bl	8004184 <HAL_RCCEx_PeriphCLKConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800150a:	f7ff ff9f 	bl	800144c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800150e:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <HAL_ADC_MspInit+0xd4>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	4a18      	ldr	r2, [pc, #96]	@ (8001574 <HAL_ADC_MspInit+0xd4>)
 8001514:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <HAL_ADC_MspInit+0xd4>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <HAL_ADC_MspInit+0xd4>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <HAL_ADC_MspInit+0xd4>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <HAL_ADC_MspInit+0xd4>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800153e:	2301      	movs	r3, #1
 8001540:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001542:	230b      	movs	r3, #11
 8001544:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001554:	f001 fde8 	bl	8003128 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2012      	movs	r0, #18
 800155e:	f001 fdac 	bl	80030ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001562:	2012      	movs	r0, #18
 8001564:	f001 fdc5 	bl	80030f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001568:	bf00      	nop
 800156a:	3778      	adds	r7, #120	@ 0x78
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	50040000 	.word	0x50040000
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b09e      	sub	sp, #120	@ 0x78
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	2254      	movs	r2, #84	@ 0x54
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fb86 	bl	8005caa <memset>
  if(huart->Instance==USART2)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a28      	ldr	r2, [pc, #160]	@ (8001644 <HAL_UART_MspInit+0xcc>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d148      	bne.n	800163a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 fde5 	bl	8004184 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015c0:	f7ff ff44 	bl	800144c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <HAL_UART_MspInit+0xd0>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001648 <HAL_UART_MspInit+0xd0>)
 80015ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <HAL_UART_MspInit+0xd0>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <HAL_UART_MspInit+0xd0>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e0:	4a19      	ldr	r2, [pc, #100]	@ (8001648 <HAL_UART_MspInit+0xd0>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e8:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <HAL_UART_MspInit+0xd0>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80015f4:	2304      	movs	r3, #4
 80015f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001604:	2307      	movs	r3, #7
 8001606:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001612:	f001 fd89 	bl	8003128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800161a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001628:	2303      	movs	r3, #3
 800162a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001630:	4619      	mov	r1, r3
 8001632:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001636:	f001 fd77 	bl	8003128 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800163a:	bf00      	nop
 800163c:	3778      	adds	r7, #120	@ 0x78
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40004400 	.word	0x40004400
 8001648:	40021000 	.word	0x40021000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <NMI_Handler+0x4>

08001654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <MemManage_Handler+0x4>

08001664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <UsageFault_Handler+0x4>

08001674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a2:	f000 f963 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <ADC1_IRQHandler+0x10>)
 80016b2:	f000 fdba 	bl	800222a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200001f0 	.word	0x200001f0

080016c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return 1;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_kill>:

int _kill(int pid, int sig)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016da:	f004 fb39 	bl	8005d50 <__errno>
 80016de:	4603      	mov	r3, r0
 80016e0:	2216      	movs	r2, #22
 80016e2:	601a      	str	r2, [r3, #0]
  return -1;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_exit>:

void _exit (int status)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ffe7 	bl	80016d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001702:	bf00      	nop
 8001704:	e7fd      	b.n	8001702 <_exit+0x12>

08001706 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e00a      	b.n	800172e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001718:	f3af 8000 	nop.w
 800171c:	4601      	mov	r1, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	60ba      	str	r2, [r7, #8]
 8001724:	b2ca      	uxtb	r2, r1
 8001726:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbf0      	blt.n	8001718 <_read+0x12>
  }

  return len;
 8001736:	687b      	ldr	r3, [r7, #4]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e009      	b.n	8001766 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	60ba      	str	r2, [r7, #8]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	dbf1      	blt.n	8001752 <_write+0x12>
  }
  return len;
 800176e:	687b      	ldr	r3, [r7, #4]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_close>:

int _close(int file)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a0:	605a      	str	r2, [r3, #4]
  return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_isatty>:

int _isatty(int file)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b085      	sub	sp, #20
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	@ (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f004 fa9e 	bl	8005d50 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20010000 	.word	0x20010000
 8001840:	00000400 	.word	0x00000400
 8001844:	20000e94 	.word	0x20000e94
 8001848:	20000fe8 	.word	0x20000fe8

0800184c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001874:	f7ff ffea 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <LoopForever+0x6>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	@ (80018b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <LoopForever+0xe>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	@ (80018bc <LoopForever+0x16>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189e:	f004 fa5d 	bl	8005d5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018a2:	f7ff fc43 	bl	800112c <main>

080018a6 <LoopForever>:

LoopForever:
    b LoopForever
 80018a6:	e7fe      	b.n	80018a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018b4:	08008290 	.word	0x08008290
  ldr r2, =_sbss
 80018b8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018bc:	20000fe8 	.word	0x20000fe8

080018c0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <CAN1_RX0_IRQHandler>

080018c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f001 fbe9 	bl	80030a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f80e 	bl	80018f4 <HAL_InitTick>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	e001      	b.n	80018e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e4:	f7ff fdb8 	bl	8001458 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001900:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <HAL_InitTick+0x6c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d023      	beq.n	8001950 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001908:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <HAL_InitTick+0x70>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <HAL_InitTick+0x6c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f001 fbf5 	bl	800310e <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10f      	bne.n	800194a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d809      	bhi.n	8001944 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f001 fbbf 	bl	80030ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800193c:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <HAL_InitTick+0x74>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e007      	b.n	8001954 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	e004      	b.n	8001954 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	73fb      	strb	r3, [r7, #15]
 800194e:	e001      	b.n	8001954 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004

0800196c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x20>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_IncTick+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <HAL_IncTick+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008
 8001990:	20000e98 	.word	0x20000e98

08001994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <HAL_GetTick+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000e98 	.word	0x20000e98

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff ffee 	bl	8001994 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffde 	bl	8001994 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008

080019f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	609a      	str	r2, [r3, #8]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3360      	adds	r3, #96	@ 0x60
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <LL_ADC_SetOffset+0x44>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	03fff000 	.word	0x03fff000

08001aa4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3360      	adds	r3, #96	@ 0x60
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3360      	adds	r3, #96	@ 0x60
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001afa:	bf00      	nop
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3330      	adds	r3, #48	@ 0x30
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	4413      	add	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	211f      	movs	r1, #31
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	401a      	ands	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	0e9b      	lsrs	r3, r3, #26
 8001b64:	f003 011f 	and.w	r1, r3, #31
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	431a      	orrs	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b78:	bf00      	nop
 8001b7a:	371c      	adds	r7, #28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b90:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b087      	sub	sp, #28
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3314      	adds	r3, #20
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	0e5b      	lsrs	r3, r3, #25
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	4413      	add	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	0d1b      	lsrs	r3, r3, #20
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	2107      	movs	r1, #7
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	401a      	ands	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	0d1b      	lsrs	r3, r3, #20
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bf4:	bf00      	nop
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0318 	and.w	r3, r3, #24
 8001c22:	4908      	ldr	r1, [pc, #32]	@ (8001c44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c24:	40d9      	lsrs	r1, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	400b      	ands	r3, r1
 8001c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	0007ffff 	.word	0x0007ffff

08001c48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6093      	str	r3, [r2, #8]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c80:	d101      	bne.n	8001c86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ca4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ca8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ccc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cd0:	d101      	bne.n	8001cd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <LL_ADC_IsEnabled+0x18>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <LL_ADC_IsEnabled+0x1a>
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d42:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d46:	f043 0204 	orr.w	r2, r3, #4
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d101      	bne.n	8001d72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d101      	bne.n	8001d98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e126      	b.n	8002010 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fb65 	bl	80014a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff3f 	bl	8001c6c <LL_ADC_IsDeepPowerDownEnabled>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff25 	bl	8001c48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff5a 	bl	8001cbc <LL_ADC_IsInternalRegulatorEnabled>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d115      	bne.n	8001e3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff3e 	bl	8001c94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e18:	4b7f      	ldr	r3, [pc, #508]	@ (8002018 <HAL_ADC_Init+0x270>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	4a7f      	ldr	r2, [pc, #508]	@ (800201c <HAL_ADC_Init+0x274>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	3301      	adds	r3, #1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e2c:	e002      	b.n	8001e34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f9      	bne.n	8001e2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff3c 	bl	8001cbc <LL_ADC_IsInternalRegulatorEnabled>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10d      	bne.n	8001e66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	f043 0210 	orr.w	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff75 	bl	8001d5a <LL_ADC_REG_IsConversionOngoing>
 8001e70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 80bf 	bne.w	8001ffe <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 80bb 	bne.w	8001ffe <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e90:	f043 0202 	orr.w	r2, r3, #2
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff35 	bl	8001d0c <LL_ADC_IsEnabled>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ea8:	485d      	ldr	r0, [pc, #372]	@ (8002020 <HAL_ADC_Init+0x278>)
 8001eaa:	f7ff ff2f 	bl	8001d0c <LL_ADC_IsEnabled>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	485a      	ldr	r0, [pc, #360]	@ (8002024 <HAL_ADC_Init+0x27c>)
 8001ebc:	f7ff fd9a 	bl	80019f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7e5b      	ldrb	r3, [r3, #25]
 8001ec4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ed0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ed6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ede:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d106      	bne.n	8001efc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	045b      	lsls	r3, r3, #17
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d009      	beq.n	8001f18 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f08:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	4b42      	ldr	r3, [pc, #264]	@ (8002028 <HAL_ADC_Init+0x280>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff25 	bl	8001d80 <LL_ADC_INJ_IsConversionOngoing>
 8001f36:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d13d      	bne.n	8001fba <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d13a      	bne.n	8001fba <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f48:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f50:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f60:	f023 0302 	bic.w	r3, r3, #2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	69b9      	ldr	r1, [r7, #24]
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d118      	bne.n	8001faa <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f82:	f023 0304 	bic.w	r3, r3, #4
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f94:	4311      	orrs	r1, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	611a      	str	r2, [r3, #16]
 8001fa8:	e007      	b.n	8001fba <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d10c      	bne.n	8001fdc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	f023 010f 	bic.w	r1, r3, #15
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fda:	e007      	b.n	8001fec <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 020f 	bic.w	r2, r2, #15
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff0:	f023 0303 	bic.w	r3, r3, #3
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ffc:	e007      	b.n	800200e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002002:	f043 0210 	orr.w	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800200e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000000 	.word	0x20000000
 800201c:	053e2d63 	.word	0x053e2d63
 8002020:	50040000 	.word	0x50040000
 8002024:	50040300 	.word	0x50040300
 8002028:	fff0c007 	.word	0xfff0c007

0800202c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fe8e 	bl	8001d5a <LL_ADC_REG_IsConversionOngoing>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d14f      	bne.n	80020e4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_ADC_Start+0x26>
 800204e:	2302      	movs	r3, #2
 8002050:	e04b      	b.n	80020ea <HAL_ADC_Start+0xbe>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fe9a 	bl	8002d94 <ADC_Enable>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d137      	bne.n	80020da <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002072:	f023 0301 	bic.w	r3, r3, #1
 8002076:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800208a:	d106      	bne.n	800209a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002090:	f023 0206 	bic.w	r2, r3, #6
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	659a      	str	r2, [r3, #88]	@ 0x58
 8002098:	e002      	b.n	80020a0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	221c      	movs	r2, #28
 80020a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fe2d 	bl	8001d32 <LL_ADC_REG_StartConversion>
 80020d8:	e006      	b.n	80020e8 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80020e2:	e001      	b.n	80020e8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
 80020e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	2b08      	cmp	r3, #8
 8002102:	d102      	bne.n	800210a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002104:	2308      	movs	r3, #8
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	e010      	b.n	800212c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211c:	f043 0220 	orr.w	r2, r3, #32
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e06f      	b.n	8002208 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002128:	2304      	movs	r3, #4
 800212a:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800212c:	f7ff fc32 	bl	8001994 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002132:	e021      	b.n	8002178 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213a:	d01d      	beq.n	8002178 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800213c:	f7ff fc2a 	bl	8001994 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d302      	bcc.n	8002152 <HAL_ADC_PollForConversion+0x60>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d112      	bne.n	8002178 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002164:	f043 0204 	orr.w	r2, r3, #4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e047      	b.n	8002208 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0d6      	beq.n	8002134 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fcb5 	bl	8001b06 <LL_ADC_REG_IsTriggerSourceSWStart>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01c      	beq.n	80021dc <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7e5b      	ldrb	r3, [r3, #25]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d111      	bne.n	80021dc <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d104      	bne.n	80021f4 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2208      	movs	r2, #8
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e008      	b.n	8002206 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b088      	sub	sp, #32
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d017      	beq.n	8002280 <HAL_ADC_IRQHandler+0x56>
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d012      	beq.n	8002280 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d105      	bne.n	8002272 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fe3c 	bl	8002ef0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2202      	movs	r2, #2
 800227e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <HAL_ADC_IRQHandler+0x6a>
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800229a:	2b00      	cmp	r3, #0
 800229c:	d05e      	beq.n	800235c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d059      	beq.n	800235c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fc1e 	bl	8001b06 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d03e      	beq.n	800234e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d135      	bne.n	800234e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d12e      	bne.n	800234e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fd30 	bl	8001d5a <LL_ADC_REG_IsConversionOngoing>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11a      	bne.n	8002336 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 020c 	bic.w	r2, r2, #12
 800230e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002314:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002320:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d112      	bne.n	800234e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232c:	f043 0201 	orr.w	r2, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	655a      	str	r2, [r3, #84]	@ 0x54
 8002334:	e00b      	b.n	800234e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233a:	f043 0210 	orr.w	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002346:	f043 0201 	orr.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f91f 	bl	8002592 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	220c      	movs	r2, #12
 800235a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b00      	cmp	r3, #0
 8002364:	d004      	beq.n	8002370 <HAL_ADC_IRQHandler+0x146>
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d072      	beq.n	8002460 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d06d      	beq.n	8002460 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002394:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fbef 	bl	8001b84 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80023a6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fbaa 	bl	8001b06 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023b2:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d047      	beq.n	8002452 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_ADC_IRQHandler+0x1b2>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d03f      	beq.n	8002452 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d13a      	bne.n	8002452 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e6:	2b40      	cmp	r3, #64	@ 0x40
 80023e8:	d133      	bne.n	8002452 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d12e      	bne.n	8002452 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fcc1 	bl	8001d80 <LL_ADC_INJ_IsConversionOngoing>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d11a      	bne.n	800243a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002412:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002418:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d112      	bne.n	8002452 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	@ 0x54
 8002438:	e00b      	b.n	8002452 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243e:	f043 0210 	orr.w	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fd24 	bl	8002ea0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2260      	movs	r2, #96	@ 0x60
 800245e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002466:	2b00      	cmp	r3, #0
 8002468:	d011      	beq.n	800248e <HAL_ADC_IRQHandler+0x264>
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00c      	beq.n	800248e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002478:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f890 	bl	80025a6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2280      	movs	r2, #128	@ 0x80
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d012      	beq.n	80024be <HAL_ADC_IRQHandler+0x294>
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00d      	beq.n	80024be <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fd0a 	bl	8002ec8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d012      	beq.n	80024ee <HAL_ADC_IRQHandler+0x2c4>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00d      	beq.n	80024ee <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fcfc 	bl	8002edc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d02a      	beq.n	800254e <HAL_ADC_IRQHandler+0x324>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d025      	beq.n	800254e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800250a:	2301      	movs	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	e008      	b.n	8002522 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800251e:	2301      	movs	r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d10e      	bne.n	8002546 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002538:	f043 0202 	orr.w	r2, r3, #2
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f83a 	bl	80025ba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2210      	movs	r2, #16
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d018      	beq.n	800258a <HAL_ADC_IRQHandler+0x360>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255e:	2b00      	cmp	r3, #0
 8002560:	d013      	beq.n	800258a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002566:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	f043 0208 	orr.w	r2, r3, #8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002582:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fc95 	bl	8002eb4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800258a:	bf00      	nop
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b0b6      	sub	sp, #216	@ 0xd8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x22>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e3bb      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x79a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fbab 	bl	8001d5a <LL_ADC_REG_IsConversionOngoing>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 83a0 	bne.w	8002d4c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b05      	cmp	r3, #5
 800261a:	d824      	bhi.n	8002666 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	3b02      	subs	r3, #2
 8002622:	2b03      	cmp	r3, #3
 8002624:	d81b      	bhi.n	800265e <HAL_ADC_ConfigChannel+0x8e>
 8002626:	a201      	add	r2, pc, #4	@ (adr r2, 800262c <HAL_ADC_ConfigChannel+0x5c>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	0800263d 	.word	0x0800263d
 8002630:	08002645 	.word	0x08002645
 8002634:	0800264d 	.word	0x0800264d
 8002638:	08002655 	.word	0x08002655
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800263c:	230c      	movs	r3, #12
 800263e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002642:	e010      	b.n	8002666 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002644:	2312      	movs	r3, #18
 8002646:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800264a:	e00c      	b.n	8002666 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800264c:	2318      	movs	r3, #24
 800264e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002652:	e008      	b.n	8002666 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002654:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800265c:	e003      	b.n	8002666 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800265e:	2306      	movs	r3, #6
 8002660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002664:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002674:	f7ff fa5a 	bl	8001b2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fb6c 	bl	8001d5a <LL_ADC_REG_IsConversionOngoing>
 8002682:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fb78 	bl	8001d80 <LL_ADC_INJ_IsConversionOngoing>
 8002690:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002694:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 81a4 	bne.w	80029e6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800269e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 819f 	bne.w	80029e6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6819      	ldr	r1, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	461a      	mov	r2, r3
 80026b6:	f7ff fa78 	bl	8001baa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	08db      	lsrs	r3, r3, #3
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d00a      	beq.n	80026f2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6919      	ldr	r1, [r3, #16]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ec:	f7ff f9b6 	bl	8001a5c <LL_ADC_SetOffset>
 80026f0:	e179      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff f9d3 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <HAL_ADC_ConfigChannel+0x14e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f9c8 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	0e9b      	lsrs	r3, r3, #26
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	e01e      	b.n	800275c <HAL_ADC_ConfigChannel+0x18c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff f9bd 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800273c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002740:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800274c:	2320      	movs	r3, #32
 800274e:	e004      	b.n	800275a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002750:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1a4>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0e9b      	lsrs	r3, r3, #26
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	e018      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x1d6>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800278c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002790:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002798:	2320      	movs	r3, #32
 800279a:	e004      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800279c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff f98c 	bl	8001ad0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2101      	movs	r1, #1
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f970 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x214>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2101      	movs	r1, #1
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff f965 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	f003 021f 	and.w	r2, r3, #31
 80027e2:	e01e      	b.n	8002822 <HAL_ADC_ConfigChannel+0x252>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff f95a 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002802:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800280a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e004      	b.n	8002820 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <HAL_ADC_ConfigChannel+0x26a>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	0e9b      	lsrs	r3, r3, #26
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	e018      	b.n	800286c <HAL_ADC_ConfigChannel+0x29c>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800284e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002852:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002856:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e004      	b.n	800286c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002862:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800286c:	429a      	cmp	r2, r3
 800286e:	d106      	bne.n	800287e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	2101      	movs	r1, #1
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff f929 	bl	8001ad0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2102      	movs	r1, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f90d 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x2da>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2102      	movs	r1, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f902 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	0e9b      	lsrs	r3, r3, #26
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	e01e      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x318>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2102      	movs	r1, #2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f8f7 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80028c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80028d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e004      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80028dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x330>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	e014      	b.n	800292a <HAL_ADC_ConfigChannel+0x35a>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800290e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002914:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e004      	b.n	800292a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002920:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800292a:	429a      	cmp	r2, r3
 800292c:	d106      	bne.n	800293c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	2102      	movs	r1, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff f8ca 	bl	8001ad0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2103      	movs	r1, #3
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff f8ae 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x398>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2103      	movs	r1, #3
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff f8a3 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	f003 021f 	and.w	r2, r3, #31
 8002966:	e017      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3c8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2103      	movs	r1, #3
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f898 	bl	8001aa4 <LL_ADC_GetOffsetChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002982:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002984:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800298a:	2320      	movs	r3, #32
 800298c:	e003      	b.n	8002996 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800298e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x3e0>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0e9b      	lsrs	r3, r3, #26
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	e011      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x404>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80029be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80029c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e003      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80029cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d106      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2200      	movs	r2, #0
 80029de:	2103      	movs	r1, #3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f875 	bl	8001ad0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f98e 	bl	8001d0c <LL_ADC_IsEnabled>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 8140 	bne.w	8002c78 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	461a      	mov	r2, r3
 8002a06:	f7ff f8fb 	bl	8001c00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4a8f      	ldr	r2, [pc, #572]	@ (8002c4c <HAL_ADC_ConfigChannel+0x67c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	f040 8131 	bne.w	8002c78 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x46e>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	0e9b      	lsrs	r3, r3, #26
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2b09      	cmp	r3, #9
 8002a34:	bf94      	ite	ls
 8002a36:	2301      	movls	r3, #1
 8002a38:	2300      	movhi	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	e019      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x4a2>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e003      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002a5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	3301      	adds	r3, #1
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2b09      	cmp	r3, #9
 8002a6a:	bf94      	ite	ls
 8002a6c:	2301      	movls	r3, #1
 8002a6e:	2300      	movhi	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d079      	beq.n	8002b6a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d107      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x4c2>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0e9b      	lsrs	r3, r3, #26
 8002a88:	3301      	adds	r3, #1
 8002a8a:	069b      	lsls	r3, r3, #26
 8002a8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a90:	e015      	b.n	8002abe <HAL_ADC_ConfigChannel+0x4ee>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aa2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002aaa:	2320      	movs	r3, #32
 8002aac:	e003      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	069b      	lsls	r3, r3, #26
 8002aba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x50e>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	0e9b      	lsrs	r3, r3, #26
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8002adc:	e017      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x53e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002af6:	2320      	movs	r3, #32
 8002af8:	e003      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002afa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	2101      	movs	r1, #1
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	ea42 0103 	orr.w	r1, r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x564>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	0e9b      	lsrs	r3, r3, #26
 8002b24:	3301      	adds	r3, #1
 8002b26:	f003 021f 	and.w	r2, r3, #31
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	051b      	lsls	r3, r3, #20
 8002b32:	e018      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x596>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f003 021f 	and.w	r2, r3, #31
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b66:	430b      	orrs	r3, r1
 8002b68:	e081      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d107      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x5b6>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	069b      	lsls	r3, r3, #26
 8002b80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b84:	e015      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x5e2>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	e003      	b.n	8002baa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	3301      	adds	r3, #1
 8002bac:	069b      	lsls	r3, r3, #26
 8002bae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x602>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	0e9b      	lsrs	r3, r3, #26
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	e017      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x632>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	61bb      	str	r3, [r7, #24]
  return result;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e003      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	ea42 0103 	orr.w	r1, r2, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10d      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x65e>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0e9b      	lsrs	r3, r3, #26
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	3b1e      	subs	r3, #30
 8002c26:	051b      	lsls	r3, r3, #20
 8002c28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c2c:	e01e      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x69c>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	60fb      	str	r3, [r7, #12]
  return result;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d104      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002c46:	2320      	movs	r3, #32
 8002c48:	e006      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x688>
 8002c4a:	bf00      	nop
 8002c4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f003 021f 	and.w	r2, r3, #31
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	3b1e      	subs	r3, #30
 8002c66:	051b      	lsls	r3, r3, #20
 8002c68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c6c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7fe ff99 	bl	8001baa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d74 <HAL_ADC_ConfigChannel+0x7a4>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d06c      	beq.n	8002d5e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c84:	483c      	ldr	r0, [pc, #240]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7a8>)
 8002c86:	f7fe fedb 	bl	8001a40 <LL_ADC_GetCommonPathInternalCh>
 8002c8a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a3a      	ldr	r2, [pc, #232]	@ (8002d7c <HAL_ADC_ConfigChannel+0x7ac>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d127      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d121      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a35      	ldr	r2, [pc, #212]	@ (8002d80 <HAL_ADC_ConfigChannel+0x7b0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d157      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	482f      	ldr	r0, [pc, #188]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7a8>)
 8002cba:	f7fe feae 	bl	8001a1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cbe:	4b31      	ldr	r3, [pc, #196]	@ (8002d84 <HAL_ADC_ConfigChannel+0x7b4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	4a30      	ldr	r2, [pc, #192]	@ (8002d88 <HAL_ADC_ConfigChannel+0x7b8>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	099b      	lsrs	r3, r3, #6
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cd8:	e002      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f9      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ce6:	e03a      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a27      	ldr	r2, [pc, #156]	@ (8002d8c <HAL_ADC_ConfigChannel+0x7bc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d113      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10d      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1f      	ldr	r2, [pc, #124]	@ (8002d80 <HAL_ADC_ConfigChannel+0x7b0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d12a      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d10:	4619      	mov	r1, r3
 8002d12:	4819      	ldr	r0, [pc, #100]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7a8>)
 8002d14:	f7fe fe81 	bl	8001a1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d18:	e021      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d11c      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d116      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a12      	ldr	r2, [pc, #72]	@ (8002d80 <HAL_ADC_ConfigChannel+0x7b0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d111      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d42:	4619      	mov	r1, r3
 8002d44:	480c      	ldr	r0, [pc, #48]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7a8>)
 8002d46:	f7fe fe68 	bl	8001a1a <LL_ADC_SetCommonPathInternalCh>
 8002d4a:	e008      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d66:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	37d8      	adds	r7, #216	@ 0xd8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	80080000 	.word	0x80080000
 8002d78:	50040300 	.word	0x50040300
 8002d7c:	c7520000 	.word	0xc7520000
 8002d80:	50040000 	.word	0x50040000
 8002d84:	20000000 	.word	0x20000000
 8002d88:	053e2d63 	.word	0x053e2d63
 8002d8c:	cb840000 	.word	0xcb840000
 8002d90:	80000001 	.word	0x80000001

08002d94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe ffb1 	bl	8001d0c <LL_ADC_IsEnabled>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d169      	bne.n	8002e84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	4b36      	ldr	r3, [pc, #216]	@ (8002e90 <ADC_Enable+0xfc>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e055      	b.n	8002e86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe ff80 	bl	8001ce4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002de4:	482b      	ldr	r0, [pc, #172]	@ (8002e94 <ADC_Enable+0x100>)
 8002de6:	f7fe fe2b 	bl	8001a40 <LL_ADC_GetCommonPathInternalCh>
 8002dea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002dec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df4:	4b28      	ldr	r3, [pc, #160]	@ (8002e98 <ADC_Enable+0x104>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	4a28      	ldr	r2, [pc, #160]	@ (8002e9c <ADC_Enable+0x108>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e0e:	e002      	b.n	8002e16 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f9      	bne.n	8002e10 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe fdba 	bl	8001994 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e22:	e028      	b.n	8002e76 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe ff6f 	bl	8001d0c <LL_ADC_IsEnabled>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d104      	bne.n	8002e3e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe ff53 	bl	8001ce4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e3e:	f7fe fda9 	bl	8001994 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d914      	bls.n	8002e76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d00d      	beq.n	8002e76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5e:	f043 0210 	orr.w	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6a:	f043 0201 	orr.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e007      	b.n	8002e86 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d1cf      	bne.n	8002e24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	8000003f 	.word	0x8000003f
 8002e94:	50040300 	.word	0x50040300
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	053e2d63 	.word	0x053e2d63

08002ea0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f14:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f36:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60d3      	str	r3, [r2, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f50:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <__NVIC_GetPriorityGrouping+0x18>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 0307 	and.w	r3, r3, #7
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db0b      	blt.n	8002f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	f003 021f 	and.w	r2, r3, #31
 8002f80:	4907      	ldr	r1, [pc, #28]	@ (8002fa0 <__NVIC_EnableIRQ+0x38>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2001      	movs	r0, #1
 8002f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100

08002fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	6039      	str	r1, [r7, #0]
 8002fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	db0a      	blt.n	8002fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	490c      	ldr	r1, [pc, #48]	@ (8002ff0 <__NVIC_SetPriority+0x4c>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fcc:	e00a      	b.n	8002fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4908      	ldr	r1, [pc, #32]	@ (8002ff4 <__NVIC_SetPriority+0x50>)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3b04      	subs	r3, #4
 8002fdc:	0112      	lsls	r2, r2, #4
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	761a      	strb	r2, [r3, #24]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000e100 	.word	0xe000e100
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	@ 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f1c3 0307 	rsb	r3, r3, #7
 8003012:	2b04      	cmp	r3, #4
 8003014:	bf28      	it	cs
 8003016:	2304      	movcs	r3, #4
 8003018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3304      	adds	r3, #4
 800301e:	2b06      	cmp	r3, #6
 8003020:	d902      	bls.n	8003028 <NVIC_EncodePriority+0x30>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3b03      	subs	r3, #3
 8003026:	e000      	b.n	800302a <NVIC_EncodePriority+0x32>
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	f04f 32ff 	mov.w	r2, #4294967295
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	401a      	ands	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003040:	f04f 31ff 	mov.w	r1, #4294967295
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	43d9      	mvns	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	4313      	orrs	r3, r2
         );
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	@ 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003070:	d301      	bcc.n	8003076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003072:	2301      	movs	r3, #1
 8003074:	e00f      	b.n	8003096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003076:	4a0a      	ldr	r2, [pc, #40]	@ (80030a0 <SysTick_Config+0x40>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307e:	210f      	movs	r1, #15
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	f7ff ff8e 	bl	8002fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003088:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <SysTick_Config+0x40>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308e:	4b04      	ldr	r3, [pc, #16]	@ (80030a0 <SysTick_Config+0x40>)
 8003090:	2207      	movs	r2, #7
 8003092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	e000e010 	.word	0xe000e010

080030a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff29 	bl	8002f04 <__NVIC_SetPriorityGrouping>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030cc:	f7ff ff3e 	bl	8002f4c <__NVIC_GetPriorityGrouping>
 80030d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	6978      	ldr	r0, [r7, #20]
 80030d8:	f7ff ff8e 	bl	8002ff8 <NVIC_EncodePriority>
 80030dc:	4602      	mov	r2, r0
 80030de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff5d 	bl	8002fa4 <__NVIC_SetPriority>
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff31 	bl	8002f68 <__NVIC_EnableIRQ>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ffa2 	bl	8003060 <SysTick_Config>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003136:	e148      	b.n	80033ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	2101      	movs	r1, #1
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	fa01 f303 	lsl.w	r3, r1, r3
 8003144:	4013      	ands	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 813a 	beq.w	80033c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b01      	cmp	r3, #1
 800315a:	d005      	beq.n	8003168 <HAL_GPIO_Init+0x40>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d130      	bne.n	80031ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	2203      	movs	r2, #3
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800319e:	2201      	movs	r2, #1
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	f003 0201 	and.w	r2, r3, #1
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d017      	beq.n	8003206 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	2203      	movs	r2, #3
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d123      	bne.n	800325a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	08da      	lsrs	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3208      	adds	r2, #8
 800321a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	220f      	movs	r2, #15
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	08da      	lsrs	r2, r3, #3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3208      	adds	r2, #8
 8003254:	6939      	ldr	r1, [r7, #16]
 8003256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	2203      	movs	r2, #3
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 0203 	and.w	r2, r3, #3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8094 	beq.w	80033c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329c:	4b52      	ldr	r3, [pc, #328]	@ (80033e8 <HAL_GPIO_Init+0x2c0>)
 800329e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a0:	4a51      	ldr	r2, [pc, #324]	@ (80033e8 <HAL_GPIO_Init+0x2c0>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80032a8:	4b4f      	ldr	r3, [pc, #316]	@ (80033e8 <HAL_GPIO_Init+0x2c0>)
 80032aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032b4:	4a4d      	ldr	r2, [pc, #308]	@ (80033ec <HAL_GPIO_Init+0x2c4>)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	089b      	lsrs	r3, r3, #2
 80032ba:	3302      	adds	r3, #2
 80032bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	220f      	movs	r2, #15
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032de:	d00d      	beq.n	80032fc <HAL_GPIO_Init+0x1d4>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a43      	ldr	r2, [pc, #268]	@ (80033f0 <HAL_GPIO_Init+0x2c8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d007      	beq.n	80032f8 <HAL_GPIO_Init+0x1d0>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a42      	ldr	r2, [pc, #264]	@ (80033f4 <HAL_GPIO_Init+0x2cc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <HAL_GPIO_Init+0x1cc>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e004      	b.n	80032fe <HAL_GPIO_Init+0x1d6>
 80032f4:	2307      	movs	r3, #7
 80032f6:	e002      	b.n	80032fe <HAL_GPIO_Init+0x1d6>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <HAL_GPIO_Init+0x1d6>
 80032fc:	2300      	movs	r3, #0
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	f002 0203 	and.w	r2, r2, #3
 8003304:	0092      	lsls	r2, r2, #2
 8003306:	4093      	lsls	r3, r2
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800330e:	4937      	ldr	r1, [pc, #220]	@ (80033ec <HAL_GPIO_Init+0x2c4>)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	3302      	adds	r3, #2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800331c:	4b36      	ldr	r3, [pc, #216]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	43db      	mvns	r3, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003340:	4a2d      	ldr	r2, [pc, #180]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003346:	4b2c      	ldr	r3, [pc, #176]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800336a:	4a23      	ldr	r2, [pc, #140]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003370:	4b21      	ldr	r3, [pc, #132]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	43db      	mvns	r3, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4013      	ands	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003394:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800339a:	4b17      	ldr	r3, [pc, #92]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033be:	4a0e      	ldr	r2, [pc, #56]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f47f aeaf 	bne.w	8003138 <HAL_GPIO_Init+0x10>
  }
}
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40010000 	.word	0x40010000
 80033f0:	48000400 	.word	0x48000400
 80033f4:	48000800 	.word	0x48000800
 80033f8:	40010400 	.word	0x40010400

080033fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]
 8003408:	4613      	mov	r3, r2
 800340a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800340c:	787b      	ldrb	r3, [r7, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003418:	e002      	b.n	8003420 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40007000 	.word	0x40007000

0800344c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003450:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <HAL_PWREx_GetVoltageRange+0x18>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40007000 	.word	0x40007000

08003468 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003476:	d130      	bne.n	80034da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003478:	4b23      	ldr	r3, [pc, #140]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003484:	d038      	beq.n	80034f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003486:	4b20      	ldr	r3, [pc, #128]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800348e:	4a1e      	ldr	r2, [pc, #120]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003490:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003494:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003496:	4b1d      	ldr	r3, [pc, #116]	@ (800350c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2232      	movs	r2, #50	@ 0x32
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	0c9b      	lsrs	r3, r3, #18
 80034a8:	3301      	adds	r3, #1
 80034aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034ac:	e002      	b.n	80034b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034b4:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c0:	d102      	bne.n	80034c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f2      	bne.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d4:	d110      	bne.n	80034f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034da:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e6:	d007      	beq.n	80034f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034e8:	4b07      	ldr	r3, [pc, #28]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034f0:	4a05      	ldr	r2, [pc, #20]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40007000 	.word	0x40007000
 800350c:	20000000 	.word	0x20000000
 8003510:	431bde83 	.word	0x431bde83

08003514 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f000 bc02 	b.w	8003d2c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003528:	4b96      	ldr	r3, [pc, #600]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003532:	4b94      	ldr	r3, [pc, #592]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80e4 	beq.w	8003712 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_RCC_OscConfig+0x4c>
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2b0c      	cmp	r3, #12
 8003554:	f040 808b 	bne.w	800366e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b01      	cmp	r3, #1
 800355c:	f040 8087 	bne.w	800366e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003560:	4b88      	ldr	r3, [pc, #544]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_OscConfig+0x64>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e3d9      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	4b81      	ldr	r3, [pc, #516]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d004      	beq.n	8003592 <HAL_RCC_OscConfig+0x7e>
 8003588:	4b7e      	ldr	r3, [pc, #504]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003590:	e005      	b.n	800359e <HAL_RCC_OscConfig+0x8a>
 8003592:	4b7c      	ldr	r3, [pc, #496]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800359e:	4293      	cmp	r3, r2
 80035a0:	d223      	bcs.n	80035ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fd8c 	bl	80040c4 <RCC_SetFlashLatencyFromMSIRange>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e3ba      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b6:	4b73      	ldr	r3, [pc, #460]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a72      	ldr	r2, [pc, #456]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80035bc:	f043 0308 	orr.w	r3, r3, #8
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b70      	ldr	r3, [pc, #448]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	496d      	ldr	r1, [pc, #436]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	4968      	ldr	r1, [pc, #416]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
 80035e8:	e025      	b.n	8003636 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ea:	4b66      	ldr	r3, [pc, #408]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a65      	ldr	r2, [pc, #404]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80035f0:	f043 0308 	orr.w	r3, r3, #8
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	4b63      	ldr	r3, [pc, #396]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4960      	ldr	r1, [pc, #384]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003604:	4313      	orrs	r3, r2
 8003606:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003608:	4b5e      	ldr	r3, [pc, #376]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	495b      	ldr	r1, [pc, #364]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fd4c 	bl	80040c4 <RCC_SetFlashLatencyFromMSIRange>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e37a      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003636:	f000 fc81 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b51      	ldr	r3, [pc, #324]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	4950      	ldr	r1, [pc, #320]	@ (8003788 <HAL_RCC_OscConfig+0x274>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	fa22 f303 	lsr.w	r3, r2, r3
 8003652:	4a4e      	ldr	r2, [pc, #312]	@ (800378c <HAL_RCC_OscConfig+0x278>)
 8003654:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003656:	4b4e      	ldr	r3, [pc, #312]	@ (8003790 <HAL_RCC_OscConfig+0x27c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe f94a 	bl	80018f4 <HAL_InitTick>
 8003660:	4603      	mov	r3, r0
 8003662:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d052      	beq.n	8003710 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	e35e      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d032      	beq.n	80036dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003676:	4b43      	ldr	r3, [pc, #268]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a42      	ldr	r2, [pc, #264]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003682:	f7fe f987 	bl	8001994 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800368a:	f7fe f983 	bl	8001994 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e347      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800369c:	4b39      	ldr	r3, [pc, #228]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a8:	4b36      	ldr	r3, [pc, #216]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a35      	ldr	r2, [pc, #212]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80036ae:	f043 0308 	orr.w	r3, r3, #8
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	4b33      	ldr	r3, [pc, #204]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4930      	ldr	r1, [pc, #192]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	492b      	ldr	r1, [pc, #172]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	604b      	str	r3, [r1, #4]
 80036da:	e01a      	b.n	8003712 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036dc:	4b29      	ldr	r3, [pc, #164]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a28      	ldr	r2, [pc, #160]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036e8:	f7fe f954 	bl	8001994 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036f0:	f7fe f950 	bl	8001994 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e314      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003702:	4b20      	ldr	r3, [pc, #128]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x1dc>
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003710:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d073      	beq.n	8003806 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d005      	beq.n	8003730 <HAL_RCC_OscConfig+0x21c>
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b0c      	cmp	r3, #12
 8003728:	d10e      	bne.n	8003748 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d10b      	bne.n	8003748 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	4b14      	ldr	r3, [pc, #80]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d063      	beq.n	8003804 <HAL_RCC_OscConfig+0x2f0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d15f      	bne.n	8003804 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e2f1      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003750:	d106      	bne.n	8003760 <HAL_RCC_OscConfig+0x24c>
 8003752:	4b0c      	ldr	r3, [pc, #48]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a0b      	ldr	r2, [pc, #44]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e025      	b.n	80037ac <HAL_RCC_OscConfig+0x298>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003768:	d114      	bne.n	8003794 <HAL_RCC_OscConfig+0x280>
 800376a:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a05      	ldr	r2, [pc, #20]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b03      	ldr	r3, [pc, #12]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a02      	ldr	r2, [pc, #8]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e013      	b.n	80037ac <HAL_RCC_OscConfig+0x298>
 8003784:	40021000 	.word	0x40021000
 8003788:	08007ec8 	.word	0x08007ec8
 800378c:	20000000 	.word	0x20000000
 8003790:	20000004 	.word	0x20000004
 8003794:	4ba0      	ldr	r3, [pc, #640]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a9f      	ldr	r2, [pc, #636]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 800379a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b9d      	ldr	r3, [pc, #628]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a9c      	ldr	r2, [pc, #624]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80037a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe f8ee 	bl	8001994 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fe f8ea 	bl	8001994 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	@ 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e2ae      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ce:	4b92      	ldr	r3, [pc, #584]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x2a8>
 80037da:	e014      	b.n	8003806 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fe f8da 	bl	8001994 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fe f8d6 	bl	8001994 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	@ 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e29a      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037f6:	4b88      	ldr	r3, [pc, #544]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2d0>
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d060      	beq.n	80038d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b04      	cmp	r3, #4
 8003816:	d005      	beq.n	8003824 <HAL_RCC_OscConfig+0x310>
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b0c      	cmp	r3, #12
 800381c:	d119      	bne.n	8003852 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d116      	bne.n	8003852 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003824:	4b7c      	ldr	r3, [pc, #496]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_OscConfig+0x328>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e277      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383c:	4b76      	ldr	r3, [pc, #472]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	4973      	ldr	r1, [pc, #460]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003850:	e040      	b.n	80038d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d023      	beq.n	80038a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800385a:	4b6f      	ldr	r3, [pc, #444]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6e      	ldr	r2, [pc, #440]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 8003860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fe f895 	bl	8001994 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386e:	f7fe f891 	bl	8001994 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e255      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003880:	4b65      	ldr	r3, [pc, #404]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388c:	4b62      	ldr	r3, [pc, #392]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	495f      	ldr	r1, [pc, #380]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
 80038a0:	e018      	b.n	80038d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80038a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fe f871 	bl	8001994 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b6:	f7fe f86d 	bl	8001994 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e231      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c8:	4b53      	ldr	r3, [pc, #332]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f0      	bne.n	80038b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d03c      	beq.n	800395a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01c      	beq.n	8003922 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80038ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fe f84c 	bl	8001994 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003900:	f7fe f848 	bl	8001994 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e20c      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003912:	4b41      	ldr	r3, [pc, #260]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 8003914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ef      	beq.n	8003900 <HAL_RCC_OscConfig+0x3ec>
 8003920:	e01b      	b.n	800395a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003922:	4b3d      	ldr	r3, [pc, #244]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 8003924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003928:	4a3b      	ldr	r2, [pc, #236]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fe f82f 	bl	8001994 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393a:	f7fe f82b 	bl	8001994 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e1ef      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800394c:	4b32      	ldr	r3, [pc, #200]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 800394e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1ef      	bne.n	800393a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80a6 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003968:	2300      	movs	r3, #0
 800396a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800396c:	4b2a      	ldr	r3, [pc, #168]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10d      	bne.n	8003994 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003978:	4b27      	ldr	r3, [pc, #156]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397c:	4a26      	ldr	r2, [pc, #152]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 800397e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003982:	6593      	str	r3, [r2, #88]	@ 0x58
 8003984:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003990:	2301      	movs	r3, #1
 8003992:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003994:	4b21      	ldr	r3, [pc, #132]	@ (8003a1c <HAL_RCC_OscConfig+0x508>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d118      	bne.n	80039d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039a0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a1c <HAL_RCC_OscConfig+0x508>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a1c <HAL_RCC_OscConfig+0x508>)
 80039a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ac:	f7fd fff2 	bl	8001994 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b4:	f7fd ffee 	bl	8001994 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1b2      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c6:	4b15      	ldr	r3, [pc, #84]	@ (8003a1c <HAL_RCC_OscConfig+0x508>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d108      	bne.n	80039ec <HAL_RCC_OscConfig+0x4d8>
 80039da:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039ea:	e029      	b.n	8003a40 <HAL_RCC_OscConfig+0x52c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d115      	bne.n	8003a20 <HAL_RCC_OscConfig+0x50c>
 80039f4:	4b08      	ldr	r3, [pc, #32]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fa:	4a07      	ldr	r2, [pc, #28]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a04:	4b04      	ldr	r3, [pc, #16]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0a:	4a03      	ldr	r2, [pc, #12]	@ (8003a18 <HAL_RCC_OscConfig+0x504>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a14:	e014      	b.n	8003a40 <HAL_RCC_OscConfig+0x52c>
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	4b9a      	ldr	r3, [pc, #616]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a26:	4a99      	ldr	r2, [pc, #612]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a30:	4b96      	ldr	r3, [pc, #600]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a36:	4a95      	ldr	r2, [pc, #596]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d016      	beq.n	8003a76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a48:	f7fd ffa4 	bl	8001994 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a50:	f7fd ffa0 	bl	8001994 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e162      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a66:	4b89      	ldr	r3, [pc, #548]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ed      	beq.n	8003a50 <HAL_RCC_OscConfig+0x53c>
 8003a74:	e015      	b.n	8003aa2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fd ff8d 	bl	8001994 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd ff89 	bl	8001994 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e14b      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a94:	4b7d      	ldr	r3, [pc, #500]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1ed      	bne.n	8003a7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa2:	7ffb      	ldrb	r3, [r7, #31]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa8:	4b78      	ldr	r3, [pc, #480]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aac:	4a77      	ldr	r2, [pc, #476]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d03c      	beq.n	8003b3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01c      	beq.n	8003b02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ac8:	4b70      	ldr	r3, [pc, #448]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ace:	4a6f      	ldr	r2, [pc, #444]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fd ff5c 	bl	8001994 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ae0:	f7fd ff58 	bl	8001994 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e11c      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003af2:	4b66      	ldr	r3, [pc, #408]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ef      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x5cc>
 8003b00:	e01b      	b.n	8003b3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b02:	4b62      	ldr	r3, [pc, #392]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b08:	4a60      	ldr	r2, [pc, #384]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b12:	f7fd ff3f 	bl	8001994 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b1a:	f7fd ff3b 	bl	8001994 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e0ff      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b2c:	4b57      	ldr	r3, [pc, #348]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1ef      	bne.n	8003b1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80f3 	beq.w	8003d2a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	f040 80c9 	bne.w	8003ce0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f003 0203 	and.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d12c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d123      	bne.n	8003bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d11b      	bne.n	8003bbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d113      	bne.n	8003bbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d109      	bne.n	8003bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d06b      	beq.n	8003c94 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d062      	beq.n	8003c88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bc2:	4b32      	ldr	r3, [pc, #200]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e0ac      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003bd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bdc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bde:	f7fd fed9 	bl	8001994 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fd fed5 	bl	8001994 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e099      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf8:	4b24      	ldr	r3, [pc, #144]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c04:	4b21      	ldr	r3, [pc, #132]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	4b21      	ldr	r3, [pc, #132]	@ (8003c90 <HAL_RCC_OscConfig+0x77c>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c14:	3a01      	subs	r2, #1
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	4311      	orrs	r1, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c1e:	0212      	lsls	r2, r2, #8
 8003c20:	4311      	orrs	r1, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c26:	0852      	lsrs	r2, r2, #1
 8003c28:	3a01      	subs	r2, #1
 8003c2a:	0552      	lsls	r2, r2, #21
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c32:	0852      	lsrs	r2, r2, #1
 8003c34:	3a01      	subs	r2, #1
 8003c36:	0652      	lsls	r2, r2, #25
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c3e:	06d2      	lsls	r2, r2, #27
 8003c40:	430a      	orrs	r2, r1
 8003c42:	4912      	ldr	r1, [pc, #72]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c48:	4b10      	ldr	r3, [pc, #64]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003c4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c54:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4a0c      	ldr	r2, [pc, #48]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003c5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c60:	f7fd fe98 	bl	8001994 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fd fe94 	bl	8001994 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e058      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7a:	4b04      	ldr	r3, [pc, #16]	@ (8003c8c <HAL_RCC_OscConfig+0x778>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c86:	e050      	b.n	8003d2a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e04f      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c94:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <HAL_RCC_OscConfig+0x820>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d144      	bne.n	8003d2a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ca0:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <HAL_RCC_OscConfig+0x820>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	@ (8003d34 <HAL_RCC_OscConfig+0x820>)
 8003ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003caa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cac:	4b21      	ldr	r3, [pc, #132]	@ (8003d34 <HAL_RCC_OscConfig+0x820>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a20      	ldr	r2, [pc, #128]	@ (8003d34 <HAL_RCC_OscConfig+0x820>)
 8003cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cb8:	f7fd fe6c 	bl	8001994 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fd fe68 	bl	8001994 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e02c      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd2:	4b18      	ldr	r3, [pc, #96]	@ (8003d34 <HAL_RCC_OscConfig+0x820>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x7ac>
 8003cde:	e024      	b.n	8003d2a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d01f      	beq.n	8003d26 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce6:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <HAL_RCC_OscConfig+0x820>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a12      	ldr	r2, [pc, #72]	@ (8003d34 <HAL_RCC_OscConfig+0x820>)
 8003cec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fd fe4f 	bl	8001994 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfa:	f7fd fe4b 	bl	8001994 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e00f      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0c:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <HAL_RCC_OscConfig+0x820>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f0      	bne.n	8003cfa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d18:	4b06      	ldr	r3, [pc, #24]	@ (8003d34 <HAL_RCC_OscConfig+0x820>)
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	4905      	ldr	r1, [pc, #20]	@ (8003d34 <HAL_RCC_OscConfig+0x820>)
 8003d1e:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_RCC_OscConfig+0x824>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	60cb      	str	r3, [r1, #12]
 8003d24:	e001      	b.n	8003d2a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	feeefffc 	.word	0xfeeefffc

08003d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0e7      	b.n	8003f20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d50:	4b75      	ldr	r3, [pc, #468]	@ (8003f28 <HAL_RCC_ClockConfig+0x1ec>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d910      	bls.n	8003d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b72      	ldr	r3, [pc, #456]	@ (8003f28 <HAL_RCC_ClockConfig+0x1ec>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 0207 	bic.w	r2, r3, #7
 8003d66:	4970      	ldr	r1, [pc, #448]	@ (8003f28 <HAL_RCC_ClockConfig+0x1ec>)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8003f28 <HAL_RCC_ClockConfig+0x1ec>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0cf      	b.n	8003f20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d010      	beq.n	8003dae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	4b66      	ldr	r3, [pc, #408]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d908      	bls.n	8003dae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d9c:	4b63      	ldr	r3, [pc, #396]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4960      	ldr	r1, [pc, #384]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d04c      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d121      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e0a6      	b.n	8003f20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dda:	4b54      	ldr	r3, [pc, #336]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d115      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e09a      	b.n	8003f20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003df2:	4b4e      	ldr	r3, [pc, #312]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e08e      	b.n	8003f20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e02:	4b4a      	ldr	r3, [pc, #296]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e086      	b.n	8003f20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e12:	4b46      	ldr	r3, [pc, #280]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 0203 	bic.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4943      	ldr	r1, [pc, #268]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e24:	f7fd fdb6 	bl	8001994 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2c:	f7fd fdb2 	bl	8001994 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e06e      	b.n	8003f20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	4b3a      	ldr	r3, [pc, #232]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 020c 	and.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1eb      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d010      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	4b31      	ldr	r3, [pc, #196]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d208      	bcs.n	8003e82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e70:	4b2e      	ldr	r3, [pc, #184]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	492b      	ldr	r1, [pc, #172]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e82:	4b29      	ldr	r3, [pc, #164]	@ (8003f28 <HAL_RCC_ClockConfig+0x1ec>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d210      	bcs.n	8003eb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e90:	4b25      	ldr	r3, [pc, #148]	@ (8003f28 <HAL_RCC_ClockConfig+0x1ec>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 0207 	bic.w	r2, r3, #7
 8003e98:	4923      	ldr	r1, [pc, #140]	@ (8003f28 <HAL_RCC_ClockConfig+0x1ec>)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea0:	4b21      	ldr	r3, [pc, #132]	@ (8003f28 <HAL_RCC_ClockConfig+0x1ec>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d001      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e036      	b.n	8003f20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	4918      	ldr	r1, [pc, #96]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003edc:	4b13      	ldr	r3, [pc, #76]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4910      	ldr	r1, [pc, #64]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ef0:	f000 f824 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <HAL_RCC_ClockConfig+0x1f0>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	490b      	ldr	r1, [pc, #44]	@ (8003f30 <HAL_RCC_ClockConfig+0x1f4>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0c:	4a09      	ldr	r2, [pc, #36]	@ (8003f34 <HAL_RCC_ClockConfig+0x1f8>)
 8003f0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f10:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <HAL_RCC_ClockConfig+0x1fc>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fd fced 	bl	80018f4 <HAL_InitTick>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40022000 	.word	0x40022000
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	08007ec8 	.word	0x08007ec8
 8003f34:	20000000 	.word	0x20000000
 8003f38:	20000004 	.word	0x20000004

08003f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	@ 0x24
 8003f40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	2300      	movs	r3, #0
 8003f48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f54:	4b3b      	ldr	r3, [pc, #236]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x34>
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d121      	bne.n	8003fae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d11e      	bne.n	8003fae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f70:	4b34      	ldr	r3, [pc, #208]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f7c:	4b31      	ldr	r3, [pc, #196]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	e005      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f98:	4a2b      	ldr	r2, [pc, #172]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10d      	bne.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d102      	bne.n	8003fba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fb4:	4b25      	ldr	r3, [pc, #148]	@ (800404c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	e004      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fc0:	4b23      	ldr	r3, [pc, #140]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b0c      	cmp	r3, #12
 8003fc8:	d134      	bne.n	8004034 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fca:	4b1e      	ldr	r3, [pc, #120]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d003      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0xac>
 8003fe0:	e005      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800404c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fe4:	617b      	str	r3, [r7, #20]
      break;
 8003fe6:	e005      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fe8:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fea:	617b      	str	r3, [r7, #20]
      break;
 8003fec:	e002      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	617b      	str	r3, [r7, #20]
      break;
 8003ff2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ff4:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	3301      	adds	r3, #1
 8004000:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004002:	4b10      	ldr	r3, [pc, #64]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x108>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	fb03 f202 	mul.w	r2, r3, r2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800401a:	4b0a      	ldr	r3, [pc, #40]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x108>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	0e5b      	lsrs	r3, r3, #25
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	3301      	adds	r3, #1
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004034:	69bb      	ldr	r3, [r7, #24]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3724      	adds	r7, #36	@ 0x24
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000
 8004048:	08007ee0 	.word	0x08007ee0
 800404c:	00f42400 	.word	0x00f42400
 8004050:	007a1200 	.word	0x007a1200

08004054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004058:	4b03      	ldr	r3, [pc, #12]	@ (8004068 <HAL_RCC_GetHCLKFreq+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000000 	.word	0x20000000

0800406c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004070:	f7ff fff0 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 8004074:	4602      	mov	r2, r0
 8004076:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4904      	ldr	r1, [pc, #16]	@ (8004094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004082:	5ccb      	ldrb	r3, [r1, r3]
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	08007ed8 	.word	0x08007ed8

08004098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800409c:	f7ff ffda 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b06      	ldr	r3, [pc, #24]	@ (80040bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0adb      	lsrs	r3, r3, #11
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4904      	ldr	r1, [pc, #16]	@ (80040c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	08007ed8 	.word	0x08007ed8

080040c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040d0:	4b2a      	ldr	r3, [pc, #168]	@ (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040dc:	f7ff f9b6 	bl	800344c <HAL_PWREx_GetVoltageRange>
 80040e0:	6178      	str	r0, [r7, #20]
 80040e2:	e014      	b.n	800410e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	4b25      	ldr	r3, [pc, #148]	@ (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e8:	4a24      	ldr	r2, [pc, #144]	@ (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f0:	4b22      	ldr	r3, [pc, #136]	@ (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040fc:	f7ff f9a6 	bl	800344c <HAL_PWREx_GetVoltageRange>
 8004100:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004102:	4b1e      	ldr	r3, [pc, #120]	@ (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004106:	4a1d      	ldr	r2, [pc, #116]	@ (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800410c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004114:	d10b      	bne.n	800412e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b80      	cmp	r3, #128	@ 0x80
 800411a:	d919      	bls.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004120:	d902      	bls.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004122:	2302      	movs	r3, #2
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	e013      	b.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004128:	2301      	movs	r3, #1
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	e010      	b.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b80      	cmp	r3, #128	@ 0x80
 8004132:	d902      	bls.n	800413a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004134:	2303      	movs	r3, #3
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	e00a      	b.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b80      	cmp	r3, #128	@ 0x80
 800413e:	d102      	bne.n	8004146 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004140:	2302      	movs	r3, #2
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	e004      	b.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b70      	cmp	r3, #112	@ 0x70
 800414a:	d101      	bne.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800414c:	2301      	movs	r3, #1
 800414e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004150:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 0207 	bic.w	r2, r3, #7
 8004158:	4909      	ldr	r1, [pc, #36]	@ (8004180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004160:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	429a      	cmp	r2, r3
 800416c:	d001      	beq.n	8004172 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	40022000 	.word	0x40022000

08004184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800418c:	2300      	movs	r3, #0
 800418e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004190:	2300      	movs	r3, #0
 8004192:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800419c:	2b00      	cmp	r3, #0
 800419e:	d031      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041a8:	d01a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80041aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041ae:	d814      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041b8:	d10f      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80041ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	4a5c      	ldr	r2, [pc, #368]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041c6:	e00c      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f9de 	bl	8004590 <RCCEx_PLLSAI1_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d8:	e003      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	74fb      	strb	r3, [r7, #19]
      break;
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80041e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e8:	4b51      	ldr	r3, [pc, #324]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f6:	494e      	ldr	r1, [pc, #312]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041fe:	e001      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 809e 	beq.w	800434e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004212:	2300      	movs	r3, #0
 8004214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004216:	4b46      	ldr	r3, [pc, #280]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00d      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422c:	4b40      	ldr	r3, [pc, #256]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004230:	4a3f      	ldr	r2, [pc, #252]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004236:	6593      	str	r3, [r2, #88]	@ 0x58
 8004238:	4b3d      	ldr	r3, [pc, #244]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004244:	2301      	movs	r3, #1
 8004246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004248:	4b3a      	ldr	r3, [pc, #232]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a39      	ldr	r2, [pc, #228]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800424e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004254:	f7fd fb9e 	bl	8001994 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800425a:	e009      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425c:	f7fd fb9a 	bl	8001994 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d902      	bls.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	74fb      	strb	r3, [r7, #19]
        break;
 800426e:	e005      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004270:	4b30      	ldr	r3, [pc, #192]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ef      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d15a      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004282:	4b2b      	ldr	r3, [pc, #172]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004288:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01e      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	429a      	cmp	r2, r3
 800429c:	d019      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800429e:	4b24      	ldr	r3, [pc, #144]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042aa:	4b21      	ldr	r3, [pc, #132]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042ca:	4a19      	ldr	r2, [pc, #100]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d016      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd fb5a 	bl	8001994 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e2:	e00b      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e4:	f7fd fb56 	bl	8001994 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d902      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	74fb      	strb	r3, [r7, #19]
            break;
 80042fa:	e006      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0ec      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10b      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004310:	4b07      	ldr	r3, [pc, #28]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004316:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431e:	4904      	ldr	r1, [pc, #16]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004326:	e009      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	74bb      	strb	r3, [r7, #18]
 800432c:	e006      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000
 8004334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	7cfb      	ldrb	r3, [r7, #19]
 800433a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800433c:	7c7b      	ldrb	r3, [r7, #17]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d105      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004342:	4b8a      	ldr	r3, [pc, #552]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004346:	4a89      	ldr	r2, [pc, #548]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004348:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800435a:	4b84      	ldr	r3, [pc, #528]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004360:	f023 0203 	bic.w	r2, r3, #3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4980      	ldr	r1, [pc, #512]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800437c:	4b7b      	ldr	r3, [pc, #492]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004382:	f023 020c 	bic.w	r2, r3, #12
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	4978      	ldr	r1, [pc, #480]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800439e:	4b73      	ldr	r3, [pc, #460]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	496f      	ldr	r1, [pc, #444]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c0:	4b6a      	ldr	r3, [pc, #424]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ce:	4967      	ldr	r1, [pc, #412]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043e2:	4b62      	ldr	r3, [pc, #392]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	495e      	ldr	r1, [pc, #376]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004404:	4b59      	ldr	r3, [pc, #356]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004412:	4956      	ldr	r1, [pc, #344]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004426:	4b51      	ldr	r3, [pc, #324]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004434:	494d      	ldr	r1, [pc, #308]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d028      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004448:	4b48      	ldr	r3, [pc, #288]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	4945      	ldr	r1, [pc, #276]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004466:	d106      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004468:	4b40      	ldr	r3, [pc, #256]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4a3f      	ldr	r2, [pc, #252]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800446e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004472:	60d3      	str	r3, [r2, #12]
 8004474:	e011      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800447e:	d10c      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	2101      	movs	r1, #1
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f882 	bl	8004590 <RCCEx_PLLSAI1_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004496:	7cfb      	ldrb	r3, [r7, #19]
 8004498:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d028      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044a6:	4b31      	ldr	r3, [pc, #196]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b4:	492d      	ldr	r1, [pc, #180]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044c4:	d106      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c6:	4b29      	ldr	r3, [pc, #164]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	4a28      	ldr	r2, [pc, #160]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044d0:	60d3      	str	r3, [r2, #12]
 80044d2:	e011      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3304      	adds	r3, #4
 80044e2:	2101      	movs	r1, #1
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 f853 	bl	8004590 <RCCEx_PLLSAI1_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044ee:	7cfb      	ldrb	r3, [r7, #19]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80044f4:	7cfb      	ldrb	r3, [r7, #19]
 80044f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01c      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004504:	4b19      	ldr	r3, [pc, #100]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004512:	4916      	ldr	r1, [pc, #88]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004522:	d10c      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	2102      	movs	r1, #2
 800452a:	4618      	mov	r0, r3
 800452c:	f000 f830 	bl	8004590 <RCCEx_PLLSAI1_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800453a:	7cfb      	ldrb	r3, [r7, #19]
 800453c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800454a:	4b08      	ldr	r3, [pc, #32]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004550:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004558:	4904      	ldr	r1, [pc, #16]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004560:	7cbb      	ldrb	r3, [r7, #18]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000

08004570 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004574:	4b05      	ldr	r3, [pc, #20]	@ (800458c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a04      	ldr	r2, [pc, #16]	@ (800458c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800457a:	f043 0304 	orr.w	r3, r3, #4
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000

08004590 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800459e:	4b74      	ldr	r3, [pc, #464]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d018      	beq.n	80045dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045aa:	4b71      	ldr	r3, [pc, #452]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0203 	and.w	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d10d      	bne.n	80045d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
       ||
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045c2:	4b6b      	ldr	r3, [pc, #428]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	091b      	lsrs	r3, r3, #4
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
       ||
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d047      	beq.n	8004666 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
 80045da:	e044      	b.n	8004666 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d018      	beq.n	8004616 <RCCEx_PLLSAI1_Config+0x86>
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d825      	bhi.n	8004634 <RCCEx_PLLSAI1_Config+0xa4>
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d002      	beq.n	80045f2 <RCCEx_PLLSAI1_Config+0x62>
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d009      	beq.n	8004604 <RCCEx_PLLSAI1_Config+0x74>
 80045f0:	e020      	b.n	8004634 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d11d      	bne.n	800463a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004602:	e01a      	b.n	800463a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004604:	4b5a      	ldr	r3, [pc, #360]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d116      	bne.n	800463e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004614:	e013      	b.n	800463e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004616:	4b56      	ldr	r3, [pc, #344]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10f      	bne.n	8004642 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004622:	4b53      	ldr	r3, [pc, #332]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004632:	e006      	b.n	8004642 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
      break;
 8004638:	e004      	b.n	8004644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800463a:	bf00      	nop
 800463c:	e002      	b.n	8004644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800463e:	bf00      	nop
 8004640:	e000      	b.n	8004644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004642:	bf00      	nop
    }

    if(status == HAL_OK)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10d      	bne.n	8004666 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800464a:	4b49      	ldr	r3, [pc, #292]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6819      	ldr	r1, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	3b01      	subs	r3, #1
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	430b      	orrs	r3, r1
 8004660:	4943      	ldr	r1, [pc, #268]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004662:	4313      	orrs	r3, r2
 8004664:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d17c      	bne.n	8004766 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800466c:	4b40      	ldr	r3, [pc, #256]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a3f      	ldr	r2, [pc, #252]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004672:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004678:	f7fd f98c 	bl	8001994 <HAL_GetTick>
 800467c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800467e:	e009      	b.n	8004694 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004680:	f7fd f988 	bl	8001994 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d902      	bls.n	8004694 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	73fb      	strb	r3, [r7, #15]
        break;
 8004692:	e005      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004694:	4b36      	ldr	r3, [pc, #216]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1ef      	bne.n	8004680 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d15f      	bne.n	8004766 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d110      	bne.n	80046ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ac:	4b30      	ldr	r3, [pc, #192]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80046b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6892      	ldr	r2, [r2, #8]
 80046bc:	0211      	lsls	r1, r2, #8
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68d2      	ldr	r2, [r2, #12]
 80046c2:	06d2      	lsls	r2, r2, #27
 80046c4:	430a      	orrs	r2, r1
 80046c6:	492a      	ldr	r1, [pc, #168]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	610b      	str	r3, [r1, #16]
 80046cc:	e027      	b.n	800471e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d112      	bne.n	80046fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046d4:	4b26      	ldr	r3, [pc, #152]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80046dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6892      	ldr	r2, [r2, #8]
 80046e4:	0211      	lsls	r1, r2, #8
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6912      	ldr	r2, [r2, #16]
 80046ea:	0852      	lsrs	r2, r2, #1
 80046ec:	3a01      	subs	r2, #1
 80046ee:	0552      	lsls	r2, r2, #21
 80046f0:	430a      	orrs	r2, r1
 80046f2:	491f      	ldr	r1, [pc, #124]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	610b      	str	r3, [r1, #16]
 80046f8:	e011      	b.n	800471e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004702:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6892      	ldr	r2, [r2, #8]
 800470a:	0211      	lsls	r1, r2, #8
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6952      	ldr	r2, [r2, #20]
 8004710:	0852      	lsrs	r2, r2, #1
 8004712:	3a01      	subs	r2, #1
 8004714:	0652      	lsls	r2, r2, #25
 8004716:	430a      	orrs	r2, r1
 8004718:	4915      	ldr	r1, [pc, #84]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800471a:	4313      	orrs	r3, r2
 800471c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800471e:	4b14      	ldr	r3, [pc, #80]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a13      	ldr	r2, [pc, #76]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004724:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004728:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472a:	f7fd f933 	bl	8001994 <HAL_GetTick>
 800472e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004730:	e009      	b.n	8004746 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004732:	f7fd f92f 	bl	8001994 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d902      	bls.n	8004746 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	73fb      	strb	r3, [r7, #15]
          break;
 8004744:	e005      	b.n	8004752 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004746:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0ef      	beq.n	8004732 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004758:	4b05      	ldr	r3, [pc, #20]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	4903      	ldr	r1, [pc, #12]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000

08004774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e040      	b.n	8004808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc feee 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2224      	movs	r2, #36	@ 0x24
 80047a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fade 	bl	8004d7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f8af 	bl	8004924 <UART_SetConfig>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e01b      	b.n	8004808 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fb5d 	bl	8004ec0 <UART_CheckIdleState>
 8004806:	4603      	mov	r3, r0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b08a      	sub	sp, #40	@ 0x28
 8004814:	af02      	add	r7, sp, #8
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	4613      	mov	r3, r2
 800481e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004824:	2b20      	cmp	r3, #32
 8004826:	d177      	bne.n	8004918 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_UART_Transmit+0x24>
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e070      	b.n	800491a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2221      	movs	r2, #33	@ 0x21
 8004844:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004846:	f7fd f8a5 	bl	8001994 <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	88fa      	ldrh	r2, [r7, #6]
 8004858:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004864:	d108      	bne.n	8004878 <HAL_UART_Transmit+0x68>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	e003      	b.n	8004880 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800487c:	2300      	movs	r3, #0
 800487e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004880:	e02f      	b.n	80048e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2200      	movs	r2, #0
 800488a:	2180      	movs	r1, #128	@ 0x80
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 fbbf 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e03b      	b.n	800491a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b4:	b292      	uxth	r2, r2
 80048b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	3302      	adds	r3, #2
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	e007      	b.n	80048d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	781a      	ldrb	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3301      	adds	r3, #1
 80048ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1c9      	bne.n	8004882 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2200      	movs	r2, #0
 80048f6:	2140      	movs	r1, #64	@ 0x40
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fb89 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e005      	b.n	800491a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004928:	b08a      	sub	sp, #40	@ 0x28
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	431a      	orrs	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	431a      	orrs	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	4313      	orrs	r3, r2
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4bb4      	ldr	r3, [pc, #720]	@ (8004c24 <UART_SetConfig+0x300>)
 8004954:	4013      	ands	r3, r2
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800495c:	430b      	orrs	r3, r1
 800495e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4aa9      	ldr	r2, [pc, #676]	@ (8004c28 <UART_SetConfig+0x304>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498c:	4313      	orrs	r3, r2
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a0:	430a      	orrs	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4aa0      	ldr	r2, [pc, #640]	@ (8004c2c <UART_SetConfig+0x308>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d126      	bne.n	80049fc <UART_SetConfig+0xd8>
 80049ae:	4ba0      	ldr	r3, [pc, #640]	@ (8004c30 <UART_SetConfig+0x30c>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d81b      	bhi.n	80049f4 <UART_SetConfig+0xd0>
 80049bc:	a201      	add	r2, pc, #4	@ (adr r2, 80049c4 <UART_SetConfig+0xa0>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	080049d5 	.word	0x080049d5
 80049c8:	080049e5 	.word	0x080049e5
 80049cc:	080049dd 	.word	0x080049dd
 80049d0:	080049ed 	.word	0x080049ed
 80049d4:	2301      	movs	r3, #1
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049da:	e080      	b.n	8004ade <UART_SetConfig+0x1ba>
 80049dc:	2302      	movs	r3, #2
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e2:	e07c      	b.n	8004ade <UART_SetConfig+0x1ba>
 80049e4:	2304      	movs	r3, #4
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ea:	e078      	b.n	8004ade <UART_SetConfig+0x1ba>
 80049ec:	2308      	movs	r3, #8
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f2:	e074      	b.n	8004ade <UART_SetConfig+0x1ba>
 80049f4:	2310      	movs	r3, #16
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fa:	e070      	b.n	8004ade <UART_SetConfig+0x1ba>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a8c      	ldr	r2, [pc, #560]	@ (8004c34 <UART_SetConfig+0x310>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d138      	bne.n	8004a78 <UART_SetConfig+0x154>
 8004a06:	4b8a      	ldr	r3, [pc, #552]	@ (8004c30 <UART_SetConfig+0x30c>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f003 030c 	and.w	r3, r3, #12
 8004a10:	2b0c      	cmp	r3, #12
 8004a12:	d82d      	bhi.n	8004a70 <UART_SetConfig+0x14c>
 8004a14:	a201      	add	r2, pc, #4	@ (adr r2, 8004a1c <UART_SetConfig+0xf8>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004a51 	.word	0x08004a51
 8004a20:	08004a71 	.word	0x08004a71
 8004a24:	08004a71 	.word	0x08004a71
 8004a28:	08004a71 	.word	0x08004a71
 8004a2c:	08004a61 	.word	0x08004a61
 8004a30:	08004a71 	.word	0x08004a71
 8004a34:	08004a71 	.word	0x08004a71
 8004a38:	08004a71 	.word	0x08004a71
 8004a3c:	08004a59 	.word	0x08004a59
 8004a40:	08004a71 	.word	0x08004a71
 8004a44:	08004a71 	.word	0x08004a71
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a69 	.word	0x08004a69
 8004a50:	2300      	movs	r3, #0
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a56:	e042      	b.n	8004ade <UART_SetConfig+0x1ba>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5e:	e03e      	b.n	8004ade <UART_SetConfig+0x1ba>
 8004a60:	2304      	movs	r3, #4
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e03a      	b.n	8004ade <UART_SetConfig+0x1ba>
 8004a68:	2308      	movs	r3, #8
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6e:	e036      	b.n	8004ade <UART_SetConfig+0x1ba>
 8004a70:	2310      	movs	r3, #16
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a76:	e032      	b.n	8004ade <UART_SetConfig+0x1ba>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a6a      	ldr	r2, [pc, #424]	@ (8004c28 <UART_SetConfig+0x304>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d12a      	bne.n	8004ad8 <UART_SetConfig+0x1b4>
 8004a82:	4b6b      	ldr	r3, [pc, #428]	@ (8004c30 <UART_SetConfig+0x30c>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a90:	d01a      	beq.n	8004ac8 <UART_SetConfig+0x1a4>
 8004a92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a96:	d81b      	bhi.n	8004ad0 <UART_SetConfig+0x1ac>
 8004a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a9c:	d00c      	beq.n	8004ab8 <UART_SetConfig+0x194>
 8004a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aa2:	d815      	bhi.n	8004ad0 <UART_SetConfig+0x1ac>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <UART_SetConfig+0x18c>
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aac:	d008      	beq.n	8004ac0 <UART_SetConfig+0x19c>
 8004aae:	e00f      	b.n	8004ad0 <UART_SetConfig+0x1ac>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab6:	e012      	b.n	8004ade <UART_SetConfig+0x1ba>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004abe:	e00e      	b.n	8004ade <UART_SetConfig+0x1ba>
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac6:	e00a      	b.n	8004ade <UART_SetConfig+0x1ba>
 8004ac8:	2308      	movs	r3, #8
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ace:	e006      	b.n	8004ade <UART_SetConfig+0x1ba>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad6:	e002      	b.n	8004ade <UART_SetConfig+0x1ba>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a51      	ldr	r2, [pc, #324]	@ (8004c28 <UART_SetConfig+0x304>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d17a      	bne.n	8004bde <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d824      	bhi.n	8004b3a <UART_SetConfig+0x216>
 8004af0:	a201      	add	r2, pc, #4	@ (adr r2, 8004af8 <UART_SetConfig+0x1d4>)
 8004af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af6:	bf00      	nop
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b3b 	.word	0x08004b3b
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b3b 	.word	0x08004b3b
 8004b08:	08004b2b 	.word	0x08004b2b
 8004b0c:	08004b3b 	.word	0x08004b3b
 8004b10:	08004b3b 	.word	0x08004b3b
 8004b14:	08004b3b 	.word	0x08004b3b
 8004b18:	08004b33 	.word	0x08004b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b1c:	f7ff faa6 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 8004b20:	61f8      	str	r0, [r7, #28]
        break;
 8004b22:	e010      	b.n	8004b46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b24:	4b44      	ldr	r3, [pc, #272]	@ (8004c38 <UART_SetConfig+0x314>)
 8004b26:	61fb      	str	r3, [r7, #28]
        break;
 8004b28:	e00d      	b.n	8004b46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b2a:	f7ff fa07 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8004b2e:	61f8      	str	r0, [r7, #28]
        break;
 8004b30:	e009      	b.n	8004b46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b36:	61fb      	str	r3, [r7, #28]
        break;
 8004b38:	e005      	b.n	8004b46 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8107 	beq.w	8004d5c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	4413      	add	r3, r2
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d305      	bcc.n	8004b6a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d903      	bls.n	8004b72 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b70:	e0f4      	b.n	8004d5c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	2200      	movs	r2, #0
 8004b76:	461c      	mov	r4, r3
 8004b78:	4615      	mov	r5, r2
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	022b      	lsls	r3, r5, #8
 8004b84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b88:	0222      	lsls	r2, r4, #8
 8004b8a:	68f9      	ldr	r1, [r7, #12]
 8004b8c:	6849      	ldr	r1, [r1, #4]
 8004b8e:	0849      	lsrs	r1, r1, #1
 8004b90:	2000      	movs	r0, #0
 8004b92:	4688      	mov	r8, r1
 8004b94:	4681      	mov	r9, r0
 8004b96:	eb12 0a08 	adds.w	sl, r2, r8
 8004b9a:	eb43 0b09 	adc.w	fp, r3, r9
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bac:	4650      	mov	r0, sl
 8004bae:	4659      	mov	r1, fp
 8004bb0:	f7fb fffa 	bl	8000ba8 <__aeabi_uldivmod>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4613      	mov	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bc2:	d308      	bcc.n	8004bd6 <UART_SetConfig+0x2b2>
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bca:	d204      	bcs.n	8004bd6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	60da      	str	r2, [r3, #12]
 8004bd4:	e0c2      	b.n	8004d5c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bdc:	e0be      	b.n	8004d5c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be6:	d16a      	bne.n	8004cbe <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004be8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d834      	bhi.n	8004c5a <UART_SetConfig+0x336>
 8004bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf8 <UART_SetConfig+0x2d4>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004c3d 	.word	0x08004c3d
 8004c00:	08004c45 	.word	0x08004c45
 8004c04:	08004c5b 	.word	0x08004c5b
 8004c08:	08004c4b 	.word	0x08004c4b
 8004c0c:	08004c5b 	.word	0x08004c5b
 8004c10:	08004c5b 	.word	0x08004c5b
 8004c14:	08004c5b 	.word	0x08004c5b
 8004c18:	08004c53 	.word	0x08004c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c1c:	f7ff fa26 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 8004c20:	61f8      	str	r0, [r7, #28]
        break;
 8004c22:	e020      	b.n	8004c66 <UART_SetConfig+0x342>
 8004c24:	efff69f3 	.word	0xefff69f3
 8004c28:	40008000 	.word	0x40008000
 8004c2c:	40013800 	.word	0x40013800
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40004400 	.word	0x40004400
 8004c38:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c3c:	f7ff fa2c 	bl	8004098 <HAL_RCC_GetPCLK2Freq>
 8004c40:	61f8      	str	r0, [r7, #28]
        break;
 8004c42:	e010      	b.n	8004c66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c44:	4b4c      	ldr	r3, [pc, #304]	@ (8004d78 <UART_SetConfig+0x454>)
 8004c46:	61fb      	str	r3, [r7, #28]
        break;
 8004c48:	e00d      	b.n	8004c66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4a:	f7ff f977 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8004c4e:	61f8      	str	r0, [r7, #28]
        break;
 8004c50:	e009      	b.n	8004c66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c56:	61fb      	str	r3, [r7, #28]
        break;
 8004c58:	e005      	b.n	8004c66 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d077      	beq.n	8004d5c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	005a      	lsls	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	441a      	add	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b0f      	cmp	r3, #15
 8004c86:	d916      	bls.n	8004cb6 <UART_SetConfig+0x392>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c8e:	d212      	bcs.n	8004cb6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f023 030f 	bic.w	r3, r3, #15
 8004c98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	8afb      	ldrh	r3, [r7, #22]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	8afa      	ldrh	r2, [r7, #22]
 8004cb2:	60da      	str	r2, [r3, #12]
 8004cb4:	e052      	b.n	8004d5c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cbc:	e04e      	b.n	8004d5c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d827      	bhi.n	8004d16 <UART_SetConfig+0x3f2>
 8004cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ccc <UART_SetConfig+0x3a8>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf9 	.word	0x08004cf9
 8004cd4:	08004d01 	.word	0x08004d01
 8004cd8:	08004d17 	.word	0x08004d17
 8004cdc:	08004d07 	.word	0x08004d07
 8004ce0:	08004d17 	.word	0x08004d17
 8004ce4:	08004d17 	.word	0x08004d17
 8004ce8:	08004d17 	.word	0x08004d17
 8004cec:	08004d0f 	.word	0x08004d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7ff f9bc 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 8004cf4:	61f8      	str	r0, [r7, #28]
        break;
 8004cf6:	e014      	b.n	8004d22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf8:	f7ff f9ce 	bl	8004098 <HAL_RCC_GetPCLK2Freq>
 8004cfc:	61f8      	str	r0, [r7, #28]
        break;
 8004cfe:	e010      	b.n	8004d22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d00:	4b1d      	ldr	r3, [pc, #116]	@ (8004d78 <UART_SetConfig+0x454>)
 8004d02:	61fb      	str	r3, [r7, #28]
        break;
 8004d04:	e00d      	b.n	8004d22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d06:	f7ff f919 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8004d0a:	61f8      	str	r0, [r7, #28]
        break;
 8004d0c:	e009      	b.n	8004d22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d12:	61fb      	str	r3, [r7, #28]
        break;
 8004d14:	e005      	b.n	8004d22 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d20:	bf00      	nop
    }

    if (pclk != 0U)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d019      	beq.n	8004d5c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	085a      	lsrs	r2, r3, #1
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	441a      	add	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	d909      	bls.n	8004d56 <UART_SetConfig+0x432>
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d48:	d205      	bcs.n	8004d56 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
 8004d54:	e002      	b.n	8004d5c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3728      	adds	r7, #40	@ 0x28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d76:	bf00      	nop
 8004d78:	00f42400 	.word	0x00f42400

08004d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e7a:	d10a      	bne.n	8004e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b098      	sub	sp, #96	@ 0x60
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ed0:	f7fc fd60 	bl	8001994 <HAL_GetTick>
 8004ed4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d12e      	bne.n	8004f42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eec:	2200      	movs	r2, #0
 8004eee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f88c 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d021      	beq.n	8004f42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e6      	bne.n	8004efe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e062      	b.n	8005008 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d149      	bne.n	8004fe4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f856 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d03c      	beq.n	8004fe4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	623b      	str	r3, [r7, #32]
   return(result);
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e6      	bne.n	8004f6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fbc:	61fa      	str	r2, [r7, #28]
 8004fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	69b9      	ldr	r1, [r7, #24]
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e5      	bne.n	8004f9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e011      	b.n	8005008 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3758      	adds	r7, #88	@ 0x58
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005020:	e04f      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d04b      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502a:	f7fc fcb3 	bl	8001994 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	429a      	cmp	r2, r3
 8005038:	d302      	bcc.n	8005040 <UART_WaitOnFlagUntilTimeout+0x30>
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e04e      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d037      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b80      	cmp	r3, #128	@ 0x80
 8005056:	d034      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b40      	cmp	r3, #64	@ 0x40
 800505c:	d031      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b08      	cmp	r3, #8
 800506a:	d110      	bne.n	800508e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2208      	movs	r2, #8
 8005072:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f838 	bl	80050ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2208      	movs	r2, #8
 800507e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e029      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005098:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800509c:	d111      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f81e 	bl	80050ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e00f      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d0a0      	beq.n	8005022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b095      	sub	sp, #84	@ 0x54
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005102:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005110:	643b      	str	r3, [r7, #64]	@ 0x40
 8005112:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005116:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800511e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e6      	bne.n	80050f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	61fb      	str	r3, [r7, #28]
   return(result);
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3308      	adds	r3, #8
 8005142:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005144:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005146:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800514a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e5      	bne.n	8005124 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800515c:	2b01      	cmp	r3, #1
 800515e:	d118      	bne.n	8005192 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	60bb      	str	r3, [r7, #8]
   return(result);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f023 0310 	bic.w	r3, r3, #16
 8005174:	647b      	str	r3, [r7, #68]	@ 0x44
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6979      	ldr	r1, [r7, #20]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	613b      	str	r3, [r7, #16]
   return(result);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e6      	bne.n	8005160 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80051a6:	bf00      	nop
 80051a8:	3754      	adds	r7, #84	@ 0x54
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <__cvt>:
 80051b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051b6:	ec57 6b10 	vmov	r6, r7, d0
 80051ba:	2f00      	cmp	r7, #0
 80051bc:	460c      	mov	r4, r1
 80051be:	4619      	mov	r1, r3
 80051c0:	463b      	mov	r3, r7
 80051c2:	bfbb      	ittet	lt
 80051c4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80051c8:	461f      	movlt	r7, r3
 80051ca:	2300      	movge	r3, #0
 80051cc:	232d      	movlt	r3, #45	@ 0x2d
 80051ce:	700b      	strb	r3, [r1, #0]
 80051d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051d2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80051d6:	4691      	mov	r9, r2
 80051d8:	f023 0820 	bic.w	r8, r3, #32
 80051dc:	bfbc      	itt	lt
 80051de:	4632      	movlt	r2, r6
 80051e0:	4616      	movlt	r6, r2
 80051e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80051e6:	d005      	beq.n	80051f4 <__cvt+0x42>
 80051e8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80051ec:	d100      	bne.n	80051f0 <__cvt+0x3e>
 80051ee:	3401      	adds	r4, #1
 80051f0:	2102      	movs	r1, #2
 80051f2:	e000      	b.n	80051f6 <__cvt+0x44>
 80051f4:	2103      	movs	r1, #3
 80051f6:	ab03      	add	r3, sp, #12
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	ab02      	add	r3, sp, #8
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	ec47 6b10 	vmov	d0, r6, r7
 8005202:	4653      	mov	r3, sl
 8005204:	4622      	mov	r2, r4
 8005206:	f000 fe5b 	bl	8005ec0 <_dtoa_r>
 800520a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800520e:	4605      	mov	r5, r0
 8005210:	d119      	bne.n	8005246 <__cvt+0x94>
 8005212:	f019 0f01 	tst.w	r9, #1
 8005216:	d00e      	beq.n	8005236 <__cvt+0x84>
 8005218:	eb00 0904 	add.w	r9, r0, r4
 800521c:	2200      	movs	r2, #0
 800521e:	2300      	movs	r3, #0
 8005220:	4630      	mov	r0, r6
 8005222:	4639      	mov	r1, r7
 8005224:	f7fb fc50 	bl	8000ac8 <__aeabi_dcmpeq>
 8005228:	b108      	cbz	r0, 800522e <__cvt+0x7c>
 800522a:	f8cd 900c 	str.w	r9, [sp, #12]
 800522e:	2230      	movs	r2, #48	@ 0x30
 8005230:	9b03      	ldr	r3, [sp, #12]
 8005232:	454b      	cmp	r3, r9
 8005234:	d31e      	bcc.n	8005274 <__cvt+0xc2>
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800523a:	1b5b      	subs	r3, r3, r5
 800523c:	4628      	mov	r0, r5
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	b004      	add	sp, #16
 8005242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005246:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800524a:	eb00 0904 	add.w	r9, r0, r4
 800524e:	d1e5      	bne.n	800521c <__cvt+0x6a>
 8005250:	7803      	ldrb	r3, [r0, #0]
 8005252:	2b30      	cmp	r3, #48	@ 0x30
 8005254:	d10a      	bne.n	800526c <__cvt+0xba>
 8005256:	2200      	movs	r2, #0
 8005258:	2300      	movs	r3, #0
 800525a:	4630      	mov	r0, r6
 800525c:	4639      	mov	r1, r7
 800525e:	f7fb fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 8005262:	b918      	cbnz	r0, 800526c <__cvt+0xba>
 8005264:	f1c4 0401 	rsb	r4, r4, #1
 8005268:	f8ca 4000 	str.w	r4, [sl]
 800526c:	f8da 3000 	ldr.w	r3, [sl]
 8005270:	4499      	add	r9, r3
 8005272:	e7d3      	b.n	800521c <__cvt+0x6a>
 8005274:	1c59      	adds	r1, r3, #1
 8005276:	9103      	str	r1, [sp, #12]
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	e7d9      	b.n	8005230 <__cvt+0x7e>

0800527c <__exponent>:
 800527c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800527e:	2900      	cmp	r1, #0
 8005280:	bfba      	itte	lt
 8005282:	4249      	neglt	r1, r1
 8005284:	232d      	movlt	r3, #45	@ 0x2d
 8005286:	232b      	movge	r3, #43	@ 0x2b
 8005288:	2909      	cmp	r1, #9
 800528a:	7002      	strb	r2, [r0, #0]
 800528c:	7043      	strb	r3, [r0, #1]
 800528e:	dd29      	ble.n	80052e4 <__exponent+0x68>
 8005290:	f10d 0307 	add.w	r3, sp, #7
 8005294:	461d      	mov	r5, r3
 8005296:	270a      	movs	r7, #10
 8005298:	461a      	mov	r2, r3
 800529a:	fbb1 f6f7 	udiv	r6, r1, r7
 800529e:	fb07 1416 	mls	r4, r7, r6, r1
 80052a2:	3430      	adds	r4, #48	@ 0x30
 80052a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80052a8:	460c      	mov	r4, r1
 80052aa:	2c63      	cmp	r4, #99	@ 0x63
 80052ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80052b0:	4631      	mov	r1, r6
 80052b2:	dcf1      	bgt.n	8005298 <__exponent+0x1c>
 80052b4:	3130      	adds	r1, #48	@ 0x30
 80052b6:	1e94      	subs	r4, r2, #2
 80052b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052bc:	1c41      	adds	r1, r0, #1
 80052be:	4623      	mov	r3, r4
 80052c0:	42ab      	cmp	r3, r5
 80052c2:	d30a      	bcc.n	80052da <__exponent+0x5e>
 80052c4:	f10d 0309 	add.w	r3, sp, #9
 80052c8:	1a9b      	subs	r3, r3, r2
 80052ca:	42ac      	cmp	r4, r5
 80052cc:	bf88      	it	hi
 80052ce:	2300      	movhi	r3, #0
 80052d0:	3302      	adds	r3, #2
 80052d2:	4403      	add	r3, r0
 80052d4:	1a18      	subs	r0, r3, r0
 80052d6:	b003      	add	sp, #12
 80052d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052da:	f813 6b01 	ldrb.w	r6, [r3], #1
 80052de:	f801 6f01 	strb.w	r6, [r1, #1]!
 80052e2:	e7ed      	b.n	80052c0 <__exponent+0x44>
 80052e4:	2330      	movs	r3, #48	@ 0x30
 80052e6:	3130      	adds	r1, #48	@ 0x30
 80052e8:	7083      	strb	r3, [r0, #2]
 80052ea:	70c1      	strb	r1, [r0, #3]
 80052ec:	1d03      	adds	r3, r0, #4
 80052ee:	e7f1      	b.n	80052d4 <__exponent+0x58>

080052f0 <_printf_float>:
 80052f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	b08d      	sub	sp, #52	@ 0x34
 80052f6:	460c      	mov	r4, r1
 80052f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80052fc:	4616      	mov	r6, r2
 80052fe:	461f      	mov	r7, r3
 8005300:	4605      	mov	r5, r0
 8005302:	f000 fcdb 	bl	8005cbc <_localeconv_r>
 8005306:	6803      	ldr	r3, [r0, #0]
 8005308:	9304      	str	r3, [sp, #16]
 800530a:	4618      	mov	r0, r3
 800530c:	f7fa ffb0 	bl	8000270 <strlen>
 8005310:	2300      	movs	r3, #0
 8005312:	930a      	str	r3, [sp, #40]	@ 0x28
 8005314:	f8d8 3000 	ldr.w	r3, [r8]
 8005318:	9005      	str	r0, [sp, #20]
 800531a:	3307      	adds	r3, #7
 800531c:	f023 0307 	bic.w	r3, r3, #7
 8005320:	f103 0208 	add.w	r2, r3, #8
 8005324:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005328:	f8d4 b000 	ldr.w	fp, [r4]
 800532c:	f8c8 2000 	str.w	r2, [r8]
 8005330:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005334:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005338:	9307      	str	r3, [sp, #28]
 800533a:	f8cd 8018 	str.w	r8, [sp, #24]
 800533e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005346:	4b9c      	ldr	r3, [pc, #624]	@ (80055b8 <_printf_float+0x2c8>)
 8005348:	f04f 32ff 	mov.w	r2, #4294967295
 800534c:	f7fb fbee 	bl	8000b2c <__aeabi_dcmpun>
 8005350:	bb70      	cbnz	r0, 80053b0 <_printf_float+0xc0>
 8005352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005356:	4b98      	ldr	r3, [pc, #608]	@ (80055b8 <_printf_float+0x2c8>)
 8005358:	f04f 32ff 	mov.w	r2, #4294967295
 800535c:	f7fb fbc8 	bl	8000af0 <__aeabi_dcmple>
 8005360:	bb30      	cbnz	r0, 80053b0 <_printf_float+0xc0>
 8005362:	2200      	movs	r2, #0
 8005364:	2300      	movs	r3, #0
 8005366:	4640      	mov	r0, r8
 8005368:	4649      	mov	r1, r9
 800536a:	f7fb fbb7 	bl	8000adc <__aeabi_dcmplt>
 800536e:	b110      	cbz	r0, 8005376 <_printf_float+0x86>
 8005370:	232d      	movs	r3, #45	@ 0x2d
 8005372:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005376:	4a91      	ldr	r2, [pc, #580]	@ (80055bc <_printf_float+0x2cc>)
 8005378:	4b91      	ldr	r3, [pc, #580]	@ (80055c0 <_printf_float+0x2d0>)
 800537a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800537e:	bf94      	ite	ls
 8005380:	4690      	movls	r8, r2
 8005382:	4698      	movhi	r8, r3
 8005384:	2303      	movs	r3, #3
 8005386:	6123      	str	r3, [r4, #16]
 8005388:	f02b 0304 	bic.w	r3, fp, #4
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	f04f 0900 	mov.w	r9, #0
 8005392:	9700      	str	r7, [sp, #0]
 8005394:	4633      	mov	r3, r6
 8005396:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005398:	4621      	mov	r1, r4
 800539a:	4628      	mov	r0, r5
 800539c:	f000 f9d2 	bl	8005744 <_printf_common>
 80053a0:	3001      	adds	r0, #1
 80053a2:	f040 808d 	bne.w	80054c0 <_printf_float+0x1d0>
 80053a6:	f04f 30ff 	mov.w	r0, #4294967295
 80053aa:	b00d      	add	sp, #52	@ 0x34
 80053ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b0:	4642      	mov	r2, r8
 80053b2:	464b      	mov	r3, r9
 80053b4:	4640      	mov	r0, r8
 80053b6:	4649      	mov	r1, r9
 80053b8:	f7fb fbb8 	bl	8000b2c <__aeabi_dcmpun>
 80053bc:	b140      	cbz	r0, 80053d0 <_printf_float+0xe0>
 80053be:	464b      	mov	r3, r9
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bfbc      	itt	lt
 80053c4:	232d      	movlt	r3, #45	@ 0x2d
 80053c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80053ca:	4a7e      	ldr	r2, [pc, #504]	@ (80055c4 <_printf_float+0x2d4>)
 80053cc:	4b7e      	ldr	r3, [pc, #504]	@ (80055c8 <_printf_float+0x2d8>)
 80053ce:	e7d4      	b.n	800537a <_printf_float+0x8a>
 80053d0:	6863      	ldr	r3, [r4, #4]
 80053d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80053d6:	9206      	str	r2, [sp, #24]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	d13b      	bne.n	8005454 <_printf_float+0x164>
 80053dc:	2306      	movs	r3, #6
 80053de:	6063      	str	r3, [r4, #4]
 80053e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80053e4:	2300      	movs	r3, #0
 80053e6:	6022      	str	r2, [r4, #0]
 80053e8:	9303      	str	r3, [sp, #12]
 80053ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80053ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80053f0:	ab09      	add	r3, sp, #36	@ 0x24
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	6861      	ldr	r1, [r4, #4]
 80053f6:	ec49 8b10 	vmov	d0, r8, r9
 80053fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80053fe:	4628      	mov	r0, r5
 8005400:	f7ff fed7 	bl	80051b2 <__cvt>
 8005404:	9b06      	ldr	r3, [sp, #24]
 8005406:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005408:	2b47      	cmp	r3, #71	@ 0x47
 800540a:	4680      	mov	r8, r0
 800540c:	d129      	bne.n	8005462 <_printf_float+0x172>
 800540e:	1cc8      	adds	r0, r1, #3
 8005410:	db02      	blt.n	8005418 <_printf_float+0x128>
 8005412:	6863      	ldr	r3, [r4, #4]
 8005414:	4299      	cmp	r1, r3
 8005416:	dd41      	ble.n	800549c <_printf_float+0x1ac>
 8005418:	f1aa 0a02 	sub.w	sl, sl, #2
 800541c:	fa5f fa8a 	uxtb.w	sl, sl
 8005420:	3901      	subs	r1, #1
 8005422:	4652      	mov	r2, sl
 8005424:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005428:	9109      	str	r1, [sp, #36]	@ 0x24
 800542a:	f7ff ff27 	bl	800527c <__exponent>
 800542e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005430:	1813      	adds	r3, r2, r0
 8005432:	2a01      	cmp	r2, #1
 8005434:	4681      	mov	r9, r0
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	dc02      	bgt.n	8005440 <_printf_float+0x150>
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	07d2      	lsls	r2, r2, #31
 800543e:	d501      	bpl.n	8005444 <_printf_float+0x154>
 8005440:	3301      	adds	r3, #1
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0a2      	beq.n	8005392 <_printf_float+0xa2>
 800544c:	232d      	movs	r3, #45	@ 0x2d
 800544e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005452:	e79e      	b.n	8005392 <_printf_float+0xa2>
 8005454:	9a06      	ldr	r2, [sp, #24]
 8005456:	2a47      	cmp	r2, #71	@ 0x47
 8005458:	d1c2      	bne.n	80053e0 <_printf_float+0xf0>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1c0      	bne.n	80053e0 <_printf_float+0xf0>
 800545e:	2301      	movs	r3, #1
 8005460:	e7bd      	b.n	80053de <_printf_float+0xee>
 8005462:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005466:	d9db      	bls.n	8005420 <_printf_float+0x130>
 8005468:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800546c:	d118      	bne.n	80054a0 <_printf_float+0x1b0>
 800546e:	2900      	cmp	r1, #0
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	dd0b      	ble.n	800548c <_printf_float+0x19c>
 8005474:	6121      	str	r1, [r4, #16]
 8005476:	b913      	cbnz	r3, 800547e <_printf_float+0x18e>
 8005478:	6822      	ldr	r2, [r4, #0]
 800547a:	07d0      	lsls	r0, r2, #31
 800547c:	d502      	bpl.n	8005484 <_printf_float+0x194>
 800547e:	3301      	adds	r3, #1
 8005480:	440b      	add	r3, r1
 8005482:	6123      	str	r3, [r4, #16]
 8005484:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005486:	f04f 0900 	mov.w	r9, #0
 800548a:	e7db      	b.n	8005444 <_printf_float+0x154>
 800548c:	b913      	cbnz	r3, 8005494 <_printf_float+0x1a4>
 800548e:	6822      	ldr	r2, [r4, #0]
 8005490:	07d2      	lsls	r2, r2, #31
 8005492:	d501      	bpl.n	8005498 <_printf_float+0x1a8>
 8005494:	3302      	adds	r3, #2
 8005496:	e7f4      	b.n	8005482 <_printf_float+0x192>
 8005498:	2301      	movs	r3, #1
 800549a:	e7f2      	b.n	8005482 <_printf_float+0x192>
 800549c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80054a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054a2:	4299      	cmp	r1, r3
 80054a4:	db05      	blt.n	80054b2 <_printf_float+0x1c2>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	6121      	str	r1, [r4, #16]
 80054aa:	07d8      	lsls	r0, r3, #31
 80054ac:	d5ea      	bpl.n	8005484 <_printf_float+0x194>
 80054ae:	1c4b      	adds	r3, r1, #1
 80054b0:	e7e7      	b.n	8005482 <_printf_float+0x192>
 80054b2:	2900      	cmp	r1, #0
 80054b4:	bfd4      	ite	le
 80054b6:	f1c1 0202 	rsble	r2, r1, #2
 80054ba:	2201      	movgt	r2, #1
 80054bc:	4413      	add	r3, r2
 80054be:	e7e0      	b.n	8005482 <_printf_float+0x192>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	055a      	lsls	r2, r3, #21
 80054c4:	d407      	bmi.n	80054d6 <_printf_float+0x1e6>
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	4642      	mov	r2, r8
 80054ca:	4631      	mov	r1, r6
 80054cc:	4628      	mov	r0, r5
 80054ce:	47b8      	blx	r7
 80054d0:	3001      	adds	r0, #1
 80054d2:	d12b      	bne.n	800552c <_printf_float+0x23c>
 80054d4:	e767      	b.n	80053a6 <_printf_float+0xb6>
 80054d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054da:	f240 80dd 	bls.w	8005698 <_printf_float+0x3a8>
 80054de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054e2:	2200      	movs	r2, #0
 80054e4:	2300      	movs	r3, #0
 80054e6:	f7fb faef 	bl	8000ac8 <__aeabi_dcmpeq>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d033      	beq.n	8005556 <_printf_float+0x266>
 80054ee:	4a37      	ldr	r2, [pc, #220]	@ (80055cc <_printf_float+0x2dc>)
 80054f0:	2301      	movs	r3, #1
 80054f2:	4631      	mov	r1, r6
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b8      	blx	r7
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f af54 	beq.w	80053a6 <_printf_float+0xb6>
 80054fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005502:	4543      	cmp	r3, r8
 8005504:	db02      	blt.n	800550c <_printf_float+0x21c>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	07d8      	lsls	r0, r3, #31
 800550a:	d50f      	bpl.n	800552c <_printf_float+0x23c>
 800550c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005510:	4631      	mov	r1, r6
 8005512:	4628      	mov	r0, r5
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	f43f af45 	beq.w	80053a6 <_printf_float+0xb6>
 800551c:	f04f 0900 	mov.w	r9, #0
 8005520:	f108 38ff 	add.w	r8, r8, #4294967295
 8005524:	f104 0a1a 	add.w	sl, r4, #26
 8005528:	45c8      	cmp	r8, r9
 800552a:	dc09      	bgt.n	8005540 <_printf_float+0x250>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	079b      	lsls	r3, r3, #30
 8005530:	f100 8103 	bmi.w	800573a <_printf_float+0x44a>
 8005534:	68e0      	ldr	r0, [r4, #12]
 8005536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005538:	4298      	cmp	r0, r3
 800553a:	bfb8      	it	lt
 800553c:	4618      	movlt	r0, r3
 800553e:	e734      	b.n	80053aa <_printf_float+0xba>
 8005540:	2301      	movs	r3, #1
 8005542:	4652      	mov	r2, sl
 8005544:	4631      	mov	r1, r6
 8005546:	4628      	mov	r0, r5
 8005548:	47b8      	blx	r7
 800554a:	3001      	adds	r0, #1
 800554c:	f43f af2b 	beq.w	80053a6 <_printf_float+0xb6>
 8005550:	f109 0901 	add.w	r9, r9, #1
 8005554:	e7e8      	b.n	8005528 <_printf_float+0x238>
 8005556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	dc39      	bgt.n	80055d0 <_printf_float+0x2e0>
 800555c:	4a1b      	ldr	r2, [pc, #108]	@ (80055cc <_printf_float+0x2dc>)
 800555e:	2301      	movs	r3, #1
 8005560:	4631      	mov	r1, r6
 8005562:	4628      	mov	r0, r5
 8005564:	47b8      	blx	r7
 8005566:	3001      	adds	r0, #1
 8005568:	f43f af1d 	beq.w	80053a6 <_printf_float+0xb6>
 800556c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005570:	ea59 0303 	orrs.w	r3, r9, r3
 8005574:	d102      	bne.n	800557c <_printf_float+0x28c>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	07d9      	lsls	r1, r3, #31
 800557a:	d5d7      	bpl.n	800552c <_printf_float+0x23c>
 800557c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	f43f af0d 	beq.w	80053a6 <_printf_float+0xb6>
 800558c:	f04f 0a00 	mov.w	sl, #0
 8005590:	f104 0b1a 	add.w	fp, r4, #26
 8005594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005596:	425b      	negs	r3, r3
 8005598:	4553      	cmp	r3, sl
 800559a:	dc01      	bgt.n	80055a0 <_printf_float+0x2b0>
 800559c:	464b      	mov	r3, r9
 800559e:	e793      	b.n	80054c8 <_printf_float+0x1d8>
 80055a0:	2301      	movs	r3, #1
 80055a2:	465a      	mov	r2, fp
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	f43f aefb 	beq.w	80053a6 <_printf_float+0xb6>
 80055b0:	f10a 0a01 	add.w	sl, sl, #1
 80055b4:	e7ee      	b.n	8005594 <_printf_float+0x2a4>
 80055b6:	bf00      	nop
 80055b8:	7fefffff 	.word	0x7fefffff
 80055bc:	08007f10 	.word	0x08007f10
 80055c0:	08007f14 	.word	0x08007f14
 80055c4:	08007f18 	.word	0x08007f18
 80055c8:	08007f1c 	.word	0x08007f1c
 80055cc:	08007f20 	.word	0x08007f20
 80055d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80055d6:	4553      	cmp	r3, sl
 80055d8:	bfa8      	it	ge
 80055da:	4653      	movge	r3, sl
 80055dc:	2b00      	cmp	r3, #0
 80055de:	4699      	mov	r9, r3
 80055e0:	dc36      	bgt.n	8005650 <_printf_float+0x360>
 80055e2:	f04f 0b00 	mov.w	fp, #0
 80055e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055ea:	f104 021a 	add.w	r2, r4, #26
 80055ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055f0:	9306      	str	r3, [sp, #24]
 80055f2:	eba3 0309 	sub.w	r3, r3, r9
 80055f6:	455b      	cmp	r3, fp
 80055f8:	dc31      	bgt.n	800565e <_printf_float+0x36e>
 80055fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055fc:	459a      	cmp	sl, r3
 80055fe:	dc3a      	bgt.n	8005676 <_printf_float+0x386>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	07da      	lsls	r2, r3, #31
 8005604:	d437      	bmi.n	8005676 <_printf_float+0x386>
 8005606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005608:	ebaa 0903 	sub.w	r9, sl, r3
 800560c:	9b06      	ldr	r3, [sp, #24]
 800560e:	ebaa 0303 	sub.w	r3, sl, r3
 8005612:	4599      	cmp	r9, r3
 8005614:	bfa8      	it	ge
 8005616:	4699      	movge	r9, r3
 8005618:	f1b9 0f00 	cmp.w	r9, #0
 800561c:	dc33      	bgt.n	8005686 <_printf_float+0x396>
 800561e:	f04f 0800 	mov.w	r8, #0
 8005622:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005626:	f104 0b1a 	add.w	fp, r4, #26
 800562a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800562c:	ebaa 0303 	sub.w	r3, sl, r3
 8005630:	eba3 0309 	sub.w	r3, r3, r9
 8005634:	4543      	cmp	r3, r8
 8005636:	f77f af79 	ble.w	800552c <_printf_float+0x23c>
 800563a:	2301      	movs	r3, #1
 800563c:	465a      	mov	r2, fp
 800563e:	4631      	mov	r1, r6
 8005640:	4628      	mov	r0, r5
 8005642:	47b8      	blx	r7
 8005644:	3001      	adds	r0, #1
 8005646:	f43f aeae 	beq.w	80053a6 <_printf_float+0xb6>
 800564a:	f108 0801 	add.w	r8, r8, #1
 800564e:	e7ec      	b.n	800562a <_printf_float+0x33a>
 8005650:	4642      	mov	r2, r8
 8005652:	4631      	mov	r1, r6
 8005654:	4628      	mov	r0, r5
 8005656:	47b8      	blx	r7
 8005658:	3001      	adds	r0, #1
 800565a:	d1c2      	bne.n	80055e2 <_printf_float+0x2f2>
 800565c:	e6a3      	b.n	80053a6 <_printf_float+0xb6>
 800565e:	2301      	movs	r3, #1
 8005660:	4631      	mov	r1, r6
 8005662:	4628      	mov	r0, r5
 8005664:	9206      	str	r2, [sp, #24]
 8005666:	47b8      	blx	r7
 8005668:	3001      	adds	r0, #1
 800566a:	f43f ae9c 	beq.w	80053a6 <_printf_float+0xb6>
 800566e:	9a06      	ldr	r2, [sp, #24]
 8005670:	f10b 0b01 	add.w	fp, fp, #1
 8005674:	e7bb      	b.n	80055ee <_printf_float+0x2fe>
 8005676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800567a:	4631      	mov	r1, r6
 800567c:	4628      	mov	r0, r5
 800567e:	47b8      	blx	r7
 8005680:	3001      	adds	r0, #1
 8005682:	d1c0      	bne.n	8005606 <_printf_float+0x316>
 8005684:	e68f      	b.n	80053a6 <_printf_float+0xb6>
 8005686:	9a06      	ldr	r2, [sp, #24]
 8005688:	464b      	mov	r3, r9
 800568a:	4442      	add	r2, r8
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	47b8      	blx	r7
 8005692:	3001      	adds	r0, #1
 8005694:	d1c3      	bne.n	800561e <_printf_float+0x32e>
 8005696:	e686      	b.n	80053a6 <_printf_float+0xb6>
 8005698:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800569c:	f1ba 0f01 	cmp.w	sl, #1
 80056a0:	dc01      	bgt.n	80056a6 <_printf_float+0x3b6>
 80056a2:	07db      	lsls	r3, r3, #31
 80056a4:	d536      	bpl.n	8005714 <_printf_float+0x424>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4642      	mov	r2, r8
 80056aa:	4631      	mov	r1, r6
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b8      	blx	r7
 80056b0:	3001      	adds	r0, #1
 80056b2:	f43f ae78 	beq.w	80053a6 <_printf_float+0xb6>
 80056b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ba:	4631      	mov	r1, r6
 80056bc:	4628      	mov	r0, r5
 80056be:	47b8      	blx	r7
 80056c0:	3001      	adds	r0, #1
 80056c2:	f43f ae70 	beq.w	80053a6 <_printf_float+0xb6>
 80056c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056ca:	2200      	movs	r2, #0
 80056cc:	2300      	movs	r3, #0
 80056ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056d2:	f7fb f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80056d6:	b9c0      	cbnz	r0, 800570a <_printf_float+0x41a>
 80056d8:	4653      	mov	r3, sl
 80056da:	f108 0201 	add.w	r2, r8, #1
 80056de:	4631      	mov	r1, r6
 80056e0:	4628      	mov	r0, r5
 80056e2:	47b8      	blx	r7
 80056e4:	3001      	adds	r0, #1
 80056e6:	d10c      	bne.n	8005702 <_printf_float+0x412>
 80056e8:	e65d      	b.n	80053a6 <_printf_float+0xb6>
 80056ea:	2301      	movs	r3, #1
 80056ec:	465a      	mov	r2, fp
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b8      	blx	r7
 80056f4:	3001      	adds	r0, #1
 80056f6:	f43f ae56 	beq.w	80053a6 <_printf_float+0xb6>
 80056fa:	f108 0801 	add.w	r8, r8, #1
 80056fe:	45d0      	cmp	r8, sl
 8005700:	dbf3      	blt.n	80056ea <_printf_float+0x3fa>
 8005702:	464b      	mov	r3, r9
 8005704:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005708:	e6df      	b.n	80054ca <_printf_float+0x1da>
 800570a:	f04f 0800 	mov.w	r8, #0
 800570e:	f104 0b1a 	add.w	fp, r4, #26
 8005712:	e7f4      	b.n	80056fe <_printf_float+0x40e>
 8005714:	2301      	movs	r3, #1
 8005716:	4642      	mov	r2, r8
 8005718:	e7e1      	b.n	80056de <_printf_float+0x3ee>
 800571a:	2301      	movs	r3, #1
 800571c:	464a      	mov	r2, r9
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	47b8      	blx	r7
 8005724:	3001      	adds	r0, #1
 8005726:	f43f ae3e 	beq.w	80053a6 <_printf_float+0xb6>
 800572a:	f108 0801 	add.w	r8, r8, #1
 800572e:	68e3      	ldr	r3, [r4, #12]
 8005730:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005732:	1a5b      	subs	r3, r3, r1
 8005734:	4543      	cmp	r3, r8
 8005736:	dcf0      	bgt.n	800571a <_printf_float+0x42a>
 8005738:	e6fc      	b.n	8005534 <_printf_float+0x244>
 800573a:	f04f 0800 	mov.w	r8, #0
 800573e:	f104 0919 	add.w	r9, r4, #25
 8005742:	e7f4      	b.n	800572e <_printf_float+0x43e>

08005744 <_printf_common>:
 8005744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	4616      	mov	r6, r2
 800574a:	4698      	mov	r8, r3
 800574c:	688a      	ldr	r2, [r1, #8]
 800574e:	690b      	ldr	r3, [r1, #16]
 8005750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005754:	4293      	cmp	r3, r2
 8005756:	bfb8      	it	lt
 8005758:	4613      	movlt	r3, r2
 800575a:	6033      	str	r3, [r6, #0]
 800575c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005760:	4607      	mov	r7, r0
 8005762:	460c      	mov	r4, r1
 8005764:	b10a      	cbz	r2, 800576a <_printf_common+0x26>
 8005766:	3301      	adds	r3, #1
 8005768:	6033      	str	r3, [r6, #0]
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	0699      	lsls	r1, r3, #26
 800576e:	bf42      	ittt	mi
 8005770:	6833      	ldrmi	r3, [r6, #0]
 8005772:	3302      	addmi	r3, #2
 8005774:	6033      	strmi	r3, [r6, #0]
 8005776:	6825      	ldr	r5, [r4, #0]
 8005778:	f015 0506 	ands.w	r5, r5, #6
 800577c:	d106      	bne.n	800578c <_printf_common+0x48>
 800577e:	f104 0a19 	add.w	sl, r4, #25
 8005782:	68e3      	ldr	r3, [r4, #12]
 8005784:	6832      	ldr	r2, [r6, #0]
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	42ab      	cmp	r3, r5
 800578a:	dc26      	bgt.n	80057da <_printf_common+0x96>
 800578c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005790:	6822      	ldr	r2, [r4, #0]
 8005792:	3b00      	subs	r3, #0
 8005794:	bf18      	it	ne
 8005796:	2301      	movne	r3, #1
 8005798:	0692      	lsls	r2, r2, #26
 800579a:	d42b      	bmi.n	80057f4 <_printf_common+0xb0>
 800579c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057a0:	4641      	mov	r1, r8
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c8      	blx	r9
 80057a6:	3001      	adds	r0, #1
 80057a8:	d01e      	beq.n	80057e8 <_printf_common+0xa4>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	6922      	ldr	r2, [r4, #16]
 80057ae:	f003 0306 	and.w	r3, r3, #6
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	bf02      	ittt	eq
 80057b6:	68e5      	ldreq	r5, [r4, #12]
 80057b8:	6833      	ldreq	r3, [r6, #0]
 80057ba:	1aed      	subeq	r5, r5, r3
 80057bc:	68a3      	ldr	r3, [r4, #8]
 80057be:	bf0c      	ite	eq
 80057c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c4:	2500      	movne	r5, #0
 80057c6:	4293      	cmp	r3, r2
 80057c8:	bfc4      	itt	gt
 80057ca:	1a9b      	subgt	r3, r3, r2
 80057cc:	18ed      	addgt	r5, r5, r3
 80057ce:	2600      	movs	r6, #0
 80057d0:	341a      	adds	r4, #26
 80057d2:	42b5      	cmp	r5, r6
 80057d4:	d11a      	bne.n	800580c <_printf_common+0xc8>
 80057d6:	2000      	movs	r0, #0
 80057d8:	e008      	b.n	80057ec <_printf_common+0xa8>
 80057da:	2301      	movs	r3, #1
 80057dc:	4652      	mov	r2, sl
 80057de:	4641      	mov	r1, r8
 80057e0:	4638      	mov	r0, r7
 80057e2:	47c8      	blx	r9
 80057e4:	3001      	adds	r0, #1
 80057e6:	d103      	bne.n	80057f0 <_printf_common+0xac>
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f0:	3501      	adds	r5, #1
 80057f2:	e7c6      	b.n	8005782 <_printf_common+0x3e>
 80057f4:	18e1      	adds	r1, r4, r3
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	2030      	movs	r0, #48	@ 0x30
 80057fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057fe:	4422      	add	r2, r4
 8005800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005804:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005808:	3302      	adds	r3, #2
 800580a:	e7c7      	b.n	800579c <_printf_common+0x58>
 800580c:	2301      	movs	r3, #1
 800580e:	4622      	mov	r2, r4
 8005810:	4641      	mov	r1, r8
 8005812:	4638      	mov	r0, r7
 8005814:	47c8      	blx	r9
 8005816:	3001      	adds	r0, #1
 8005818:	d0e6      	beq.n	80057e8 <_printf_common+0xa4>
 800581a:	3601      	adds	r6, #1
 800581c:	e7d9      	b.n	80057d2 <_printf_common+0x8e>
	...

08005820 <_printf_i>:
 8005820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	7e0f      	ldrb	r7, [r1, #24]
 8005826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005828:	2f78      	cmp	r7, #120	@ 0x78
 800582a:	4691      	mov	r9, r2
 800582c:	4680      	mov	r8, r0
 800582e:	460c      	mov	r4, r1
 8005830:	469a      	mov	sl, r3
 8005832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005836:	d807      	bhi.n	8005848 <_printf_i+0x28>
 8005838:	2f62      	cmp	r7, #98	@ 0x62
 800583a:	d80a      	bhi.n	8005852 <_printf_i+0x32>
 800583c:	2f00      	cmp	r7, #0
 800583e:	f000 80d2 	beq.w	80059e6 <_printf_i+0x1c6>
 8005842:	2f58      	cmp	r7, #88	@ 0x58
 8005844:	f000 80b9 	beq.w	80059ba <_printf_i+0x19a>
 8005848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800584c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005850:	e03a      	b.n	80058c8 <_printf_i+0xa8>
 8005852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005856:	2b15      	cmp	r3, #21
 8005858:	d8f6      	bhi.n	8005848 <_printf_i+0x28>
 800585a:	a101      	add	r1, pc, #4	@ (adr r1, 8005860 <_printf_i+0x40>)
 800585c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005860:	080058b9 	.word	0x080058b9
 8005864:	080058cd 	.word	0x080058cd
 8005868:	08005849 	.word	0x08005849
 800586c:	08005849 	.word	0x08005849
 8005870:	08005849 	.word	0x08005849
 8005874:	08005849 	.word	0x08005849
 8005878:	080058cd 	.word	0x080058cd
 800587c:	08005849 	.word	0x08005849
 8005880:	08005849 	.word	0x08005849
 8005884:	08005849 	.word	0x08005849
 8005888:	08005849 	.word	0x08005849
 800588c:	080059cd 	.word	0x080059cd
 8005890:	080058f7 	.word	0x080058f7
 8005894:	08005987 	.word	0x08005987
 8005898:	08005849 	.word	0x08005849
 800589c:	08005849 	.word	0x08005849
 80058a0:	080059ef 	.word	0x080059ef
 80058a4:	08005849 	.word	0x08005849
 80058a8:	080058f7 	.word	0x080058f7
 80058ac:	08005849 	.word	0x08005849
 80058b0:	08005849 	.word	0x08005849
 80058b4:	0800598f 	.word	0x0800598f
 80058b8:	6833      	ldr	r3, [r6, #0]
 80058ba:	1d1a      	adds	r2, r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6032      	str	r2, [r6, #0]
 80058c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058c8:	2301      	movs	r3, #1
 80058ca:	e09d      	b.n	8005a08 <_printf_i+0x1e8>
 80058cc:	6833      	ldr	r3, [r6, #0]
 80058ce:	6820      	ldr	r0, [r4, #0]
 80058d0:	1d19      	adds	r1, r3, #4
 80058d2:	6031      	str	r1, [r6, #0]
 80058d4:	0606      	lsls	r6, r0, #24
 80058d6:	d501      	bpl.n	80058dc <_printf_i+0xbc>
 80058d8:	681d      	ldr	r5, [r3, #0]
 80058da:	e003      	b.n	80058e4 <_printf_i+0xc4>
 80058dc:	0645      	lsls	r5, r0, #25
 80058de:	d5fb      	bpl.n	80058d8 <_printf_i+0xb8>
 80058e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058e4:	2d00      	cmp	r5, #0
 80058e6:	da03      	bge.n	80058f0 <_printf_i+0xd0>
 80058e8:	232d      	movs	r3, #45	@ 0x2d
 80058ea:	426d      	negs	r5, r5
 80058ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058f0:	4859      	ldr	r0, [pc, #356]	@ (8005a58 <_printf_i+0x238>)
 80058f2:	230a      	movs	r3, #10
 80058f4:	e011      	b.n	800591a <_printf_i+0xfa>
 80058f6:	6821      	ldr	r1, [r4, #0]
 80058f8:	6833      	ldr	r3, [r6, #0]
 80058fa:	0608      	lsls	r0, r1, #24
 80058fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005900:	d402      	bmi.n	8005908 <_printf_i+0xe8>
 8005902:	0649      	lsls	r1, r1, #25
 8005904:	bf48      	it	mi
 8005906:	b2ad      	uxthmi	r5, r5
 8005908:	2f6f      	cmp	r7, #111	@ 0x6f
 800590a:	4853      	ldr	r0, [pc, #332]	@ (8005a58 <_printf_i+0x238>)
 800590c:	6033      	str	r3, [r6, #0]
 800590e:	bf14      	ite	ne
 8005910:	230a      	movne	r3, #10
 8005912:	2308      	moveq	r3, #8
 8005914:	2100      	movs	r1, #0
 8005916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800591a:	6866      	ldr	r6, [r4, #4]
 800591c:	60a6      	str	r6, [r4, #8]
 800591e:	2e00      	cmp	r6, #0
 8005920:	bfa2      	ittt	ge
 8005922:	6821      	ldrge	r1, [r4, #0]
 8005924:	f021 0104 	bicge.w	r1, r1, #4
 8005928:	6021      	strge	r1, [r4, #0]
 800592a:	b90d      	cbnz	r5, 8005930 <_printf_i+0x110>
 800592c:	2e00      	cmp	r6, #0
 800592e:	d04b      	beq.n	80059c8 <_printf_i+0x1a8>
 8005930:	4616      	mov	r6, r2
 8005932:	fbb5 f1f3 	udiv	r1, r5, r3
 8005936:	fb03 5711 	mls	r7, r3, r1, r5
 800593a:	5dc7      	ldrb	r7, [r0, r7]
 800593c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005940:	462f      	mov	r7, r5
 8005942:	42bb      	cmp	r3, r7
 8005944:	460d      	mov	r5, r1
 8005946:	d9f4      	bls.n	8005932 <_printf_i+0x112>
 8005948:	2b08      	cmp	r3, #8
 800594a:	d10b      	bne.n	8005964 <_printf_i+0x144>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	07df      	lsls	r7, r3, #31
 8005950:	d508      	bpl.n	8005964 <_printf_i+0x144>
 8005952:	6923      	ldr	r3, [r4, #16]
 8005954:	6861      	ldr	r1, [r4, #4]
 8005956:	4299      	cmp	r1, r3
 8005958:	bfde      	ittt	le
 800595a:	2330      	movle	r3, #48	@ 0x30
 800595c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005960:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005964:	1b92      	subs	r2, r2, r6
 8005966:	6122      	str	r2, [r4, #16]
 8005968:	f8cd a000 	str.w	sl, [sp]
 800596c:	464b      	mov	r3, r9
 800596e:	aa03      	add	r2, sp, #12
 8005970:	4621      	mov	r1, r4
 8005972:	4640      	mov	r0, r8
 8005974:	f7ff fee6 	bl	8005744 <_printf_common>
 8005978:	3001      	adds	r0, #1
 800597a:	d14a      	bne.n	8005a12 <_printf_i+0x1f2>
 800597c:	f04f 30ff 	mov.w	r0, #4294967295
 8005980:	b004      	add	sp, #16
 8005982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	f043 0320 	orr.w	r3, r3, #32
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	4833      	ldr	r0, [pc, #204]	@ (8005a5c <_printf_i+0x23c>)
 8005990:	2778      	movs	r7, #120	@ 0x78
 8005992:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	6831      	ldr	r1, [r6, #0]
 800599a:	061f      	lsls	r7, r3, #24
 800599c:	f851 5b04 	ldr.w	r5, [r1], #4
 80059a0:	d402      	bmi.n	80059a8 <_printf_i+0x188>
 80059a2:	065f      	lsls	r7, r3, #25
 80059a4:	bf48      	it	mi
 80059a6:	b2ad      	uxthmi	r5, r5
 80059a8:	6031      	str	r1, [r6, #0]
 80059aa:	07d9      	lsls	r1, r3, #31
 80059ac:	bf44      	itt	mi
 80059ae:	f043 0320 	orrmi.w	r3, r3, #32
 80059b2:	6023      	strmi	r3, [r4, #0]
 80059b4:	b11d      	cbz	r5, 80059be <_printf_i+0x19e>
 80059b6:	2310      	movs	r3, #16
 80059b8:	e7ac      	b.n	8005914 <_printf_i+0xf4>
 80059ba:	4827      	ldr	r0, [pc, #156]	@ (8005a58 <_printf_i+0x238>)
 80059bc:	e7e9      	b.n	8005992 <_printf_i+0x172>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	f023 0320 	bic.w	r3, r3, #32
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	e7f6      	b.n	80059b6 <_printf_i+0x196>
 80059c8:	4616      	mov	r6, r2
 80059ca:	e7bd      	b.n	8005948 <_printf_i+0x128>
 80059cc:	6833      	ldr	r3, [r6, #0]
 80059ce:	6825      	ldr	r5, [r4, #0]
 80059d0:	6961      	ldr	r1, [r4, #20]
 80059d2:	1d18      	adds	r0, r3, #4
 80059d4:	6030      	str	r0, [r6, #0]
 80059d6:	062e      	lsls	r6, r5, #24
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	d501      	bpl.n	80059e0 <_printf_i+0x1c0>
 80059dc:	6019      	str	r1, [r3, #0]
 80059de:	e002      	b.n	80059e6 <_printf_i+0x1c6>
 80059e0:	0668      	lsls	r0, r5, #25
 80059e2:	d5fb      	bpl.n	80059dc <_printf_i+0x1bc>
 80059e4:	8019      	strh	r1, [r3, #0]
 80059e6:	2300      	movs	r3, #0
 80059e8:	6123      	str	r3, [r4, #16]
 80059ea:	4616      	mov	r6, r2
 80059ec:	e7bc      	b.n	8005968 <_printf_i+0x148>
 80059ee:	6833      	ldr	r3, [r6, #0]
 80059f0:	1d1a      	adds	r2, r3, #4
 80059f2:	6032      	str	r2, [r6, #0]
 80059f4:	681e      	ldr	r6, [r3, #0]
 80059f6:	6862      	ldr	r2, [r4, #4]
 80059f8:	2100      	movs	r1, #0
 80059fa:	4630      	mov	r0, r6
 80059fc:	f7fa fbe8 	bl	80001d0 <memchr>
 8005a00:	b108      	cbz	r0, 8005a06 <_printf_i+0x1e6>
 8005a02:	1b80      	subs	r0, r0, r6
 8005a04:	6060      	str	r0, [r4, #4]
 8005a06:	6863      	ldr	r3, [r4, #4]
 8005a08:	6123      	str	r3, [r4, #16]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a10:	e7aa      	b.n	8005968 <_printf_i+0x148>
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	4632      	mov	r2, r6
 8005a16:	4649      	mov	r1, r9
 8005a18:	4640      	mov	r0, r8
 8005a1a:	47d0      	blx	sl
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d0ad      	beq.n	800597c <_printf_i+0x15c>
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	079b      	lsls	r3, r3, #30
 8005a24:	d413      	bmi.n	8005a4e <_printf_i+0x22e>
 8005a26:	68e0      	ldr	r0, [r4, #12]
 8005a28:	9b03      	ldr	r3, [sp, #12]
 8005a2a:	4298      	cmp	r0, r3
 8005a2c:	bfb8      	it	lt
 8005a2e:	4618      	movlt	r0, r3
 8005a30:	e7a6      	b.n	8005980 <_printf_i+0x160>
 8005a32:	2301      	movs	r3, #1
 8005a34:	4632      	mov	r2, r6
 8005a36:	4649      	mov	r1, r9
 8005a38:	4640      	mov	r0, r8
 8005a3a:	47d0      	blx	sl
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d09d      	beq.n	800597c <_printf_i+0x15c>
 8005a40:	3501      	adds	r5, #1
 8005a42:	68e3      	ldr	r3, [r4, #12]
 8005a44:	9903      	ldr	r1, [sp, #12]
 8005a46:	1a5b      	subs	r3, r3, r1
 8005a48:	42ab      	cmp	r3, r5
 8005a4a:	dcf2      	bgt.n	8005a32 <_printf_i+0x212>
 8005a4c:	e7eb      	b.n	8005a26 <_printf_i+0x206>
 8005a4e:	2500      	movs	r5, #0
 8005a50:	f104 0619 	add.w	r6, r4, #25
 8005a54:	e7f5      	b.n	8005a42 <_printf_i+0x222>
 8005a56:	bf00      	nop
 8005a58:	08007f22 	.word	0x08007f22
 8005a5c:	08007f33 	.word	0x08007f33

08005a60 <std>:
 8005a60:	2300      	movs	r3, #0
 8005a62:	b510      	push	{r4, lr}
 8005a64:	4604      	mov	r4, r0
 8005a66:	e9c0 3300 	strd	r3, r3, [r0]
 8005a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a6e:	6083      	str	r3, [r0, #8]
 8005a70:	8181      	strh	r1, [r0, #12]
 8005a72:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a74:	81c2      	strh	r2, [r0, #14]
 8005a76:	6183      	str	r3, [r0, #24]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	305c      	adds	r0, #92	@ 0x5c
 8005a7e:	f000 f914 	bl	8005caa <memset>
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <std+0x58>)
 8005a84:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <std+0x5c>)
 8005a88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <std+0x60>)
 8005a8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac4 <std+0x64>)
 8005a90:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <std+0x68>)
 8005a94:	6224      	str	r4, [r4, #32]
 8005a96:	429c      	cmp	r4, r3
 8005a98:	d006      	beq.n	8005aa8 <std+0x48>
 8005a9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a9e:	4294      	cmp	r4, r2
 8005aa0:	d002      	beq.n	8005aa8 <std+0x48>
 8005aa2:	33d0      	adds	r3, #208	@ 0xd0
 8005aa4:	429c      	cmp	r4, r3
 8005aa6:	d105      	bne.n	8005ab4 <std+0x54>
 8005aa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab0:	f000 b978 	b.w	8005da4 <__retarget_lock_init_recursive>
 8005ab4:	bd10      	pop	{r4, pc}
 8005ab6:	bf00      	nop
 8005ab8:	08005c25 	.word	0x08005c25
 8005abc:	08005c47 	.word	0x08005c47
 8005ac0:	08005c7f 	.word	0x08005c7f
 8005ac4:	08005ca3 	.word	0x08005ca3
 8005ac8:	20000e9c 	.word	0x20000e9c

08005acc <stdio_exit_handler>:
 8005acc:	4a02      	ldr	r2, [pc, #8]	@ (8005ad8 <stdio_exit_handler+0xc>)
 8005ace:	4903      	ldr	r1, [pc, #12]	@ (8005adc <stdio_exit_handler+0x10>)
 8005ad0:	4803      	ldr	r0, [pc, #12]	@ (8005ae0 <stdio_exit_handler+0x14>)
 8005ad2:	f000 b869 	b.w	8005ba8 <_fwalk_sglue>
 8005ad6:	bf00      	nop
 8005ad8:	2000000c 	.word	0x2000000c
 8005adc:	08007705 	.word	0x08007705
 8005ae0:	2000001c 	.word	0x2000001c

08005ae4 <cleanup_stdio>:
 8005ae4:	6841      	ldr	r1, [r0, #4]
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8005b18 <cleanup_stdio+0x34>)
 8005ae8:	4299      	cmp	r1, r3
 8005aea:	b510      	push	{r4, lr}
 8005aec:	4604      	mov	r4, r0
 8005aee:	d001      	beq.n	8005af4 <cleanup_stdio+0x10>
 8005af0:	f001 fe08 	bl	8007704 <_fflush_r>
 8005af4:	68a1      	ldr	r1, [r4, #8]
 8005af6:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <cleanup_stdio+0x38>)
 8005af8:	4299      	cmp	r1, r3
 8005afa:	d002      	beq.n	8005b02 <cleanup_stdio+0x1e>
 8005afc:	4620      	mov	r0, r4
 8005afe:	f001 fe01 	bl	8007704 <_fflush_r>
 8005b02:	68e1      	ldr	r1, [r4, #12]
 8005b04:	4b06      	ldr	r3, [pc, #24]	@ (8005b20 <cleanup_stdio+0x3c>)
 8005b06:	4299      	cmp	r1, r3
 8005b08:	d004      	beq.n	8005b14 <cleanup_stdio+0x30>
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b10:	f001 bdf8 	b.w	8007704 <_fflush_r>
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	bf00      	nop
 8005b18:	20000e9c 	.word	0x20000e9c
 8005b1c:	20000f04 	.word	0x20000f04
 8005b20:	20000f6c 	.word	0x20000f6c

08005b24 <global_stdio_init.part.0>:
 8005b24:	b510      	push	{r4, lr}
 8005b26:	4b0b      	ldr	r3, [pc, #44]	@ (8005b54 <global_stdio_init.part.0+0x30>)
 8005b28:	4c0b      	ldr	r4, [pc, #44]	@ (8005b58 <global_stdio_init.part.0+0x34>)
 8005b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005b5c <global_stdio_init.part.0+0x38>)
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	4620      	mov	r0, r4
 8005b30:	2200      	movs	r2, #0
 8005b32:	2104      	movs	r1, #4
 8005b34:	f7ff ff94 	bl	8005a60 <std>
 8005b38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	2109      	movs	r1, #9
 8005b40:	f7ff ff8e 	bl	8005a60 <std>
 8005b44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b48:	2202      	movs	r2, #2
 8005b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4e:	2112      	movs	r1, #18
 8005b50:	f7ff bf86 	b.w	8005a60 <std>
 8005b54:	20000fd4 	.word	0x20000fd4
 8005b58:	20000e9c 	.word	0x20000e9c
 8005b5c:	08005acd 	.word	0x08005acd

08005b60 <__sfp_lock_acquire>:
 8005b60:	4801      	ldr	r0, [pc, #4]	@ (8005b68 <__sfp_lock_acquire+0x8>)
 8005b62:	f000 b920 	b.w	8005da6 <__retarget_lock_acquire_recursive>
 8005b66:	bf00      	nop
 8005b68:	20000fdd 	.word	0x20000fdd

08005b6c <__sfp_lock_release>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	@ (8005b74 <__sfp_lock_release+0x8>)
 8005b6e:	f000 b91b 	b.w	8005da8 <__retarget_lock_release_recursive>
 8005b72:	bf00      	nop
 8005b74:	20000fdd 	.word	0x20000fdd

08005b78 <__sinit>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	f7ff fff0 	bl	8005b60 <__sfp_lock_acquire>
 8005b80:	6a23      	ldr	r3, [r4, #32]
 8005b82:	b11b      	cbz	r3, 8005b8c <__sinit+0x14>
 8005b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b88:	f7ff bff0 	b.w	8005b6c <__sfp_lock_release>
 8005b8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ba0 <__sinit+0x28>)
 8005b8e:	6223      	str	r3, [r4, #32]
 8005b90:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <__sinit+0x2c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1f5      	bne.n	8005b84 <__sinit+0xc>
 8005b98:	f7ff ffc4 	bl	8005b24 <global_stdio_init.part.0>
 8005b9c:	e7f2      	b.n	8005b84 <__sinit+0xc>
 8005b9e:	bf00      	nop
 8005ba0:	08005ae5 	.word	0x08005ae5
 8005ba4:	20000fd4 	.word	0x20000fd4

08005ba8 <_fwalk_sglue>:
 8005ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bac:	4607      	mov	r7, r0
 8005bae:	4688      	mov	r8, r1
 8005bb0:	4614      	mov	r4, r2
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bb8:	f1b9 0901 	subs.w	r9, r9, #1
 8005bbc:	d505      	bpl.n	8005bca <_fwalk_sglue+0x22>
 8005bbe:	6824      	ldr	r4, [r4, #0]
 8005bc0:	2c00      	cmp	r4, #0
 8005bc2:	d1f7      	bne.n	8005bb4 <_fwalk_sglue+0xc>
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bca:	89ab      	ldrh	r3, [r5, #12]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d907      	bls.n	8005be0 <_fwalk_sglue+0x38>
 8005bd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	d003      	beq.n	8005be0 <_fwalk_sglue+0x38>
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4638      	mov	r0, r7
 8005bdc:	47c0      	blx	r8
 8005bde:	4306      	orrs	r6, r0
 8005be0:	3568      	adds	r5, #104	@ 0x68
 8005be2:	e7e9      	b.n	8005bb8 <_fwalk_sglue+0x10>

08005be4 <siprintf>:
 8005be4:	b40e      	push	{r1, r2, r3}
 8005be6:	b500      	push	{lr}
 8005be8:	b09c      	sub	sp, #112	@ 0x70
 8005bea:	ab1d      	add	r3, sp, #116	@ 0x74
 8005bec:	9002      	str	r0, [sp, #8]
 8005bee:	9006      	str	r0, [sp, #24]
 8005bf0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005bf4:	4809      	ldr	r0, [pc, #36]	@ (8005c1c <siprintf+0x38>)
 8005bf6:	9107      	str	r1, [sp, #28]
 8005bf8:	9104      	str	r1, [sp, #16]
 8005bfa:	4909      	ldr	r1, [pc, #36]	@ (8005c20 <siprintf+0x3c>)
 8005bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c00:	9105      	str	r1, [sp, #20]
 8005c02:	6800      	ldr	r0, [r0, #0]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	a902      	add	r1, sp, #8
 8005c08:	f001 fbfc 	bl	8007404 <_svfiprintf_r>
 8005c0c:	9b02      	ldr	r3, [sp, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	b01c      	add	sp, #112	@ 0x70
 8005c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c18:	b003      	add	sp, #12
 8005c1a:	4770      	bx	lr
 8005c1c:	20000018 	.word	0x20000018
 8005c20:	ffff0208 	.word	0xffff0208

08005c24 <__sread>:
 8005c24:	b510      	push	{r4, lr}
 8005c26:	460c      	mov	r4, r1
 8005c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c2c:	f000 f86c 	bl	8005d08 <_read_r>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	bfab      	itete	ge
 8005c34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c36:	89a3      	ldrhlt	r3, [r4, #12]
 8005c38:	181b      	addge	r3, r3, r0
 8005c3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c3e:	bfac      	ite	ge
 8005c40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c42:	81a3      	strhlt	r3, [r4, #12]
 8005c44:	bd10      	pop	{r4, pc}

08005c46 <__swrite>:
 8005c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4a:	461f      	mov	r7, r3
 8005c4c:	898b      	ldrh	r3, [r1, #12]
 8005c4e:	05db      	lsls	r3, r3, #23
 8005c50:	4605      	mov	r5, r0
 8005c52:	460c      	mov	r4, r1
 8005c54:	4616      	mov	r6, r2
 8005c56:	d505      	bpl.n	8005c64 <__swrite+0x1e>
 8005c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f000 f840 	bl	8005ce4 <_lseek_r>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	4632      	mov	r2, r6
 8005c72:	463b      	mov	r3, r7
 8005c74:	4628      	mov	r0, r5
 8005c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7a:	f000 b857 	b.w	8005d2c <_write_r>

08005c7e <__sseek>:
 8005c7e:	b510      	push	{r4, lr}
 8005c80:	460c      	mov	r4, r1
 8005c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c86:	f000 f82d 	bl	8005ce4 <_lseek_r>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	bf15      	itete	ne
 8005c90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c9a:	81a3      	strheq	r3, [r4, #12]
 8005c9c:	bf18      	it	ne
 8005c9e:	81a3      	strhne	r3, [r4, #12]
 8005ca0:	bd10      	pop	{r4, pc}

08005ca2 <__sclose>:
 8005ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca6:	f000 b80d 	b.w	8005cc4 <_close_r>

08005caa <memset>:
 8005caa:	4402      	add	r2, r0
 8005cac:	4603      	mov	r3, r0
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d100      	bne.n	8005cb4 <memset+0xa>
 8005cb2:	4770      	bx	lr
 8005cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8005cb8:	e7f9      	b.n	8005cae <memset+0x4>
	...

08005cbc <_localeconv_r>:
 8005cbc:	4800      	ldr	r0, [pc, #0]	@ (8005cc0 <_localeconv_r+0x4>)
 8005cbe:	4770      	bx	lr
 8005cc0:	20000158 	.word	0x20000158

08005cc4 <_close_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4d06      	ldr	r5, [pc, #24]	@ (8005ce0 <_close_r+0x1c>)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4604      	mov	r4, r0
 8005ccc:	4608      	mov	r0, r1
 8005cce:	602b      	str	r3, [r5, #0]
 8005cd0:	f7fb fd52 	bl	8001778 <_close>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d102      	bne.n	8005cde <_close_r+0x1a>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	b103      	cbz	r3, 8005cde <_close_r+0x1a>
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	20000fd8 	.word	0x20000fd8

08005ce4 <_lseek_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d07      	ldr	r5, [pc, #28]	@ (8005d04 <_lseek_r+0x20>)
 8005ce8:	4604      	mov	r4, r0
 8005cea:	4608      	mov	r0, r1
 8005cec:	4611      	mov	r1, r2
 8005cee:	2200      	movs	r2, #0
 8005cf0:	602a      	str	r2, [r5, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f7fb fd67 	bl	80017c6 <_lseek>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_lseek_r+0x1e>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_lseek_r+0x1e>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	20000fd8 	.word	0x20000fd8

08005d08 <_read_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d07      	ldr	r5, [pc, #28]	@ (8005d28 <_read_r+0x20>)
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	4608      	mov	r0, r1
 8005d10:	4611      	mov	r1, r2
 8005d12:	2200      	movs	r2, #0
 8005d14:	602a      	str	r2, [r5, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f7fb fcf5 	bl	8001706 <_read>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_read_r+0x1e>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_read_r+0x1e>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	20000fd8 	.word	0x20000fd8

08005d2c <_write_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d07      	ldr	r5, [pc, #28]	@ (8005d4c <_write_r+0x20>)
 8005d30:	4604      	mov	r4, r0
 8005d32:	4608      	mov	r0, r1
 8005d34:	4611      	mov	r1, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	602a      	str	r2, [r5, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f7fb fd00 	bl	8001740 <_write>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_write_r+0x1e>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_write_r+0x1e>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	20000fd8 	.word	0x20000fd8

08005d50 <__errno>:
 8005d50:	4b01      	ldr	r3, [pc, #4]	@ (8005d58 <__errno+0x8>)
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20000018 	.word	0x20000018

08005d5c <__libc_init_array>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	4d0d      	ldr	r5, [pc, #52]	@ (8005d94 <__libc_init_array+0x38>)
 8005d60:	4c0d      	ldr	r4, [pc, #52]	@ (8005d98 <__libc_init_array+0x3c>)
 8005d62:	1b64      	subs	r4, r4, r5
 8005d64:	10a4      	asrs	r4, r4, #2
 8005d66:	2600      	movs	r6, #0
 8005d68:	42a6      	cmp	r6, r4
 8005d6a:	d109      	bne.n	8005d80 <__libc_init_array+0x24>
 8005d6c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d9c <__libc_init_array+0x40>)
 8005d6e:	4c0c      	ldr	r4, [pc, #48]	@ (8005da0 <__libc_init_array+0x44>)
 8005d70:	f002 f866 	bl	8007e40 <_init>
 8005d74:	1b64      	subs	r4, r4, r5
 8005d76:	10a4      	asrs	r4, r4, #2
 8005d78:	2600      	movs	r6, #0
 8005d7a:	42a6      	cmp	r6, r4
 8005d7c:	d105      	bne.n	8005d8a <__libc_init_array+0x2e>
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}
 8005d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d84:	4798      	blx	r3
 8005d86:	3601      	adds	r6, #1
 8005d88:	e7ee      	b.n	8005d68 <__libc_init_array+0xc>
 8005d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8e:	4798      	blx	r3
 8005d90:	3601      	adds	r6, #1
 8005d92:	e7f2      	b.n	8005d7a <__libc_init_array+0x1e>
 8005d94:	08008288 	.word	0x08008288
 8005d98:	08008288 	.word	0x08008288
 8005d9c:	08008288 	.word	0x08008288
 8005da0:	0800828c 	.word	0x0800828c

08005da4 <__retarget_lock_init_recursive>:
 8005da4:	4770      	bx	lr

08005da6 <__retarget_lock_acquire_recursive>:
 8005da6:	4770      	bx	lr

08005da8 <__retarget_lock_release_recursive>:
 8005da8:	4770      	bx	lr

08005daa <quorem>:
 8005daa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dae:	6903      	ldr	r3, [r0, #16]
 8005db0:	690c      	ldr	r4, [r1, #16]
 8005db2:	42a3      	cmp	r3, r4
 8005db4:	4607      	mov	r7, r0
 8005db6:	db7e      	blt.n	8005eb6 <quorem+0x10c>
 8005db8:	3c01      	subs	r4, #1
 8005dba:	f101 0814 	add.w	r8, r1, #20
 8005dbe:	00a3      	lsls	r3, r4, #2
 8005dc0:	f100 0514 	add.w	r5, r0, #20
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dca:	9301      	str	r3, [sp, #4]
 8005dcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ddc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005de0:	d32e      	bcc.n	8005e40 <quorem+0x96>
 8005de2:	f04f 0a00 	mov.w	sl, #0
 8005de6:	46c4      	mov	ip, r8
 8005de8:	46ae      	mov	lr, r5
 8005dea:	46d3      	mov	fp, sl
 8005dec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005df0:	b298      	uxth	r0, r3
 8005df2:	fb06 a000 	mla	r0, r6, r0, sl
 8005df6:	0c02      	lsrs	r2, r0, #16
 8005df8:	0c1b      	lsrs	r3, r3, #16
 8005dfa:	fb06 2303 	mla	r3, r6, r3, r2
 8005dfe:	f8de 2000 	ldr.w	r2, [lr]
 8005e02:	b280      	uxth	r0, r0
 8005e04:	b292      	uxth	r2, r2
 8005e06:	1a12      	subs	r2, r2, r0
 8005e08:	445a      	add	r2, fp
 8005e0a:	f8de 0000 	ldr.w	r0, [lr]
 8005e0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e18:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e1c:	b292      	uxth	r2, r2
 8005e1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e22:	45e1      	cmp	r9, ip
 8005e24:	f84e 2b04 	str.w	r2, [lr], #4
 8005e28:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e2c:	d2de      	bcs.n	8005dec <quorem+0x42>
 8005e2e:	9b00      	ldr	r3, [sp, #0]
 8005e30:	58eb      	ldr	r3, [r5, r3]
 8005e32:	b92b      	cbnz	r3, 8005e40 <quorem+0x96>
 8005e34:	9b01      	ldr	r3, [sp, #4]
 8005e36:	3b04      	subs	r3, #4
 8005e38:	429d      	cmp	r5, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	d32f      	bcc.n	8005e9e <quorem+0xf4>
 8005e3e:	613c      	str	r4, [r7, #16]
 8005e40:	4638      	mov	r0, r7
 8005e42:	f001 f97b 	bl	800713c <__mcmp>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	db25      	blt.n	8005e96 <quorem+0xec>
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e52:	f8d1 c000 	ldr.w	ip, [r1]
 8005e56:	fa1f fe82 	uxth.w	lr, r2
 8005e5a:	fa1f f38c 	uxth.w	r3, ip
 8005e5e:	eba3 030e 	sub.w	r3, r3, lr
 8005e62:	4403      	add	r3, r0
 8005e64:	0c12      	lsrs	r2, r2, #16
 8005e66:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e6a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e74:	45c1      	cmp	r9, r8
 8005e76:	f841 3b04 	str.w	r3, [r1], #4
 8005e7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e7e:	d2e6      	bcs.n	8005e4e <quorem+0xa4>
 8005e80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e88:	b922      	cbnz	r2, 8005e94 <quorem+0xea>
 8005e8a:	3b04      	subs	r3, #4
 8005e8c:	429d      	cmp	r5, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	d30b      	bcc.n	8005eaa <quorem+0x100>
 8005e92:	613c      	str	r4, [r7, #16]
 8005e94:	3601      	adds	r6, #1
 8005e96:	4630      	mov	r0, r6
 8005e98:	b003      	add	sp, #12
 8005e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	3b04      	subs	r3, #4
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	d1cb      	bne.n	8005e3e <quorem+0x94>
 8005ea6:	3c01      	subs	r4, #1
 8005ea8:	e7c6      	b.n	8005e38 <quorem+0x8e>
 8005eaa:	6812      	ldr	r2, [r2, #0]
 8005eac:	3b04      	subs	r3, #4
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	d1ef      	bne.n	8005e92 <quorem+0xe8>
 8005eb2:	3c01      	subs	r4, #1
 8005eb4:	e7ea      	b.n	8005e8c <quorem+0xe2>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e7ee      	b.n	8005e98 <quorem+0xee>
 8005eba:	0000      	movs	r0, r0
 8005ebc:	0000      	movs	r0, r0
	...

08005ec0 <_dtoa_r>:
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	69c7      	ldr	r7, [r0, #28]
 8005ec6:	b099      	sub	sp, #100	@ 0x64
 8005ec8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ecc:	ec55 4b10 	vmov	r4, r5, d0
 8005ed0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005ed2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ed4:	4683      	mov	fp, r0
 8005ed6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ed8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005eda:	b97f      	cbnz	r7, 8005efc <_dtoa_r+0x3c>
 8005edc:	2010      	movs	r0, #16
 8005ede:	f000 fdfd 	bl	8006adc <malloc>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005ee8:	b920      	cbnz	r0, 8005ef4 <_dtoa_r+0x34>
 8005eea:	4ba7      	ldr	r3, [pc, #668]	@ (8006188 <_dtoa_r+0x2c8>)
 8005eec:	21ef      	movs	r1, #239	@ 0xef
 8005eee:	48a7      	ldr	r0, [pc, #668]	@ (800618c <_dtoa_r+0x2cc>)
 8005ef0:	f001 fc68 	bl	80077c4 <__assert_func>
 8005ef4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ef8:	6007      	str	r7, [r0, #0]
 8005efa:	60c7      	str	r7, [r0, #12]
 8005efc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f00:	6819      	ldr	r1, [r3, #0]
 8005f02:	b159      	cbz	r1, 8005f1c <_dtoa_r+0x5c>
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	604a      	str	r2, [r1, #4]
 8005f08:	2301      	movs	r3, #1
 8005f0a:	4093      	lsls	r3, r2
 8005f0c:	608b      	str	r3, [r1, #8]
 8005f0e:	4658      	mov	r0, fp
 8005f10:	f000 feda 	bl	8006cc8 <_Bfree>
 8005f14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	1e2b      	subs	r3, r5, #0
 8005f1e:	bfb9      	ittee	lt
 8005f20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f24:	9303      	strlt	r3, [sp, #12]
 8005f26:	2300      	movge	r3, #0
 8005f28:	6033      	strge	r3, [r6, #0]
 8005f2a:	9f03      	ldr	r7, [sp, #12]
 8005f2c:	4b98      	ldr	r3, [pc, #608]	@ (8006190 <_dtoa_r+0x2d0>)
 8005f2e:	bfbc      	itt	lt
 8005f30:	2201      	movlt	r2, #1
 8005f32:	6032      	strlt	r2, [r6, #0]
 8005f34:	43bb      	bics	r3, r7
 8005f36:	d112      	bne.n	8005f5e <_dtoa_r+0x9e>
 8005f38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f44:	4323      	orrs	r3, r4
 8005f46:	f000 854d 	beq.w	80069e4 <_dtoa_r+0xb24>
 8005f4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f4c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80061a4 <_dtoa_r+0x2e4>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 854f 	beq.w	80069f4 <_dtoa_r+0xb34>
 8005f56:	f10a 0303 	add.w	r3, sl, #3
 8005f5a:	f000 bd49 	b.w	80069f0 <_dtoa_r+0xb30>
 8005f5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f62:	2200      	movs	r2, #0
 8005f64:	ec51 0b17 	vmov	r0, r1, d7
 8005f68:	2300      	movs	r3, #0
 8005f6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005f6e:	f7fa fdab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f72:	4680      	mov	r8, r0
 8005f74:	b158      	cbz	r0, 8005f8e <_dtoa_r+0xce>
 8005f76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f78:	2301      	movs	r3, #1
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f7e:	b113      	cbz	r3, 8005f86 <_dtoa_r+0xc6>
 8005f80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f82:	4b84      	ldr	r3, [pc, #528]	@ (8006194 <_dtoa_r+0x2d4>)
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80061a8 <_dtoa_r+0x2e8>
 8005f8a:	f000 bd33 	b.w	80069f4 <_dtoa_r+0xb34>
 8005f8e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005f92:	aa16      	add	r2, sp, #88	@ 0x58
 8005f94:	a917      	add	r1, sp, #92	@ 0x5c
 8005f96:	4658      	mov	r0, fp
 8005f98:	f001 f980 	bl	800729c <__d2b>
 8005f9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005fa0:	4681      	mov	r9, r0
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	d077      	beq.n	8006096 <_dtoa_r+0x1d6>
 8005fa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fa8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005fb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005fbc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4b74      	ldr	r3, [pc, #464]	@ (8006198 <_dtoa_r+0x2d8>)
 8005fc6:	f7fa f95f 	bl	8000288 <__aeabi_dsub>
 8005fca:	a369      	add	r3, pc, #420	@ (adr r3, 8006170 <_dtoa_r+0x2b0>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa fb12 	bl	80005f8 <__aeabi_dmul>
 8005fd4:	a368      	add	r3, pc, #416	@ (adr r3, 8006178 <_dtoa_r+0x2b8>)
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f7fa f957 	bl	800028c <__adddf3>
 8005fde:	4604      	mov	r4, r0
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	460d      	mov	r5, r1
 8005fe4:	f7fa fa9e 	bl	8000524 <__aeabi_i2d>
 8005fe8:	a365      	add	r3, pc, #404	@ (adr r3, 8006180 <_dtoa_r+0x2c0>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa fb03 	bl	80005f8 <__aeabi_dmul>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	f7fa f947 	bl	800028c <__adddf3>
 8005ffe:	4604      	mov	r4, r0
 8006000:	460d      	mov	r5, r1
 8006002:	f7fa fda9 	bl	8000b58 <__aeabi_d2iz>
 8006006:	2200      	movs	r2, #0
 8006008:	4607      	mov	r7, r0
 800600a:	2300      	movs	r3, #0
 800600c:	4620      	mov	r0, r4
 800600e:	4629      	mov	r1, r5
 8006010:	f7fa fd64 	bl	8000adc <__aeabi_dcmplt>
 8006014:	b140      	cbz	r0, 8006028 <_dtoa_r+0x168>
 8006016:	4638      	mov	r0, r7
 8006018:	f7fa fa84 	bl	8000524 <__aeabi_i2d>
 800601c:	4622      	mov	r2, r4
 800601e:	462b      	mov	r3, r5
 8006020:	f7fa fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 8006024:	b900      	cbnz	r0, 8006028 <_dtoa_r+0x168>
 8006026:	3f01      	subs	r7, #1
 8006028:	2f16      	cmp	r7, #22
 800602a:	d851      	bhi.n	80060d0 <_dtoa_r+0x210>
 800602c:	4b5b      	ldr	r3, [pc, #364]	@ (800619c <_dtoa_r+0x2dc>)
 800602e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800603a:	f7fa fd4f 	bl	8000adc <__aeabi_dcmplt>
 800603e:	2800      	cmp	r0, #0
 8006040:	d048      	beq.n	80060d4 <_dtoa_r+0x214>
 8006042:	3f01      	subs	r7, #1
 8006044:	2300      	movs	r3, #0
 8006046:	9312      	str	r3, [sp, #72]	@ 0x48
 8006048:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800604a:	1b9b      	subs	r3, r3, r6
 800604c:	1e5a      	subs	r2, r3, #1
 800604e:	bf44      	itt	mi
 8006050:	f1c3 0801 	rsbmi	r8, r3, #1
 8006054:	2300      	movmi	r3, #0
 8006056:	9208      	str	r2, [sp, #32]
 8006058:	bf54      	ite	pl
 800605a:	f04f 0800 	movpl.w	r8, #0
 800605e:	9308      	strmi	r3, [sp, #32]
 8006060:	2f00      	cmp	r7, #0
 8006062:	db39      	blt.n	80060d8 <_dtoa_r+0x218>
 8006064:	9b08      	ldr	r3, [sp, #32]
 8006066:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006068:	443b      	add	r3, r7
 800606a:	9308      	str	r3, [sp, #32]
 800606c:	2300      	movs	r3, #0
 800606e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006072:	2b09      	cmp	r3, #9
 8006074:	d864      	bhi.n	8006140 <_dtoa_r+0x280>
 8006076:	2b05      	cmp	r3, #5
 8006078:	bfc4      	itt	gt
 800607a:	3b04      	subgt	r3, #4
 800607c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800607e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006080:	f1a3 0302 	sub.w	r3, r3, #2
 8006084:	bfcc      	ite	gt
 8006086:	2400      	movgt	r4, #0
 8006088:	2401      	movle	r4, #1
 800608a:	2b03      	cmp	r3, #3
 800608c:	d863      	bhi.n	8006156 <_dtoa_r+0x296>
 800608e:	e8df f003 	tbb	[pc, r3]
 8006092:	372a      	.short	0x372a
 8006094:	5535      	.short	0x5535
 8006096:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800609a:	441e      	add	r6, r3
 800609c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	bfc1      	itttt	gt
 80060a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80060a8:	409f      	lslgt	r7, r3
 80060aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80060ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80060b2:	bfd6      	itet	le
 80060b4:	f1c3 0320 	rsble	r3, r3, #32
 80060b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80060bc:	fa04 f003 	lslle.w	r0, r4, r3
 80060c0:	f7fa fa20 	bl	8000504 <__aeabi_ui2d>
 80060c4:	2201      	movs	r2, #1
 80060c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80060ca:	3e01      	subs	r6, #1
 80060cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80060ce:	e777      	b.n	8005fc0 <_dtoa_r+0x100>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e7b8      	b.n	8006046 <_dtoa_r+0x186>
 80060d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80060d6:	e7b7      	b.n	8006048 <_dtoa_r+0x188>
 80060d8:	427b      	negs	r3, r7
 80060da:	930a      	str	r3, [sp, #40]	@ 0x28
 80060dc:	2300      	movs	r3, #0
 80060de:	eba8 0807 	sub.w	r8, r8, r7
 80060e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80060e4:	e7c4      	b.n	8006070 <_dtoa_r+0x1b0>
 80060e6:	2300      	movs	r3, #0
 80060e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dc35      	bgt.n	800615c <_dtoa_r+0x29c>
 80060f0:	2301      	movs	r3, #1
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	9307      	str	r3, [sp, #28]
 80060f6:	461a      	mov	r2, r3
 80060f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80060fa:	e00b      	b.n	8006114 <_dtoa_r+0x254>
 80060fc:	2301      	movs	r3, #1
 80060fe:	e7f3      	b.n	80060e8 <_dtoa_r+0x228>
 8006100:	2300      	movs	r3, #0
 8006102:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	3301      	adds	r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	9307      	str	r3, [sp, #28]
 8006110:	bfb8      	it	lt
 8006112:	2301      	movlt	r3, #1
 8006114:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006118:	2100      	movs	r1, #0
 800611a:	2204      	movs	r2, #4
 800611c:	f102 0514 	add.w	r5, r2, #20
 8006120:	429d      	cmp	r5, r3
 8006122:	d91f      	bls.n	8006164 <_dtoa_r+0x2a4>
 8006124:	6041      	str	r1, [r0, #4]
 8006126:	4658      	mov	r0, fp
 8006128:	f000 fd8e 	bl	8006c48 <_Balloc>
 800612c:	4682      	mov	sl, r0
 800612e:	2800      	cmp	r0, #0
 8006130:	d13c      	bne.n	80061ac <_dtoa_r+0x2ec>
 8006132:	4b1b      	ldr	r3, [pc, #108]	@ (80061a0 <_dtoa_r+0x2e0>)
 8006134:	4602      	mov	r2, r0
 8006136:	f240 11af 	movw	r1, #431	@ 0x1af
 800613a:	e6d8      	b.n	8005eee <_dtoa_r+0x2e>
 800613c:	2301      	movs	r3, #1
 800613e:	e7e0      	b.n	8006102 <_dtoa_r+0x242>
 8006140:	2401      	movs	r4, #1
 8006142:	2300      	movs	r3, #0
 8006144:	9309      	str	r3, [sp, #36]	@ 0x24
 8006146:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006148:	f04f 33ff 	mov.w	r3, #4294967295
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	9307      	str	r3, [sp, #28]
 8006150:	2200      	movs	r2, #0
 8006152:	2312      	movs	r3, #18
 8006154:	e7d0      	b.n	80060f8 <_dtoa_r+0x238>
 8006156:	2301      	movs	r3, #1
 8006158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800615a:	e7f5      	b.n	8006148 <_dtoa_r+0x288>
 800615c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	9307      	str	r3, [sp, #28]
 8006162:	e7d7      	b.n	8006114 <_dtoa_r+0x254>
 8006164:	3101      	adds	r1, #1
 8006166:	0052      	lsls	r2, r2, #1
 8006168:	e7d8      	b.n	800611c <_dtoa_r+0x25c>
 800616a:	bf00      	nop
 800616c:	f3af 8000 	nop.w
 8006170:	636f4361 	.word	0x636f4361
 8006174:	3fd287a7 	.word	0x3fd287a7
 8006178:	8b60c8b3 	.word	0x8b60c8b3
 800617c:	3fc68a28 	.word	0x3fc68a28
 8006180:	509f79fb 	.word	0x509f79fb
 8006184:	3fd34413 	.word	0x3fd34413
 8006188:	08007f51 	.word	0x08007f51
 800618c:	08007f68 	.word	0x08007f68
 8006190:	7ff00000 	.word	0x7ff00000
 8006194:	08007f21 	.word	0x08007f21
 8006198:	3ff80000 	.word	0x3ff80000
 800619c:	08008060 	.word	0x08008060
 80061a0:	08007fc0 	.word	0x08007fc0
 80061a4:	08007f4d 	.word	0x08007f4d
 80061a8:	08007f20 	.word	0x08007f20
 80061ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061b0:	6018      	str	r0, [r3, #0]
 80061b2:	9b07      	ldr	r3, [sp, #28]
 80061b4:	2b0e      	cmp	r3, #14
 80061b6:	f200 80a4 	bhi.w	8006302 <_dtoa_r+0x442>
 80061ba:	2c00      	cmp	r4, #0
 80061bc:	f000 80a1 	beq.w	8006302 <_dtoa_r+0x442>
 80061c0:	2f00      	cmp	r7, #0
 80061c2:	dd33      	ble.n	800622c <_dtoa_r+0x36c>
 80061c4:	4bad      	ldr	r3, [pc, #692]	@ (800647c <_dtoa_r+0x5bc>)
 80061c6:	f007 020f 	and.w	r2, r7, #15
 80061ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ce:	ed93 7b00 	vldr	d7, [r3]
 80061d2:	05f8      	lsls	r0, r7, #23
 80061d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80061d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80061dc:	d516      	bpl.n	800620c <_dtoa_r+0x34c>
 80061de:	4ba8      	ldr	r3, [pc, #672]	@ (8006480 <_dtoa_r+0x5c0>)
 80061e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061e8:	f7fa fb30 	bl	800084c <__aeabi_ddiv>
 80061ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061f0:	f004 040f 	and.w	r4, r4, #15
 80061f4:	2603      	movs	r6, #3
 80061f6:	4da2      	ldr	r5, [pc, #648]	@ (8006480 <_dtoa_r+0x5c0>)
 80061f8:	b954      	cbnz	r4, 8006210 <_dtoa_r+0x350>
 80061fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006202:	f7fa fb23 	bl	800084c <__aeabi_ddiv>
 8006206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800620a:	e028      	b.n	800625e <_dtoa_r+0x39e>
 800620c:	2602      	movs	r6, #2
 800620e:	e7f2      	b.n	80061f6 <_dtoa_r+0x336>
 8006210:	07e1      	lsls	r1, r4, #31
 8006212:	d508      	bpl.n	8006226 <_dtoa_r+0x366>
 8006214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006218:	e9d5 2300 	ldrd	r2, r3, [r5]
 800621c:	f7fa f9ec 	bl	80005f8 <__aeabi_dmul>
 8006220:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006224:	3601      	adds	r6, #1
 8006226:	1064      	asrs	r4, r4, #1
 8006228:	3508      	adds	r5, #8
 800622a:	e7e5      	b.n	80061f8 <_dtoa_r+0x338>
 800622c:	f000 80d2 	beq.w	80063d4 <_dtoa_r+0x514>
 8006230:	427c      	negs	r4, r7
 8006232:	4b92      	ldr	r3, [pc, #584]	@ (800647c <_dtoa_r+0x5bc>)
 8006234:	4d92      	ldr	r5, [pc, #584]	@ (8006480 <_dtoa_r+0x5c0>)
 8006236:	f004 020f 	and.w	r2, r4, #15
 800623a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006246:	f7fa f9d7 	bl	80005f8 <__aeabi_dmul>
 800624a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800624e:	1124      	asrs	r4, r4, #4
 8006250:	2300      	movs	r3, #0
 8006252:	2602      	movs	r6, #2
 8006254:	2c00      	cmp	r4, #0
 8006256:	f040 80b2 	bne.w	80063be <_dtoa_r+0x4fe>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1d3      	bne.n	8006206 <_dtoa_r+0x346>
 800625e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006260:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80b7 	beq.w	80063d8 <_dtoa_r+0x518>
 800626a:	4b86      	ldr	r3, [pc, #536]	@ (8006484 <_dtoa_r+0x5c4>)
 800626c:	2200      	movs	r2, #0
 800626e:	4620      	mov	r0, r4
 8006270:	4629      	mov	r1, r5
 8006272:	f7fa fc33 	bl	8000adc <__aeabi_dcmplt>
 8006276:	2800      	cmp	r0, #0
 8006278:	f000 80ae 	beq.w	80063d8 <_dtoa_r+0x518>
 800627c:	9b07      	ldr	r3, [sp, #28]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 80aa 	beq.w	80063d8 <_dtoa_r+0x518>
 8006284:	9b00      	ldr	r3, [sp, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	dd37      	ble.n	80062fa <_dtoa_r+0x43a>
 800628a:	1e7b      	subs	r3, r7, #1
 800628c:	9304      	str	r3, [sp, #16]
 800628e:	4620      	mov	r0, r4
 8006290:	4b7d      	ldr	r3, [pc, #500]	@ (8006488 <_dtoa_r+0x5c8>)
 8006292:	2200      	movs	r2, #0
 8006294:	4629      	mov	r1, r5
 8006296:	f7fa f9af 	bl	80005f8 <__aeabi_dmul>
 800629a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800629e:	9c00      	ldr	r4, [sp, #0]
 80062a0:	3601      	adds	r6, #1
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7fa f93e 	bl	8000524 <__aeabi_i2d>
 80062a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062ac:	f7fa f9a4 	bl	80005f8 <__aeabi_dmul>
 80062b0:	4b76      	ldr	r3, [pc, #472]	@ (800648c <_dtoa_r+0x5cc>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	f7f9 ffea 	bl	800028c <__adddf3>
 80062b8:	4605      	mov	r5, r0
 80062ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80062be:	2c00      	cmp	r4, #0
 80062c0:	f040 808d 	bne.w	80063de <_dtoa_r+0x51e>
 80062c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062c8:	4b71      	ldr	r3, [pc, #452]	@ (8006490 <_dtoa_r+0x5d0>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	f7f9 ffdc 	bl	8000288 <__aeabi_dsub>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062d8:	462a      	mov	r2, r5
 80062da:	4633      	mov	r3, r6
 80062dc:	f7fa fc1c 	bl	8000b18 <__aeabi_dcmpgt>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	f040 828b 	bne.w	80067fc <_dtoa_r+0x93c>
 80062e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ea:	462a      	mov	r2, r5
 80062ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80062f0:	f7fa fbf4 	bl	8000adc <__aeabi_dcmplt>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f040 8128 	bne.w	800654a <_dtoa_r+0x68a>
 80062fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80062fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006302:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006304:	2b00      	cmp	r3, #0
 8006306:	f2c0 815a 	blt.w	80065be <_dtoa_r+0x6fe>
 800630a:	2f0e      	cmp	r7, #14
 800630c:	f300 8157 	bgt.w	80065be <_dtoa_r+0x6fe>
 8006310:	4b5a      	ldr	r3, [pc, #360]	@ (800647c <_dtoa_r+0x5bc>)
 8006312:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006316:	ed93 7b00 	vldr	d7, [r3]
 800631a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800631c:	2b00      	cmp	r3, #0
 800631e:	ed8d 7b00 	vstr	d7, [sp]
 8006322:	da03      	bge.n	800632c <_dtoa_r+0x46c>
 8006324:	9b07      	ldr	r3, [sp, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f340 8101 	ble.w	800652e <_dtoa_r+0x66e>
 800632c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006330:	4656      	mov	r6, sl
 8006332:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006336:	4620      	mov	r0, r4
 8006338:	4629      	mov	r1, r5
 800633a:	f7fa fa87 	bl	800084c <__aeabi_ddiv>
 800633e:	f7fa fc0b 	bl	8000b58 <__aeabi_d2iz>
 8006342:	4680      	mov	r8, r0
 8006344:	f7fa f8ee 	bl	8000524 <__aeabi_i2d>
 8006348:	e9dd 2300 	ldrd	r2, r3, [sp]
 800634c:	f7fa f954 	bl	80005f8 <__aeabi_dmul>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4620      	mov	r0, r4
 8006356:	4629      	mov	r1, r5
 8006358:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800635c:	f7f9 ff94 	bl	8000288 <__aeabi_dsub>
 8006360:	f806 4b01 	strb.w	r4, [r6], #1
 8006364:	9d07      	ldr	r5, [sp, #28]
 8006366:	eba6 040a 	sub.w	r4, r6, sl
 800636a:	42a5      	cmp	r5, r4
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	f040 8117 	bne.w	80065a2 <_dtoa_r+0x6e2>
 8006374:	f7f9 ff8a 	bl	800028c <__adddf3>
 8006378:	e9dd 2300 	ldrd	r2, r3, [sp]
 800637c:	4604      	mov	r4, r0
 800637e:	460d      	mov	r5, r1
 8006380:	f7fa fbca 	bl	8000b18 <__aeabi_dcmpgt>
 8006384:	2800      	cmp	r0, #0
 8006386:	f040 80f9 	bne.w	800657c <_dtoa_r+0x6bc>
 800638a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800638e:	4620      	mov	r0, r4
 8006390:	4629      	mov	r1, r5
 8006392:	f7fa fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 8006396:	b118      	cbz	r0, 80063a0 <_dtoa_r+0x4e0>
 8006398:	f018 0f01 	tst.w	r8, #1
 800639c:	f040 80ee 	bne.w	800657c <_dtoa_r+0x6bc>
 80063a0:	4649      	mov	r1, r9
 80063a2:	4658      	mov	r0, fp
 80063a4:	f000 fc90 	bl	8006cc8 <_Bfree>
 80063a8:	2300      	movs	r3, #0
 80063aa:	7033      	strb	r3, [r6, #0]
 80063ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063ae:	3701      	adds	r7, #1
 80063b0:	601f      	str	r7, [r3, #0]
 80063b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 831d 	beq.w	80069f4 <_dtoa_r+0xb34>
 80063ba:	601e      	str	r6, [r3, #0]
 80063bc:	e31a      	b.n	80069f4 <_dtoa_r+0xb34>
 80063be:	07e2      	lsls	r2, r4, #31
 80063c0:	d505      	bpl.n	80063ce <_dtoa_r+0x50e>
 80063c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063c6:	f7fa f917 	bl	80005f8 <__aeabi_dmul>
 80063ca:	3601      	adds	r6, #1
 80063cc:	2301      	movs	r3, #1
 80063ce:	1064      	asrs	r4, r4, #1
 80063d0:	3508      	adds	r5, #8
 80063d2:	e73f      	b.n	8006254 <_dtoa_r+0x394>
 80063d4:	2602      	movs	r6, #2
 80063d6:	e742      	b.n	800625e <_dtoa_r+0x39e>
 80063d8:	9c07      	ldr	r4, [sp, #28]
 80063da:	9704      	str	r7, [sp, #16]
 80063dc:	e761      	b.n	80062a2 <_dtoa_r+0x3e2>
 80063de:	4b27      	ldr	r3, [pc, #156]	@ (800647c <_dtoa_r+0x5bc>)
 80063e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063ea:	4454      	add	r4, sl
 80063ec:	2900      	cmp	r1, #0
 80063ee:	d053      	beq.n	8006498 <_dtoa_r+0x5d8>
 80063f0:	4928      	ldr	r1, [pc, #160]	@ (8006494 <_dtoa_r+0x5d4>)
 80063f2:	2000      	movs	r0, #0
 80063f4:	f7fa fa2a 	bl	800084c <__aeabi_ddiv>
 80063f8:	4633      	mov	r3, r6
 80063fa:	462a      	mov	r2, r5
 80063fc:	f7f9 ff44 	bl	8000288 <__aeabi_dsub>
 8006400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006404:	4656      	mov	r6, sl
 8006406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800640a:	f7fa fba5 	bl	8000b58 <__aeabi_d2iz>
 800640e:	4605      	mov	r5, r0
 8006410:	f7fa f888 	bl	8000524 <__aeabi_i2d>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800641c:	f7f9 ff34 	bl	8000288 <__aeabi_dsub>
 8006420:	3530      	adds	r5, #48	@ 0x30
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800642a:	f806 5b01 	strb.w	r5, [r6], #1
 800642e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006432:	f7fa fb53 	bl	8000adc <__aeabi_dcmplt>
 8006436:	2800      	cmp	r0, #0
 8006438:	d171      	bne.n	800651e <_dtoa_r+0x65e>
 800643a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800643e:	4911      	ldr	r1, [pc, #68]	@ (8006484 <_dtoa_r+0x5c4>)
 8006440:	2000      	movs	r0, #0
 8006442:	f7f9 ff21 	bl	8000288 <__aeabi_dsub>
 8006446:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800644a:	f7fa fb47 	bl	8000adc <__aeabi_dcmplt>
 800644e:	2800      	cmp	r0, #0
 8006450:	f040 8095 	bne.w	800657e <_dtoa_r+0x6be>
 8006454:	42a6      	cmp	r6, r4
 8006456:	f43f af50 	beq.w	80062fa <_dtoa_r+0x43a>
 800645a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800645e:	4b0a      	ldr	r3, [pc, #40]	@ (8006488 <_dtoa_r+0x5c8>)
 8006460:	2200      	movs	r2, #0
 8006462:	f7fa f8c9 	bl	80005f8 <__aeabi_dmul>
 8006466:	4b08      	ldr	r3, [pc, #32]	@ (8006488 <_dtoa_r+0x5c8>)
 8006468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800646c:	2200      	movs	r2, #0
 800646e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006472:	f7fa f8c1 	bl	80005f8 <__aeabi_dmul>
 8006476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800647a:	e7c4      	b.n	8006406 <_dtoa_r+0x546>
 800647c:	08008060 	.word	0x08008060
 8006480:	08008038 	.word	0x08008038
 8006484:	3ff00000 	.word	0x3ff00000
 8006488:	40240000 	.word	0x40240000
 800648c:	401c0000 	.word	0x401c0000
 8006490:	40140000 	.word	0x40140000
 8006494:	3fe00000 	.word	0x3fe00000
 8006498:	4631      	mov	r1, r6
 800649a:	4628      	mov	r0, r5
 800649c:	f7fa f8ac 	bl	80005f8 <__aeabi_dmul>
 80064a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80064a6:	4656      	mov	r6, sl
 80064a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ac:	f7fa fb54 	bl	8000b58 <__aeabi_d2iz>
 80064b0:	4605      	mov	r5, r0
 80064b2:	f7fa f837 	bl	8000524 <__aeabi_i2d>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064be:	f7f9 fee3 	bl	8000288 <__aeabi_dsub>
 80064c2:	3530      	adds	r5, #48	@ 0x30
 80064c4:	f806 5b01 	strb.w	r5, [r6], #1
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	42a6      	cmp	r6, r4
 80064ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064d2:	f04f 0200 	mov.w	r2, #0
 80064d6:	d124      	bne.n	8006522 <_dtoa_r+0x662>
 80064d8:	4bac      	ldr	r3, [pc, #688]	@ (800678c <_dtoa_r+0x8cc>)
 80064da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064de:	f7f9 fed5 	bl	800028c <__adddf3>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ea:	f7fa fb15 	bl	8000b18 <__aeabi_dcmpgt>
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d145      	bne.n	800657e <_dtoa_r+0x6be>
 80064f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064f6:	49a5      	ldr	r1, [pc, #660]	@ (800678c <_dtoa_r+0x8cc>)
 80064f8:	2000      	movs	r0, #0
 80064fa:	f7f9 fec5 	bl	8000288 <__aeabi_dsub>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006506:	f7fa fae9 	bl	8000adc <__aeabi_dcmplt>
 800650a:	2800      	cmp	r0, #0
 800650c:	f43f aef5 	beq.w	80062fa <_dtoa_r+0x43a>
 8006510:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006512:	1e73      	subs	r3, r6, #1
 8006514:	9315      	str	r3, [sp, #84]	@ 0x54
 8006516:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800651a:	2b30      	cmp	r3, #48	@ 0x30
 800651c:	d0f8      	beq.n	8006510 <_dtoa_r+0x650>
 800651e:	9f04      	ldr	r7, [sp, #16]
 8006520:	e73e      	b.n	80063a0 <_dtoa_r+0x4e0>
 8006522:	4b9b      	ldr	r3, [pc, #620]	@ (8006790 <_dtoa_r+0x8d0>)
 8006524:	f7fa f868 	bl	80005f8 <__aeabi_dmul>
 8006528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800652c:	e7bc      	b.n	80064a8 <_dtoa_r+0x5e8>
 800652e:	d10c      	bne.n	800654a <_dtoa_r+0x68a>
 8006530:	4b98      	ldr	r3, [pc, #608]	@ (8006794 <_dtoa_r+0x8d4>)
 8006532:	2200      	movs	r2, #0
 8006534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006538:	f7fa f85e 	bl	80005f8 <__aeabi_dmul>
 800653c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006540:	f7fa fae0 	bl	8000b04 <__aeabi_dcmpge>
 8006544:	2800      	cmp	r0, #0
 8006546:	f000 8157 	beq.w	80067f8 <_dtoa_r+0x938>
 800654a:	2400      	movs	r4, #0
 800654c:	4625      	mov	r5, r4
 800654e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006550:	43db      	mvns	r3, r3
 8006552:	9304      	str	r3, [sp, #16]
 8006554:	4656      	mov	r6, sl
 8006556:	2700      	movs	r7, #0
 8006558:	4621      	mov	r1, r4
 800655a:	4658      	mov	r0, fp
 800655c:	f000 fbb4 	bl	8006cc8 <_Bfree>
 8006560:	2d00      	cmp	r5, #0
 8006562:	d0dc      	beq.n	800651e <_dtoa_r+0x65e>
 8006564:	b12f      	cbz	r7, 8006572 <_dtoa_r+0x6b2>
 8006566:	42af      	cmp	r7, r5
 8006568:	d003      	beq.n	8006572 <_dtoa_r+0x6b2>
 800656a:	4639      	mov	r1, r7
 800656c:	4658      	mov	r0, fp
 800656e:	f000 fbab 	bl	8006cc8 <_Bfree>
 8006572:	4629      	mov	r1, r5
 8006574:	4658      	mov	r0, fp
 8006576:	f000 fba7 	bl	8006cc8 <_Bfree>
 800657a:	e7d0      	b.n	800651e <_dtoa_r+0x65e>
 800657c:	9704      	str	r7, [sp, #16]
 800657e:	4633      	mov	r3, r6
 8006580:	461e      	mov	r6, r3
 8006582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006586:	2a39      	cmp	r2, #57	@ 0x39
 8006588:	d107      	bne.n	800659a <_dtoa_r+0x6da>
 800658a:	459a      	cmp	sl, r3
 800658c:	d1f8      	bne.n	8006580 <_dtoa_r+0x6c0>
 800658e:	9a04      	ldr	r2, [sp, #16]
 8006590:	3201      	adds	r2, #1
 8006592:	9204      	str	r2, [sp, #16]
 8006594:	2230      	movs	r2, #48	@ 0x30
 8006596:	f88a 2000 	strb.w	r2, [sl]
 800659a:	781a      	ldrb	r2, [r3, #0]
 800659c:	3201      	adds	r2, #1
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	e7bd      	b.n	800651e <_dtoa_r+0x65e>
 80065a2:	4b7b      	ldr	r3, [pc, #492]	@ (8006790 <_dtoa_r+0x8d0>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	f7fa f827 	bl	80005f8 <__aeabi_dmul>
 80065aa:	2200      	movs	r2, #0
 80065ac:	2300      	movs	r3, #0
 80065ae:	4604      	mov	r4, r0
 80065b0:	460d      	mov	r5, r1
 80065b2:	f7fa fa89 	bl	8000ac8 <__aeabi_dcmpeq>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	f43f aebb 	beq.w	8006332 <_dtoa_r+0x472>
 80065bc:	e6f0      	b.n	80063a0 <_dtoa_r+0x4e0>
 80065be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80065c0:	2a00      	cmp	r2, #0
 80065c2:	f000 80db 	beq.w	800677c <_dtoa_r+0x8bc>
 80065c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065c8:	2a01      	cmp	r2, #1
 80065ca:	f300 80bf 	bgt.w	800674c <_dtoa_r+0x88c>
 80065ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	f000 80b7 	beq.w	8006744 <_dtoa_r+0x884>
 80065d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80065da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065dc:	4646      	mov	r6, r8
 80065de:	9a08      	ldr	r2, [sp, #32]
 80065e0:	2101      	movs	r1, #1
 80065e2:	441a      	add	r2, r3
 80065e4:	4658      	mov	r0, fp
 80065e6:	4498      	add	r8, r3
 80065e8:	9208      	str	r2, [sp, #32]
 80065ea:	f000 fc21 	bl	8006e30 <__i2b>
 80065ee:	4605      	mov	r5, r0
 80065f0:	b15e      	cbz	r6, 800660a <_dtoa_r+0x74a>
 80065f2:	9b08      	ldr	r3, [sp, #32]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dd08      	ble.n	800660a <_dtoa_r+0x74a>
 80065f8:	42b3      	cmp	r3, r6
 80065fa:	9a08      	ldr	r2, [sp, #32]
 80065fc:	bfa8      	it	ge
 80065fe:	4633      	movge	r3, r6
 8006600:	eba8 0803 	sub.w	r8, r8, r3
 8006604:	1af6      	subs	r6, r6, r3
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	9308      	str	r3, [sp, #32]
 800660a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800660c:	b1f3      	cbz	r3, 800664c <_dtoa_r+0x78c>
 800660e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80b7 	beq.w	8006784 <_dtoa_r+0x8c4>
 8006616:	b18c      	cbz	r4, 800663c <_dtoa_r+0x77c>
 8006618:	4629      	mov	r1, r5
 800661a:	4622      	mov	r2, r4
 800661c:	4658      	mov	r0, fp
 800661e:	f000 fcc7 	bl	8006fb0 <__pow5mult>
 8006622:	464a      	mov	r2, r9
 8006624:	4601      	mov	r1, r0
 8006626:	4605      	mov	r5, r0
 8006628:	4658      	mov	r0, fp
 800662a:	f000 fc17 	bl	8006e5c <__multiply>
 800662e:	4649      	mov	r1, r9
 8006630:	9004      	str	r0, [sp, #16]
 8006632:	4658      	mov	r0, fp
 8006634:	f000 fb48 	bl	8006cc8 <_Bfree>
 8006638:	9b04      	ldr	r3, [sp, #16]
 800663a:	4699      	mov	r9, r3
 800663c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800663e:	1b1a      	subs	r2, r3, r4
 8006640:	d004      	beq.n	800664c <_dtoa_r+0x78c>
 8006642:	4649      	mov	r1, r9
 8006644:	4658      	mov	r0, fp
 8006646:	f000 fcb3 	bl	8006fb0 <__pow5mult>
 800664a:	4681      	mov	r9, r0
 800664c:	2101      	movs	r1, #1
 800664e:	4658      	mov	r0, fp
 8006650:	f000 fbee 	bl	8006e30 <__i2b>
 8006654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006656:	4604      	mov	r4, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 81cf 	beq.w	80069fc <_dtoa_r+0xb3c>
 800665e:	461a      	mov	r2, r3
 8006660:	4601      	mov	r1, r0
 8006662:	4658      	mov	r0, fp
 8006664:	f000 fca4 	bl	8006fb0 <__pow5mult>
 8006668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800666a:	2b01      	cmp	r3, #1
 800666c:	4604      	mov	r4, r0
 800666e:	f300 8095 	bgt.w	800679c <_dtoa_r+0x8dc>
 8006672:	9b02      	ldr	r3, [sp, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f040 8087 	bne.w	8006788 <_dtoa_r+0x8c8>
 800667a:	9b03      	ldr	r3, [sp, #12]
 800667c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006680:	2b00      	cmp	r3, #0
 8006682:	f040 8089 	bne.w	8006798 <_dtoa_r+0x8d8>
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800668c:	0d1b      	lsrs	r3, r3, #20
 800668e:	051b      	lsls	r3, r3, #20
 8006690:	b12b      	cbz	r3, 800669e <_dtoa_r+0x7de>
 8006692:	9b08      	ldr	r3, [sp, #32]
 8006694:	3301      	adds	r3, #1
 8006696:	9308      	str	r3, [sp, #32]
 8006698:	f108 0801 	add.w	r8, r8, #1
 800669c:	2301      	movs	r3, #1
 800669e:	930a      	str	r3, [sp, #40]	@ 0x28
 80066a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 81b0 	beq.w	8006a08 <_dtoa_r+0xb48>
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066ae:	6918      	ldr	r0, [r3, #16]
 80066b0:	f000 fb72 	bl	8006d98 <__hi0bits>
 80066b4:	f1c0 0020 	rsb	r0, r0, #32
 80066b8:	9b08      	ldr	r3, [sp, #32]
 80066ba:	4418      	add	r0, r3
 80066bc:	f010 001f 	ands.w	r0, r0, #31
 80066c0:	d077      	beq.n	80067b2 <_dtoa_r+0x8f2>
 80066c2:	f1c0 0320 	rsb	r3, r0, #32
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	dd6b      	ble.n	80067a2 <_dtoa_r+0x8e2>
 80066ca:	9b08      	ldr	r3, [sp, #32]
 80066cc:	f1c0 001c 	rsb	r0, r0, #28
 80066d0:	4403      	add	r3, r0
 80066d2:	4480      	add	r8, r0
 80066d4:	4406      	add	r6, r0
 80066d6:	9308      	str	r3, [sp, #32]
 80066d8:	f1b8 0f00 	cmp.w	r8, #0
 80066dc:	dd05      	ble.n	80066ea <_dtoa_r+0x82a>
 80066de:	4649      	mov	r1, r9
 80066e0:	4642      	mov	r2, r8
 80066e2:	4658      	mov	r0, fp
 80066e4:	f000 fcbe 	bl	8007064 <__lshift>
 80066e8:	4681      	mov	r9, r0
 80066ea:	9b08      	ldr	r3, [sp, #32]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	dd05      	ble.n	80066fc <_dtoa_r+0x83c>
 80066f0:	4621      	mov	r1, r4
 80066f2:	461a      	mov	r2, r3
 80066f4:	4658      	mov	r0, fp
 80066f6:	f000 fcb5 	bl	8007064 <__lshift>
 80066fa:	4604      	mov	r4, r0
 80066fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d059      	beq.n	80067b6 <_dtoa_r+0x8f6>
 8006702:	4621      	mov	r1, r4
 8006704:	4648      	mov	r0, r9
 8006706:	f000 fd19 	bl	800713c <__mcmp>
 800670a:	2800      	cmp	r0, #0
 800670c:	da53      	bge.n	80067b6 <_dtoa_r+0x8f6>
 800670e:	1e7b      	subs	r3, r7, #1
 8006710:	9304      	str	r3, [sp, #16]
 8006712:	4649      	mov	r1, r9
 8006714:	2300      	movs	r3, #0
 8006716:	220a      	movs	r2, #10
 8006718:	4658      	mov	r0, fp
 800671a:	f000 faf7 	bl	8006d0c <__multadd>
 800671e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006720:	4681      	mov	r9, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 8172 	beq.w	8006a0c <_dtoa_r+0xb4c>
 8006728:	2300      	movs	r3, #0
 800672a:	4629      	mov	r1, r5
 800672c:	220a      	movs	r2, #10
 800672e:	4658      	mov	r0, fp
 8006730:	f000 faec 	bl	8006d0c <__multadd>
 8006734:	9b00      	ldr	r3, [sp, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	4605      	mov	r5, r0
 800673a:	dc67      	bgt.n	800680c <_dtoa_r+0x94c>
 800673c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800673e:	2b02      	cmp	r3, #2
 8006740:	dc41      	bgt.n	80067c6 <_dtoa_r+0x906>
 8006742:	e063      	b.n	800680c <_dtoa_r+0x94c>
 8006744:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006746:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800674a:	e746      	b.n	80065da <_dtoa_r+0x71a>
 800674c:	9b07      	ldr	r3, [sp, #28]
 800674e:	1e5c      	subs	r4, r3, #1
 8006750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006752:	42a3      	cmp	r3, r4
 8006754:	bfbf      	itttt	lt
 8006756:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006758:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800675a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800675c:	1ae3      	sublt	r3, r4, r3
 800675e:	bfb4      	ite	lt
 8006760:	18d2      	addlt	r2, r2, r3
 8006762:	1b1c      	subge	r4, r3, r4
 8006764:	9b07      	ldr	r3, [sp, #28]
 8006766:	bfbc      	itt	lt
 8006768:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800676a:	2400      	movlt	r4, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	bfb5      	itete	lt
 8006770:	eba8 0603 	sublt.w	r6, r8, r3
 8006774:	9b07      	ldrge	r3, [sp, #28]
 8006776:	2300      	movlt	r3, #0
 8006778:	4646      	movge	r6, r8
 800677a:	e730      	b.n	80065de <_dtoa_r+0x71e>
 800677c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800677e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006780:	4646      	mov	r6, r8
 8006782:	e735      	b.n	80065f0 <_dtoa_r+0x730>
 8006784:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006786:	e75c      	b.n	8006642 <_dtoa_r+0x782>
 8006788:	2300      	movs	r3, #0
 800678a:	e788      	b.n	800669e <_dtoa_r+0x7de>
 800678c:	3fe00000 	.word	0x3fe00000
 8006790:	40240000 	.word	0x40240000
 8006794:	40140000 	.word	0x40140000
 8006798:	9b02      	ldr	r3, [sp, #8]
 800679a:	e780      	b.n	800669e <_dtoa_r+0x7de>
 800679c:	2300      	movs	r3, #0
 800679e:	930a      	str	r3, [sp, #40]	@ 0x28
 80067a0:	e782      	b.n	80066a8 <_dtoa_r+0x7e8>
 80067a2:	d099      	beq.n	80066d8 <_dtoa_r+0x818>
 80067a4:	9a08      	ldr	r2, [sp, #32]
 80067a6:	331c      	adds	r3, #28
 80067a8:	441a      	add	r2, r3
 80067aa:	4498      	add	r8, r3
 80067ac:	441e      	add	r6, r3
 80067ae:	9208      	str	r2, [sp, #32]
 80067b0:	e792      	b.n	80066d8 <_dtoa_r+0x818>
 80067b2:	4603      	mov	r3, r0
 80067b4:	e7f6      	b.n	80067a4 <_dtoa_r+0x8e4>
 80067b6:	9b07      	ldr	r3, [sp, #28]
 80067b8:	9704      	str	r7, [sp, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	dc20      	bgt.n	8006800 <_dtoa_r+0x940>
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	dd1e      	ble.n	8006804 <_dtoa_r+0x944>
 80067c6:	9b00      	ldr	r3, [sp, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f47f aec0 	bne.w	800654e <_dtoa_r+0x68e>
 80067ce:	4621      	mov	r1, r4
 80067d0:	2205      	movs	r2, #5
 80067d2:	4658      	mov	r0, fp
 80067d4:	f000 fa9a 	bl	8006d0c <__multadd>
 80067d8:	4601      	mov	r1, r0
 80067da:	4604      	mov	r4, r0
 80067dc:	4648      	mov	r0, r9
 80067de:	f000 fcad 	bl	800713c <__mcmp>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	f77f aeb3 	ble.w	800654e <_dtoa_r+0x68e>
 80067e8:	4656      	mov	r6, sl
 80067ea:	2331      	movs	r3, #49	@ 0x31
 80067ec:	f806 3b01 	strb.w	r3, [r6], #1
 80067f0:	9b04      	ldr	r3, [sp, #16]
 80067f2:	3301      	adds	r3, #1
 80067f4:	9304      	str	r3, [sp, #16]
 80067f6:	e6ae      	b.n	8006556 <_dtoa_r+0x696>
 80067f8:	9c07      	ldr	r4, [sp, #28]
 80067fa:	9704      	str	r7, [sp, #16]
 80067fc:	4625      	mov	r5, r4
 80067fe:	e7f3      	b.n	80067e8 <_dtoa_r+0x928>
 8006800:	9b07      	ldr	r3, [sp, #28]
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8104 	beq.w	8006a14 <_dtoa_r+0xb54>
 800680c:	2e00      	cmp	r6, #0
 800680e:	dd05      	ble.n	800681c <_dtoa_r+0x95c>
 8006810:	4629      	mov	r1, r5
 8006812:	4632      	mov	r2, r6
 8006814:	4658      	mov	r0, fp
 8006816:	f000 fc25 	bl	8007064 <__lshift>
 800681a:	4605      	mov	r5, r0
 800681c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800681e:	2b00      	cmp	r3, #0
 8006820:	d05a      	beq.n	80068d8 <_dtoa_r+0xa18>
 8006822:	6869      	ldr	r1, [r5, #4]
 8006824:	4658      	mov	r0, fp
 8006826:	f000 fa0f 	bl	8006c48 <_Balloc>
 800682a:	4606      	mov	r6, r0
 800682c:	b928      	cbnz	r0, 800683a <_dtoa_r+0x97a>
 800682e:	4b84      	ldr	r3, [pc, #528]	@ (8006a40 <_dtoa_r+0xb80>)
 8006830:	4602      	mov	r2, r0
 8006832:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006836:	f7ff bb5a 	b.w	8005eee <_dtoa_r+0x2e>
 800683a:	692a      	ldr	r2, [r5, #16]
 800683c:	3202      	adds	r2, #2
 800683e:	0092      	lsls	r2, r2, #2
 8006840:	f105 010c 	add.w	r1, r5, #12
 8006844:	300c      	adds	r0, #12
 8006846:	f000 ffaf 	bl	80077a8 <memcpy>
 800684a:	2201      	movs	r2, #1
 800684c:	4631      	mov	r1, r6
 800684e:	4658      	mov	r0, fp
 8006850:	f000 fc08 	bl	8007064 <__lshift>
 8006854:	f10a 0301 	add.w	r3, sl, #1
 8006858:	9307      	str	r3, [sp, #28]
 800685a:	9b00      	ldr	r3, [sp, #0]
 800685c:	4453      	add	r3, sl
 800685e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006860:	9b02      	ldr	r3, [sp, #8]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	462f      	mov	r7, r5
 8006868:	930a      	str	r3, [sp, #40]	@ 0x28
 800686a:	4605      	mov	r5, r0
 800686c:	9b07      	ldr	r3, [sp, #28]
 800686e:	4621      	mov	r1, r4
 8006870:	3b01      	subs	r3, #1
 8006872:	4648      	mov	r0, r9
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	f7ff fa98 	bl	8005daa <quorem>
 800687a:	4639      	mov	r1, r7
 800687c:	9002      	str	r0, [sp, #8]
 800687e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006882:	4648      	mov	r0, r9
 8006884:	f000 fc5a 	bl	800713c <__mcmp>
 8006888:	462a      	mov	r2, r5
 800688a:	9008      	str	r0, [sp, #32]
 800688c:	4621      	mov	r1, r4
 800688e:	4658      	mov	r0, fp
 8006890:	f000 fc70 	bl	8007174 <__mdiff>
 8006894:	68c2      	ldr	r2, [r0, #12]
 8006896:	4606      	mov	r6, r0
 8006898:	bb02      	cbnz	r2, 80068dc <_dtoa_r+0xa1c>
 800689a:	4601      	mov	r1, r0
 800689c:	4648      	mov	r0, r9
 800689e:	f000 fc4d 	bl	800713c <__mcmp>
 80068a2:	4602      	mov	r2, r0
 80068a4:	4631      	mov	r1, r6
 80068a6:	4658      	mov	r0, fp
 80068a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80068aa:	f000 fa0d 	bl	8006cc8 <_Bfree>
 80068ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068b2:	9e07      	ldr	r6, [sp, #28]
 80068b4:	ea43 0102 	orr.w	r1, r3, r2
 80068b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ba:	4319      	orrs	r1, r3
 80068bc:	d110      	bne.n	80068e0 <_dtoa_r+0xa20>
 80068be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068c2:	d029      	beq.n	8006918 <_dtoa_r+0xa58>
 80068c4:	9b08      	ldr	r3, [sp, #32]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dd02      	ble.n	80068d0 <_dtoa_r+0xa10>
 80068ca:	9b02      	ldr	r3, [sp, #8]
 80068cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80068d0:	9b00      	ldr	r3, [sp, #0]
 80068d2:	f883 8000 	strb.w	r8, [r3]
 80068d6:	e63f      	b.n	8006558 <_dtoa_r+0x698>
 80068d8:	4628      	mov	r0, r5
 80068da:	e7bb      	b.n	8006854 <_dtoa_r+0x994>
 80068dc:	2201      	movs	r2, #1
 80068de:	e7e1      	b.n	80068a4 <_dtoa_r+0x9e4>
 80068e0:	9b08      	ldr	r3, [sp, #32]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	db04      	blt.n	80068f0 <_dtoa_r+0xa30>
 80068e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068e8:	430b      	orrs	r3, r1
 80068ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068ec:	430b      	orrs	r3, r1
 80068ee:	d120      	bne.n	8006932 <_dtoa_r+0xa72>
 80068f0:	2a00      	cmp	r2, #0
 80068f2:	dded      	ble.n	80068d0 <_dtoa_r+0xa10>
 80068f4:	4649      	mov	r1, r9
 80068f6:	2201      	movs	r2, #1
 80068f8:	4658      	mov	r0, fp
 80068fa:	f000 fbb3 	bl	8007064 <__lshift>
 80068fe:	4621      	mov	r1, r4
 8006900:	4681      	mov	r9, r0
 8006902:	f000 fc1b 	bl	800713c <__mcmp>
 8006906:	2800      	cmp	r0, #0
 8006908:	dc03      	bgt.n	8006912 <_dtoa_r+0xa52>
 800690a:	d1e1      	bne.n	80068d0 <_dtoa_r+0xa10>
 800690c:	f018 0f01 	tst.w	r8, #1
 8006910:	d0de      	beq.n	80068d0 <_dtoa_r+0xa10>
 8006912:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006916:	d1d8      	bne.n	80068ca <_dtoa_r+0xa0a>
 8006918:	9a00      	ldr	r2, [sp, #0]
 800691a:	2339      	movs	r3, #57	@ 0x39
 800691c:	7013      	strb	r3, [r2, #0]
 800691e:	4633      	mov	r3, r6
 8006920:	461e      	mov	r6, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006928:	2a39      	cmp	r2, #57	@ 0x39
 800692a:	d052      	beq.n	80069d2 <_dtoa_r+0xb12>
 800692c:	3201      	adds	r2, #1
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	e612      	b.n	8006558 <_dtoa_r+0x698>
 8006932:	2a00      	cmp	r2, #0
 8006934:	dd07      	ble.n	8006946 <_dtoa_r+0xa86>
 8006936:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800693a:	d0ed      	beq.n	8006918 <_dtoa_r+0xa58>
 800693c:	9a00      	ldr	r2, [sp, #0]
 800693e:	f108 0301 	add.w	r3, r8, #1
 8006942:	7013      	strb	r3, [r2, #0]
 8006944:	e608      	b.n	8006558 <_dtoa_r+0x698>
 8006946:	9b07      	ldr	r3, [sp, #28]
 8006948:	9a07      	ldr	r2, [sp, #28]
 800694a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800694e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006950:	4293      	cmp	r3, r2
 8006952:	d028      	beq.n	80069a6 <_dtoa_r+0xae6>
 8006954:	4649      	mov	r1, r9
 8006956:	2300      	movs	r3, #0
 8006958:	220a      	movs	r2, #10
 800695a:	4658      	mov	r0, fp
 800695c:	f000 f9d6 	bl	8006d0c <__multadd>
 8006960:	42af      	cmp	r7, r5
 8006962:	4681      	mov	r9, r0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	f04f 020a 	mov.w	r2, #10
 800696c:	4639      	mov	r1, r7
 800696e:	4658      	mov	r0, fp
 8006970:	d107      	bne.n	8006982 <_dtoa_r+0xac2>
 8006972:	f000 f9cb 	bl	8006d0c <__multadd>
 8006976:	4607      	mov	r7, r0
 8006978:	4605      	mov	r5, r0
 800697a:	9b07      	ldr	r3, [sp, #28]
 800697c:	3301      	adds	r3, #1
 800697e:	9307      	str	r3, [sp, #28]
 8006980:	e774      	b.n	800686c <_dtoa_r+0x9ac>
 8006982:	f000 f9c3 	bl	8006d0c <__multadd>
 8006986:	4629      	mov	r1, r5
 8006988:	4607      	mov	r7, r0
 800698a:	2300      	movs	r3, #0
 800698c:	220a      	movs	r2, #10
 800698e:	4658      	mov	r0, fp
 8006990:	f000 f9bc 	bl	8006d0c <__multadd>
 8006994:	4605      	mov	r5, r0
 8006996:	e7f0      	b.n	800697a <_dtoa_r+0xaba>
 8006998:	9b00      	ldr	r3, [sp, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	bfcc      	ite	gt
 800699e:	461e      	movgt	r6, r3
 80069a0:	2601      	movle	r6, #1
 80069a2:	4456      	add	r6, sl
 80069a4:	2700      	movs	r7, #0
 80069a6:	4649      	mov	r1, r9
 80069a8:	2201      	movs	r2, #1
 80069aa:	4658      	mov	r0, fp
 80069ac:	f000 fb5a 	bl	8007064 <__lshift>
 80069b0:	4621      	mov	r1, r4
 80069b2:	4681      	mov	r9, r0
 80069b4:	f000 fbc2 	bl	800713c <__mcmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	dcb0      	bgt.n	800691e <_dtoa_r+0xa5e>
 80069bc:	d102      	bne.n	80069c4 <_dtoa_r+0xb04>
 80069be:	f018 0f01 	tst.w	r8, #1
 80069c2:	d1ac      	bne.n	800691e <_dtoa_r+0xa5e>
 80069c4:	4633      	mov	r3, r6
 80069c6:	461e      	mov	r6, r3
 80069c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069cc:	2a30      	cmp	r2, #48	@ 0x30
 80069ce:	d0fa      	beq.n	80069c6 <_dtoa_r+0xb06>
 80069d0:	e5c2      	b.n	8006558 <_dtoa_r+0x698>
 80069d2:	459a      	cmp	sl, r3
 80069d4:	d1a4      	bne.n	8006920 <_dtoa_r+0xa60>
 80069d6:	9b04      	ldr	r3, [sp, #16]
 80069d8:	3301      	adds	r3, #1
 80069da:	9304      	str	r3, [sp, #16]
 80069dc:	2331      	movs	r3, #49	@ 0x31
 80069de:	f88a 3000 	strb.w	r3, [sl]
 80069e2:	e5b9      	b.n	8006558 <_dtoa_r+0x698>
 80069e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006a44 <_dtoa_r+0xb84>
 80069ea:	b11b      	cbz	r3, 80069f4 <_dtoa_r+0xb34>
 80069ec:	f10a 0308 	add.w	r3, sl, #8
 80069f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	4650      	mov	r0, sl
 80069f6:	b019      	add	sp, #100	@ 0x64
 80069f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	f77f ae37 	ble.w	8006672 <_dtoa_r+0x7b2>
 8006a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a08:	2001      	movs	r0, #1
 8006a0a:	e655      	b.n	80066b8 <_dtoa_r+0x7f8>
 8006a0c:	9b00      	ldr	r3, [sp, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f77f aed6 	ble.w	80067c0 <_dtoa_r+0x900>
 8006a14:	4656      	mov	r6, sl
 8006a16:	4621      	mov	r1, r4
 8006a18:	4648      	mov	r0, r9
 8006a1a:	f7ff f9c6 	bl	8005daa <quorem>
 8006a1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a22:	f806 8b01 	strb.w	r8, [r6], #1
 8006a26:	9b00      	ldr	r3, [sp, #0]
 8006a28:	eba6 020a 	sub.w	r2, r6, sl
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	ddb3      	ble.n	8006998 <_dtoa_r+0xad8>
 8006a30:	4649      	mov	r1, r9
 8006a32:	2300      	movs	r3, #0
 8006a34:	220a      	movs	r2, #10
 8006a36:	4658      	mov	r0, fp
 8006a38:	f000 f968 	bl	8006d0c <__multadd>
 8006a3c:	4681      	mov	r9, r0
 8006a3e:	e7ea      	b.n	8006a16 <_dtoa_r+0xb56>
 8006a40:	08007fc0 	.word	0x08007fc0
 8006a44:	08007f44 	.word	0x08007f44

08006a48 <_free_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	2900      	cmp	r1, #0
 8006a4e:	d041      	beq.n	8006ad4 <_free_r+0x8c>
 8006a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a54:	1f0c      	subs	r4, r1, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	bfb8      	it	lt
 8006a5a:	18e4      	addlt	r4, r4, r3
 8006a5c:	f000 f8e8 	bl	8006c30 <__malloc_lock>
 8006a60:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad8 <_free_r+0x90>)
 8006a62:	6813      	ldr	r3, [r2, #0]
 8006a64:	b933      	cbnz	r3, 8006a74 <_free_r+0x2c>
 8006a66:	6063      	str	r3, [r4, #4]
 8006a68:	6014      	str	r4, [r2, #0]
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a70:	f000 b8e4 	b.w	8006c3c <__malloc_unlock>
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	d908      	bls.n	8006a8a <_free_r+0x42>
 8006a78:	6820      	ldr	r0, [r4, #0]
 8006a7a:	1821      	adds	r1, r4, r0
 8006a7c:	428b      	cmp	r3, r1
 8006a7e:	bf01      	itttt	eq
 8006a80:	6819      	ldreq	r1, [r3, #0]
 8006a82:	685b      	ldreq	r3, [r3, #4]
 8006a84:	1809      	addeq	r1, r1, r0
 8006a86:	6021      	streq	r1, [r4, #0]
 8006a88:	e7ed      	b.n	8006a66 <_free_r+0x1e>
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	b10b      	cbz	r3, 8006a94 <_free_r+0x4c>
 8006a90:	42a3      	cmp	r3, r4
 8006a92:	d9fa      	bls.n	8006a8a <_free_r+0x42>
 8006a94:	6811      	ldr	r1, [r2, #0]
 8006a96:	1850      	adds	r0, r2, r1
 8006a98:	42a0      	cmp	r0, r4
 8006a9a:	d10b      	bne.n	8006ab4 <_free_r+0x6c>
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	4401      	add	r1, r0
 8006aa0:	1850      	adds	r0, r2, r1
 8006aa2:	4283      	cmp	r3, r0
 8006aa4:	6011      	str	r1, [r2, #0]
 8006aa6:	d1e0      	bne.n	8006a6a <_free_r+0x22>
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	6053      	str	r3, [r2, #4]
 8006aae:	4408      	add	r0, r1
 8006ab0:	6010      	str	r0, [r2, #0]
 8006ab2:	e7da      	b.n	8006a6a <_free_r+0x22>
 8006ab4:	d902      	bls.n	8006abc <_free_r+0x74>
 8006ab6:	230c      	movs	r3, #12
 8006ab8:	602b      	str	r3, [r5, #0]
 8006aba:	e7d6      	b.n	8006a6a <_free_r+0x22>
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	1821      	adds	r1, r4, r0
 8006ac0:	428b      	cmp	r3, r1
 8006ac2:	bf04      	itt	eq
 8006ac4:	6819      	ldreq	r1, [r3, #0]
 8006ac6:	685b      	ldreq	r3, [r3, #4]
 8006ac8:	6063      	str	r3, [r4, #4]
 8006aca:	bf04      	itt	eq
 8006acc:	1809      	addeq	r1, r1, r0
 8006ace:	6021      	streq	r1, [r4, #0]
 8006ad0:	6054      	str	r4, [r2, #4]
 8006ad2:	e7ca      	b.n	8006a6a <_free_r+0x22>
 8006ad4:	bd38      	pop	{r3, r4, r5, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000fe4 	.word	0x20000fe4

08006adc <malloc>:
 8006adc:	4b02      	ldr	r3, [pc, #8]	@ (8006ae8 <malloc+0xc>)
 8006ade:	4601      	mov	r1, r0
 8006ae0:	6818      	ldr	r0, [r3, #0]
 8006ae2:	f000 b825 	b.w	8006b30 <_malloc_r>
 8006ae6:	bf00      	nop
 8006ae8:	20000018 	.word	0x20000018

08006aec <sbrk_aligned>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	4e0f      	ldr	r6, [pc, #60]	@ (8006b2c <sbrk_aligned+0x40>)
 8006af0:	460c      	mov	r4, r1
 8006af2:	6831      	ldr	r1, [r6, #0]
 8006af4:	4605      	mov	r5, r0
 8006af6:	b911      	cbnz	r1, 8006afe <sbrk_aligned+0x12>
 8006af8:	f000 fe46 	bl	8007788 <_sbrk_r>
 8006afc:	6030      	str	r0, [r6, #0]
 8006afe:	4621      	mov	r1, r4
 8006b00:	4628      	mov	r0, r5
 8006b02:	f000 fe41 	bl	8007788 <_sbrk_r>
 8006b06:	1c43      	adds	r3, r0, #1
 8006b08:	d103      	bne.n	8006b12 <sbrk_aligned+0x26>
 8006b0a:	f04f 34ff 	mov.w	r4, #4294967295
 8006b0e:	4620      	mov	r0, r4
 8006b10:	bd70      	pop	{r4, r5, r6, pc}
 8006b12:	1cc4      	adds	r4, r0, #3
 8006b14:	f024 0403 	bic.w	r4, r4, #3
 8006b18:	42a0      	cmp	r0, r4
 8006b1a:	d0f8      	beq.n	8006b0e <sbrk_aligned+0x22>
 8006b1c:	1a21      	subs	r1, r4, r0
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 fe32 	bl	8007788 <_sbrk_r>
 8006b24:	3001      	adds	r0, #1
 8006b26:	d1f2      	bne.n	8006b0e <sbrk_aligned+0x22>
 8006b28:	e7ef      	b.n	8006b0a <sbrk_aligned+0x1e>
 8006b2a:	bf00      	nop
 8006b2c:	20000fe0 	.word	0x20000fe0

08006b30 <_malloc_r>:
 8006b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	1ccd      	adds	r5, r1, #3
 8006b36:	f025 0503 	bic.w	r5, r5, #3
 8006b3a:	3508      	adds	r5, #8
 8006b3c:	2d0c      	cmp	r5, #12
 8006b3e:	bf38      	it	cc
 8006b40:	250c      	movcc	r5, #12
 8006b42:	2d00      	cmp	r5, #0
 8006b44:	4606      	mov	r6, r0
 8006b46:	db01      	blt.n	8006b4c <_malloc_r+0x1c>
 8006b48:	42a9      	cmp	r1, r5
 8006b4a:	d904      	bls.n	8006b56 <_malloc_r+0x26>
 8006b4c:	230c      	movs	r3, #12
 8006b4e:	6033      	str	r3, [r6, #0]
 8006b50:	2000      	movs	r0, #0
 8006b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c2c <_malloc_r+0xfc>
 8006b5a:	f000 f869 	bl	8006c30 <__malloc_lock>
 8006b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b62:	461c      	mov	r4, r3
 8006b64:	bb44      	cbnz	r4, 8006bb8 <_malloc_r+0x88>
 8006b66:	4629      	mov	r1, r5
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f7ff ffbf 	bl	8006aec <sbrk_aligned>
 8006b6e:	1c43      	adds	r3, r0, #1
 8006b70:	4604      	mov	r4, r0
 8006b72:	d158      	bne.n	8006c26 <_malloc_r+0xf6>
 8006b74:	f8d8 4000 	ldr.w	r4, [r8]
 8006b78:	4627      	mov	r7, r4
 8006b7a:	2f00      	cmp	r7, #0
 8006b7c:	d143      	bne.n	8006c06 <_malloc_r+0xd6>
 8006b7e:	2c00      	cmp	r4, #0
 8006b80:	d04b      	beq.n	8006c1a <_malloc_r+0xea>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	4639      	mov	r1, r7
 8006b86:	4630      	mov	r0, r6
 8006b88:	eb04 0903 	add.w	r9, r4, r3
 8006b8c:	f000 fdfc 	bl	8007788 <_sbrk_r>
 8006b90:	4581      	cmp	r9, r0
 8006b92:	d142      	bne.n	8006c1a <_malloc_r+0xea>
 8006b94:	6821      	ldr	r1, [r4, #0]
 8006b96:	1a6d      	subs	r5, r5, r1
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f7ff ffa6 	bl	8006aec <sbrk_aligned>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d03a      	beq.n	8006c1a <_malloc_r+0xea>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	442b      	add	r3, r5
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	f8d8 3000 	ldr.w	r3, [r8]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	bb62      	cbnz	r2, 8006c0c <_malloc_r+0xdc>
 8006bb2:	f8c8 7000 	str.w	r7, [r8]
 8006bb6:	e00f      	b.n	8006bd8 <_malloc_r+0xa8>
 8006bb8:	6822      	ldr	r2, [r4, #0]
 8006bba:	1b52      	subs	r2, r2, r5
 8006bbc:	d420      	bmi.n	8006c00 <_malloc_r+0xd0>
 8006bbe:	2a0b      	cmp	r2, #11
 8006bc0:	d917      	bls.n	8006bf2 <_malloc_r+0xc2>
 8006bc2:	1961      	adds	r1, r4, r5
 8006bc4:	42a3      	cmp	r3, r4
 8006bc6:	6025      	str	r5, [r4, #0]
 8006bc8:	bf18      	it	ne
 8006bca:	6059      	strne	r1, [r3, #4]
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	bf08      	it	eq
 8006bd0:	f8c8 1000 	streq.w	r1, [r8]
 8006bd4:	5162      	str	r2, [r4, r5]
 8006bd6:	604b      	str	r3, [r1, #4]
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f000 f82f 	bl	8006c3c <__malloc_unlock>
 8006bde:	f104 000b 	add.w	r0, r4, #11
 8006be2:	1d23      	adds	r3, r4, #4
 8006be4:	f020 0007 	bic.w	r0, r0, #7
 8006be8:	1ac2      	subs	r2, r0, r3
 8006bea:	bf1c      	itt	ne
 8006bec:	1a1b      	subne	r3, r3, r0
 8006bee:	50a3      	strne	r3, [r4, r2]
 8006bf0:	e7af      	b.n	8006b52 <_malloc_r+0x22>
 8006bf2:	6862      	ldr	r2, [r4, #4]
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	bf0c      	ite	eq
 8006bf8:	f8c8 2000 	streq.w	r2, [r8]
 8006bfc:	605a      	strne	r2, [r3, #4]
 8006bfe:	e7eb      	b.n	8006bd8 <_malloc_r+0xa8>
 8006c00:	4623      	mov	r3, r4
 8006c02:	6864      	ldr	r4, [r4, #4]
 8006c04:	e7ae      	b.n	8006b64 <_malloc_r+0x34>
 8006c06:	463c      	mov	r4, r7
 8006c08:	687f      	ldr	r7, [r7, #4]
 8006c0a:	e7b6      	b.n	8006b7a <_malloc_r+0x4a>
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d1fb      	bne.n	8006c0c <_malloc_r+0xdc>
 8006c14:	2300      	movs	r3, #0
 8006c16:	6053      	str	r3, [r2, #4]
 8006c18:	e7de      	b.n	8006bd8 <_malloc_r+0xa8>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	6033      	str	r3, [r6, #0]
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f000 f80c 	bl	8006c3c <__malloc_unlock>
 8006c24:	e794      	b.n	8006b50 <_malloc_r+0x20>
 8006c26:	6005      	str	r5, [r0, #0]
 8006c28:	e7d6      	b.n	8006bd8 <_malloc_r+0xa8>
 8006c2a:	bf00      	nop
 8006c2c:	20000fe4 	.word	0x20000fe4

08006c30 <__malloc_lock>:
 8006c30:	4801      	ldr	r0, [pc, #4]	@ (8006c38 <__malloc_lock+0x8>)
 8006c32:	f7ff b8b8 	b.w	8005da6 <__retarget_lock_acquire_recursive>
 8006c36:	bf00      	nop
 8006c38:	20000fdc 	.word	0x20000fdc

08006c3c <__malloc_unlock>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	@ (8006c44 <__malloc_unlock+0x8>)
 8006c3e:	f7ff b8b3 	b.w	8005da8 <__retarget_lock_release_recursive>
 8006c42:	bf00      	nop
 8006c44:	20000fdc 	.word	0x20000fdc

08006c48 <_Balloc>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	69c6      	ldr	r6, [r0, #28]
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	460d      	mov	r5, r1
 8006c50:	b976      	cbnz	r6, 8006c70 <_Balloc+0x28>
 8006c52:	2010      	movs	r0, #16
 8006c54:	f7ff ff42 	bl	8006adc <malloc>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	61e0      	str	r0, [r4, #28]
 8006c5c:	b920      	cbnz	r0, 8006c68 <_Balloc+0x20>
 8006c5e:	4b18      	ldr	r3, [pc, #96]	@ (8006cc0 <_Balloc+0x78>)
 8006c60:	4818      	ldr	r0, [pc, #96]	@ (8006cc4 <_Balloc+0x7c>)
 8006c62:	216b      	movs	r1, #107	@ 0x6b
 8006c64:	f000 fdae 	bl	80077c4 <__assert_func>
 8006c68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c6c:	6006      	str	r6, [r0, #0]
 8006c6e:	60c6      	str	r6, [r0, #12]
 8006c70:	69e6      	ldr	r6, [r4, #28]
 8006c72:	68f3      	ldr	r3, [r6, #12]
 8006c74:	b183      	cbz	r3, 8006c98 <_Balloc+0x50>
 8006c76:	69e3      	ldr	r3, [r4, #28]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c7e:	b9b8      	cbnz	r0, 8006cb0 <_Balloc+0x68>
 8006c80:	2101      	movs	r1, #1
 8006c82:	fa01 f605 	lsl.w	r6, r1, r5
 8006c86:	1d72      	adds	r2, r6, #5
 8006c88:	0092      	lsls	r2, r2, #2
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fdb8 	bl	8007800 <_calloc_r>
 8006c90:	b160      	cbz	r0, 8006cac <_Balloc+0x64>
 8006c92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c96:	e00e      	b.n	8006cb6 <_Balloc+0x6e>
 8006c98:	2221      	movs	r2, #33	@ 0x21
 8006c9a:	2104      	movs	r1, #4
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f000 fdaf 	bl	8007800 <_calloc_r>
 8006ca2:	69e3      	ldr	r3, [r4, #28]
 8006ca4:	60f0      	str	r0, [r6, #12]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e4      	bne.n	8006c76 <_Balloc+0x2e>
 8006cac:	2000      	movs	r0, #0
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	6802      	ldr	r2, [r0, #0]
 8006cb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cbc:	e7f7      	b.n	8006cae <_Balloc+0x66>
 8006cbe:	bf00      	nop
 8006cc0:	08007f51 	.word	0x08007f51
 8006cc4:	08007fd1 	.word	0x08007fd1

08006cc8 <_Bfree>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	69c6      	ldr	r6, [r0, #28]
 8006ccc:	4605      	mov	r5, r0
 8006cce:	460c      	mov	r4, r1
 8006cd0:	b976      	cbnz	r6, 8006cf0 <_Bfree+0x28>
 8006cd2:	2010      	movs	r0, #16
 8006cd4:	f7ff ff02 	bl	8006adc <malloc>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	61e8      	str	r0, [r5, #28]
 8006cdc:	b920      	cbnz	r0, 8006ce8 <_Bfree+0x20>
 8006cde:	4b09      	ldr	r3, [pc, #36]	@ (8006d04 <_Bfree+0x3c>)
 8006ce0:	4809      	ldr	r0, [pc, #36]	@ (8006d08 <_Bfree+0x40>)
 8006ce2:	218f      	movs	r1, #143	@ 0x8f
 8006ce4:	f000 fd6e 	bl	80077c4 <__assert_func>
 8006ce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cec:	6006      	str	r6, [r0, #0]
 8006cee:	60c6      	str	r6, [r0, #12]
 8006cf0:	b13c      	cbz	r4, 8006d02 <_Bfree+0x3a>
 8006cf2:	69eb      	ldr	r3, [r5, #28]
 8006cf4:	6862      	ldr	r2, [r4, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cfc:	6021      	str	r1, [r4, #0]
 8006cfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
 8006d04:	08007f51 	.word	0x08007f51
 8006d08:	08007fd1 	.word	0x08007fd1

08006d0c <__multadd>:
 8006d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d10:	690d      	ldr	r5, [r1, #16]
 8006d12:	4607      	mov	r7, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	461e      	mov	r6, r3
 8006d18:	f101 0c14 	add.w	ip, r1, #20
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	f8dc 3000 	ldr.w	r3, [ip]
 8006d22:	b299      	uxth	r1, r3
 8006d24:	fb02 6101 	mla	r1, r2, r1, r6
 8006d28:	0c1e      	lsrs	r6, r3, #16
 8006d2a:	0c0b      	lsrs	r3, r1, #16
 8006d2c:	fb02 3306 	mla	r3, r2, r6, r3
 8006d30:	b289      	uxth	r1, r1
 8006d32:	3001      	adds	r0, #1
 8006d34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d38:	4285      	cmp	r5, r0
 8006d3a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d42:	dcec      	bgt.n	8006d1e <__multadd+0x12>
 8006d44:	b30e      	cbz	r6, 8006d8a <__multadd+0x7e>
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	42ab      	cmp	r3, r5
 8006d4a:	dc19      	bgt.n	8006d80 <__multadd+0x74>
 8006d4c:	6861      	ldr	r1, [r4, #4]
 8006d4e:	4638      	mov	r0, r7
 8006d50:	3101      	adds	r1, #1
 8006d52:	f7ff ff79 	bl	8006c48 <_Balloc>
 8006d56:	4680      	mov	r8, r0
 8006d58:	b928      	cbnz	r0, 8006d66 <__multadd+0x5a>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d90 <__multadd+0x84>)
 8006d5e:	480d      	ldr	r0, [pc, #52]	@ (8006d94 <__multadd+0x88>)
 8006d60:	21ba      	movs	r1, #186	@ 0xba
 8006d62:	f000 fd2f 	bl	80077c4 <__assert_func>
 8006d66:	6922      	ldr	r2, [r4, #16]
 8006d68:	3202      	adds	r2, #2
 8006d6a:	f104 010c 	add.w	r1, r4, #12
 8006d6e:	0092      	lsls	r2, r2, #2
 8006d70:	300c      	adds	r0, #12
 8006d72:	f000 fd19 	bl	80077a8 <memcpy>
 8006d76:	4621      	mov	r1, r4
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f7ff ffa5 	bl	8006cc8 <_Bfree>
 8006d7e:	4644      	mov	r4, r8
 8006d80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d84:	3501      	adds	r5, #1
 8006d86:	615e      	str	r6, [r3, #20]
 8006d88:	6125      	str	r5, [r4, #16]
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d90:	08007fc0 	.word	0x08007fc0
 8006d94:	08007fd1 	.word	0x08007fd1

08006d98 <__hi0bits>:
 8006d98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	bf36      	itet	cc
 8006da0:	0403      	lslcc	r3, r0, #16
 8006da2:	2000      	movcs	r0, #0
 8006da4:	2010      	movcc	r0, #16
 8006da6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006daa:	bf3c      	itt	cc
 8006dac:	021b      	lslcc	r3, r3, #8
 8006dae:	3008      	addcc	r0, #8
 8006db0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006db4:	bf3c      	itt	cc
 8006db6:	011b      	lslcc	r3, r3, #4
 8006db8:	3004      	addcc	r0, #4
 8006dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dbe:	bf3c      	itt	cc
 8006dc0:	009b      	lslcc	r3, r3, #2
 8006dc2:	3002      	addcc	r0, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	db05      	blt.n	8006dd4 <__hi0bits+0x3c>
 8006dc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006dcc:	f100 0001 	add.w	r0, r0, #1
 8006dd0:	bf08      	it	eq
 8006dd2:	2020      	moveq	r0, #32
 8006dd4:	4770      	bx	lr

08006dd6 <__lo0bits>:
 8006dd6:	6803      	ldr	r3, [r0, #0]
 8006dd8:	4602      	mov	r2, r0
 8006dda:	f013 0007 	ands.w	r0, r3, #7
 8006dde:	d00b      	beq.n	8006df8 <__lo0bits+0x22>
 8006de0:	07d9      	lsls	r1, r3, #31
 8006de2:	d421      	bmi.n	8006e28 <__lo0bits+0x52>
 8006de4:	0798      	lsls	r0, r3, #30
 8006de6:	bf49      	itett	mi
 8006de8:	085b      	lsrmi	r3, r3, #1
 8006dea:	089b      	lsrpl	r3, r3, #2
 8006dec:	2001      	movmi	r0, #1
 8006dee:	6013      	strmi	r3, [r2, #0]
 8006df0:	bf5c      	itt	pl
 8006df2:	6013      	strpl	r3, [r2, #0]
 8006df4:	2002      	movpl	r0, #2
 8006df6:	4770      	bx	lr
 8006df8:	b299      	uxth	r1, r3
 8006dfa:	b909      	cbnz	r1, 8006e00 <__lo0bits+0x2a>
 8006dfc:	0c1b      	lsrs	r3, r3, #16
 8006dfe:	2010      	movs	r0, #16
 8006e00:	b2d9      	uxtb	r1, r3
 8006e02:	b909      	cbnz	r1, 8006e08 <__lo0bits+0x32>
 8006e04:	3008      	adds	r0, #8
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	0719      	lsls	r1, r3, #28
 8006e0a:	bf04      	itt	eq
 8006e0c:	091b      	lsreq	r3, r3, #4
 8006e0e:	3004      	addeq	r0, #4
 8006e10:	0799      	lsls	r1, r3, #30
 8006e12:	bf04      	itt	eq
 8006e14:	089b      	lsreq	r3, r3, #2
 8006e16:	3002      	addeq	r0, #2
 8006e18:	07d9      	lsls	r1, r3, #31
 8006e1a:	d403      	bmi.n	8006e24 <__lo0bits+0x4e>
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	f100 0001 	add.w	r0, r0, #1
 8006e22:	d003      	beq.n	8006e2c <__lo0bits+0x56>
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	4770      	bx	lr
 8006e28:	2000      	movs	r0, #0
 8006e2a:	4770      	bx	lr
 8006e2c:	2020      	movs	r0, #32
 8006e2e:	4770      	bx	lr

08006e30 <__i2b>:
 8006e30:	b510      	push	{r4, lr}
 8006e32:	460c      	mov	r4, r1
 8006e34:	2101      	movs	r1, #1
 8006e36:	f7ff ff07 	bl	8006c48 <_Balloc>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	b928      	cbnz	r0, 8006e4a <__i2b+0x1a>
 8006e3e:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <__i2b+0x24>)
 8006e40:	4805      	ldr	r0, [pc, #20]	@ (8006e58 <__i2b+0x28>)
 8006e42:	f240 1145 	movw	r1, #325	@ 0x145
 8006e46:	f000 fcbd 	bl	80077c4 <__assert_func>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	6144      	str	r4, [r0, #20]
 8006e4e:	6103      	str	r3, [r0, #16]
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	bf00      	nop
 8006e54:	08007fc0 	.word	0x08007fc0
 8006e58:	08007fd1 	.word	0x08007fd1

08006e5c <__multiply>:
 8006e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	4614      	mov	r4, r2
 8006e62:	690a      	ldr	r2, [r1, #16]
 8006e64:	6923      	ldr	r3, [r4, #16]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	bfa8      	it	ge
 8006e6a:	4623      	movge	r3, r4
 8006e6c:	460f      	mov	r7, r1
 8006e6e:	bfa4      	itt	ge
 8006e70:	460c      	movge	r4, r1
 8006e72:	461f      	movge	r7, r3
 8006e74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006e78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e7c:	68a3      	ldr	r3, [r4, #8]
 8006e7e:	6861      	ldr	r1, [r4, #4]
 8006e80:	eb0a 0609 	add.w	r6, sl, r9
 8006e84:	42b3      	cmp	r3, r6
 8006e86:	b085      	sub	sp, #20
 8006e88:	bfb8      	it	lt
 8006e8a:	3101      	addlt	r1, #1
 8006e8c:	f7ff fedc 	bl	8006c48 <_Balloc>
 8006e90:	b930      	cbnz	r0, 8006ea0 <__multiply+0x44>
 8006e92:	4602      	mov	r2, r0
 8006e94:	4b44      	ldr	r3, [pc, #272]	@ (8006fa8 <__multiply+0x14c>)
 8006e96:	4845      	ldr	r0, [pc, #276]	@ (8006fac <__multiply+0x150>)
 8006e98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e9c:	f000 fc92 	bl	80077c4 <__assert_func>
 8006ea0:	f100 0514 	add.w	r5, r0, #20
 8006ea4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ea8:	462b      	mov	r3, r5
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4543      	cmp	r3, r8
 8006eae:	d321      	bcc.n	8006ef4 <__multiply+0x98>
 8006eb0:	f107 0114 	add.w	r1, r7, #20
 8006eb4:	f104 0214 	add.w	r2, r4, #20
 8006eb8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006ebc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ec0:	9302      	str	r3, [sp, #8]
 8006ec2:	1b13      	subs	r3, r2, r4
 8006ec4:	3b15      	subs	r3, #21
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	3304      	adds	r3, #4
 8006ecc:	f104 0715 	add.w	r7, r4, #21
 8006ed0:	42ba      	cmp	r2, r7
 8006ed2:	bf38      	it	cc
 8006ed4:	2304      	movcc	r3, #4
 8006ed6:	9301      	str	r3, [sp, #4]
 8006ed8:	9b02      	ldr	r3, [sp, #8]
 8006eda:	9103      	str	r1, [sp, #12]
 8006edc:	428b      	cmp	r3, r1
 8006ede:	d80c      	bhi.n	8006efa <__multiply+0x9e>
 8006ee0:	2e00      	cmp	r6, #0
 8006ee2:	dd03      	ble.n	8006eec <__multiply+0x90>
 8006ee4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d05b      	beq.n	8006fa4 <__multiply+0x148>
 8006eec:	6106      	str	r6, [r0, #16]
 8006eee:	b005      	add	sp, #20
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	f843 2b04 	str.w	r2, [r3], #4
 8006ef8:	e7d8      	b.n	8006eac <__multiply+0x50>
 8006efa:	f8b1 a000 	ldrh.w	sl, [r1]
 8006efe:	f1ba 0f00 	cmp.w	sl, #0
 8006f02:	d024      	beq.n	8006f4e <__multiply+0xf2>
 8006f04:	f104 0e14 	add.w	lr, r4, #20
 8006f08:	46a9      	mov	r9, r5
 8006f0a:	f04f 0c00 	mov.w	ip, #0
 8006f0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f12:	f8d9 3000 	ldr.w	r3, [r9]
 8006f16:	fa1f fb87 	uxth.w	fp, r7
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f20:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006f24:	f8d9 7000 	ldr.w	r7, [r9]
 8006f28:	4463      	add	r3, ip
 8006f2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f2e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006f32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f3c:	4572      	cmp	r2, lr
 8006f3e:	f849 3b04 	str.w	r3, [r9], #4
 8006f42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f46:	d8e2      	bhi.n	8006f0e <__multiply+0xb2>
 8006f48:	9b01      	ldr	r3, [sp, #4]
 8006f4a:	f845 c003 	str.w	ip, [r5, r3]
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f54:	3104      	adds	r1, #4
 8006f56:	f1b9 0f00 	cmp.w	r9, #0
 8006f5a:	d021      	beq.n	8006fa0 <__multiply+0x144>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	f104 0c14 	add.w	ip, r4, #20
 8006f62:	46ae      	mov	lr, r5
 8006f64:	f04f 0a00 	mov.w	sl, #0
 8006f68:	f8bc b000 	ldrh.w	fp, [ip]
 8006f6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006f70:	fb09 770b 	mla	r7, r9, fp, r7
 8006f74:	4457      	add	r7, sl
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f7c:	f84e 3b04 	str.w	r3, [lr], #4
 8006f80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f88:	f8be 3000 	ldrh.w	r3, [lr]
 8006f8c:	fb09 330a 	mla	r3, r9, sl, r3
 8006f90:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f94:	4562      	cmp	r2, ip
 8006f96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f9a:	d8e5      	bhi.n	8006f68 <__multiply+0x10c>
 8006f9c:	9f01      	ldr	r7, [sp, #4]
 8006f9e:	51eb      	str	r3, [r5, r7]
 8006fa0:	3504      	adds	r5, #4
 8006fa2:	e799      	b.n	8006ed8 <__multiply+0x7c>
 8006fa4:	3e01      	subs	r6, #1
 8006fa6:	e79b      	b.n	8006ee0 <__multiply+0x84>
 8006fa8:	08007fc0 	.word	0x08007fc0
 8006fac:	08007fd1 	.word	0x08007fd1

08006fb0 <__pow5mult>:
 8006fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	4615      	mov	r5, r2
 8006fb6:	f012 0203 	ands.w	r2, r2, #3
 8006fba:	4607      	mov	r7, r0
 8006fbc:	460e      	mov	r6, r1
 8006fbe:	d007      	beq.n	8006fd0 <__pow5mult+0x20>
 8006fc0:	4c25      	ldr	r4, [pc, #148]	@ (8007058 <__pow5mult+0xa8>)
 8006fc2:	3a01      	subs	r2, #1
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fca:	f7ff fe9f 	bl	8006d0c <__multadd>
 8006fce:	4606      	mov	r6, r0
 8006fd0:	10ad      	asrs	r5, r5, #2
 8006fd2:	d03d      	beq.n	8007050 <__pow5mult+0xa0>
 8006fd4:	69fc      	ldr	r4, [r7, #28]
 8006fd6:	b97c      	cbnz	r4, 8006ff8 <__pow5mult+0x48>
 8006fd8:	2010      	movs	r0, #16
 8006fda:	f7ff fd7f 	bl	8006adc <malloc>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	61f8      	str	r0, [r7, #28]
 8006fe2:	b928      	cbnz	r0, 8006ff0 <__pow5mult+0x40>
 8006fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800705c <__pow5mult+0xac>)
 8006fe6:	481e      	ldr	r0, [pc, #120]	@ (8007060 <__pow5mult+0xb0>)
 8006fe8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006fec:	f000 fbea 	bl	80077c4 <__assert_func>
 8006ff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ff4:	6004      	str	r4, [r0, #0]
 8006ff6:	60c4      	str	r4, [r0, #12]
 8006ff8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ffc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007000:	b94c      	cbnz	r4, 8007016 <__pow5mult+0x66>
 8007002:	f240 2171 	movw	r1, #625	@ 0x271
 8007006:	4638      	mov	r0, r7
 8007008:	f7ff ff12 	bl	8006e30 <__i2b>
 800700c:	2300      	movs	r3, #0
 800700e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007012:	4604      	mov	r4, r0
 8007014:	6003      	str	r3, [r0, #0]
 8007016:	f04f 0900 	mov.w	r9, #0
 800701a:	07eb      	lsls	r3, r5, #31
 800701c:	d50a      	bpl.n	8007034 <__pow5mult+0x84>
 800701e:	4631      	mov	r1, r6
 8007020:	4622      	mov	r2, r4
 8007022:	4638      	mov	r0, r7
 8007024:	f7ff ff1a 	bl	8006e5c <__multiply>
 8007028:	4631      	mov	r1, r6
 800702a:	4680      	mov	r8, r0
 800702c:	4638      	mov	r0, r7
 800702e:	f7ff fe4b 	bl	8006cc8 <_Bfree>
 8007032:	4646      	mov	r6, r8
 8007034:	106d      	asrs	r5, r5, #1
 8007036:	d00b      	beq.n	8007050 <__pow5mult+0xa0>
 8007038:	6820      	ldr	r0, [r4, #0]
 800703a:	b938      	cbnz	r0, 800704c <__pow5mult+0x9c>
 800703c:	4622      	mov	r2, r4
 800703e:	4621      	mov	r1, r4
 8007040:	4638      	mov	r0, r7
 8007042:	f7ff ff0b 	bl	8006e5c <__multiply>
 8007046:	6020      	str	r0, [r4, #0]
 8007048:	f8c0 9000 	str.w	r9, [r0]
 800704c:	4604      	mov	r4, r0
 800704e:	e7e4      	b.n	800701a <__pow5mult+0x6a>
 8007050:	4630      	mov	r0, r6
 8007052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007056:	bf00      	nop
 8007058:	0800802c 	.word	0x0800802c
 800705c:	08007f51 	.word	0x08007f51
 8007060:	08007fd1 	.word	0x08007fd1

08007064 <__lshift>:
 8007064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	460c      	mov	r4, r1
 800706a:	6849      	ldr	r1, [r1, #4]
 800706c:	6923      	ldr	r3, [r4, #16]
 800706e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007072:	68a3      	ldr	r3, [r4, #8]
 8007074:	4607      	mov	r7, r0
 8007076:	4691      	mov	r9, r2
 8007078:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800707c:	f108 0601 	add.w	r6, r8, #1
 8007080:	42b3      	cmp	r3, r6
 8007082:	db0b      	blt.n	800709c <__lshift+0x38>
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff fddf 	bl	8006c48 <_Balloc>
 800708a:	4605      	mov	r5, r0
 800708c:	b948      	cbnz	r0, 80070a2 <__lshift+0x3e>
 800708e:	4602      	mov	r2, r0
 8007090:	4b28      	ldr	r3, [pc, #160]	@ (8007134 <__lshift+0xd0>)
 8007092:	4829      	ldr	r0, [pc, #164]	@ (8007138 <__lshift+0xd4>)
 8007094:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007098:	f000 fb94 	bl	80077c4 <__assert_func>
 800709c:	3101      	adds	r1, #1
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	e7ee      	b.n	8007080 <__lshift+0x1c>
 80070a2:	2300      	movs	r3, #0
 80070a4:	f100 0114 	add.w	r1, r0, #20
 80070a8:	f100 0210 	add.w	r2, r0, #16
 80070ac:	4618      	mov	r0, r3
 80070ae:	4553      	cmp	r3, sl
 80070b0:	db33      	blt.n	800711a <__lshift+0xb6>
 80070b2:	6920      	ldr	r0, [r4, #16]
 80070b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070b8:	f104 0314 	add.w	r3, r4, #20
 80070bc:	f019 091f 	ands.w	r9, r9, #31
 80070c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070c8:	d02b      	beq.n	8007122 <__lshift+0xbe>
 80070ca:	f1c9 0e20 	rsb	lr, r9, #32
 80070ce:	468a      	mov	sl, r1
 80070d0:	2200      	movs	r2, #0
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	fa00 f009 	lsl.w	r0, r0, r9
 80070d8:	4310      	orrs	r0, r2
 80070da:	f84a 0b04 	str.w	r0, [sl], #4
 80070de:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e2:	459c      	cmp	ip, r3
 80070e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80070e8:	d8f3      	bhi.n	80070d2 <__lshift+0x6e>
 80070ea:	ebac 0304 	sub.w	r3, ip, r4
 80070ee:	3b15      	subs	r3, #21
 80070f0:	f023 0303 	bic.w	r3, r3, #3
 80070f4:	3304      	adds	r3, #4
 80070f6:	f104 0015 	add.w	r0, r4, #21
 80070fa:	4584      	cmp	ip, r0
 80070fc:	bf38      	it	cc
 80070fe:	2304      	movcc	r3, #4
 8007100:	50ca      	str	r2, [r1, r3]
 8007102:	b10a      	cbz	r2, 8007108 <__lshift+0xa4>
 8007104:	f108 0602 	add.w	r6, r8, #2
 8007108:	3e01      	subs	r6, #1
 800710a:	4638      	mov	r0, r7
 800710c:	612e      	str	r6, [r5, #16]
 800710e:	4621      	mov	r1, r4
 8007110:	f7ff fdda 	bl	8006cc8 <_Bfree>
 8007114:	4628      	mov	r0, r5
 8007116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711a:	f842 0f04 	str.w	r0, [r2, #4]!
 800711e:	3301      	adds	r3, #1
 8007120:	e7c5      	b.n	80070ae <__lshift+0x4a>
 8007122:	3904      	subs	r1, #4
 8007124:	f853 2b04 	ldr.w	r2, [r3], #4
 8007128:	f841 2f04 	str.w	r2, [r1, #4]!
 800712c:	459c      	cmp	ip, r3
 800712e:	d8f9      	bhi.n	8007124 <__lshift+0xc0>
 8007130:	e7ea      	b.n	8007108 <__lshift+0xa4>
 8007132:	bf00      	nop
 8007134:	08007fc0 	.word	0x08007fc0
 8007138:	08007fd1 	.word	0x08007fd1

0800713c <__mcmp>:
 800713c:	690a      	ldr	r2, [r1, #16]
 800713e:	4603      	mov	r3, r0
 8007140:	6900      	ldr	r0, [r0, #16]
 8007142:	1a80      	subs	r0, r0, r2
 8007144:	b530      	push	{r4, r5, lr}
 8007146:	d10e      	bne.n	8007166 <__mcmp+0x2a>
 8007148:	3314      	adds	r3, #20
 800714a:	3114      	adds	r1, #20
 800714c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007150:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007154:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007158:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800715c:	4295      	cmp	r5, r2
 800715e:	d003      	beq.n	8007168 <__mcmp+0x2c>
 8007160:	d205      	bcs.n	800716e <__mcmp+0x32>
 8007162:	f04f 30ff 	mov.w	r0, #4294967295
 8007166:	bd30      	pop	{r4, r5, pc}
 8007168:	42a3      	cmp	r3, r4
 800716a:	d3f3      	bcc.n	8007154 <__mcmp+0x18>
 800716c:	e7fb      	b.n	8007166 <__mcmp+0x2a>
 800716e:	2001      	movs	r0, #1
 8007170:	e7f9      	b.n	8007166 <__mcmp+0x2a>
	...

08007174 <__mdiff>:
 8007174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	4689      	mov	r9, r1
 800717a:	4606      	mov	r6, r0
 800717c:	4611      	mov	r1, r2
 800717e:	4648      	mov	r0, r9
 8007180:	4614      	mov	r4, r2
 8007182:	f7ff ffdb 	bl	800713c <__mcmp>
 8007186:	1e05      	subs	r5, r0, #0
 8007188:	d112      	bne.n	80071b0 <__mdiff+0x3c>
 800718a:	4629      	mov	r1, r5
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff fd5b 	bl	8006c48 <_Balloc>
 8007192:	4602      	mov	r2, r0
 8007194:	b928      	cbnz	r0, 80071a2 <__mdiff+0x2e>
 8007196:	4b3f      	ldr	r3, [pc, #252]	@ (8007294 <__mdiff+0x120>)
 8007198:	f240 2137 	movw	r1, #567	@ 0x237
 800719c:	483e      	ldr	r0, [pc, #248]	@ (8007298 <__mdiff+0x124>)
 800719e:	f000 fb11 	bl	80077c4 <__assert_func>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071a8:	4610      	mov	r0, r2
 80071aa:	b003      	add	sp, #12
 80071ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b0:	bfbc      	itt	lt
 80071b2:	464b      	movlt	r3, r9
 80071b4:	46a1      	movlt	r9, r4
 80071b6:	4630      	mov	r0, r6
 80071b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80071bc:	bfba      	itte	lt
 80071be:	461c      	movlt	r4, r3
 80071c0:	2501      	movlt	r5, #1
 80071c2:	2500      	movge	r5, #0
 80071c4:	f7ff fd40 	bl	8006c48 <_Balloc>
 80071c8:	4602      	mov	r2, r0
 80071ca:	b918      	cbnz	r0, 80071d4 <__mdiff+0x60>
 80071cc:	4b31      	ldr	r3, [pc, #196]	@ (8007294 <__mdiff+0x120>)
 80071ce:	f240 2145 	movw	r1, #581	@ 0x245
 80071d2:	e7e3      	b.n	800719c <__mdiff+0x28>
 80071d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071d8:	6926      	ldr	r6, [r4, #16]
 80071da:	60c5      	str	r5, [r0, #12]
 80071dc:	f109 0310 	add.w	r3, r9, #16
 80071e0:	f109 0514 	add.w	r5, r9, #20
 80071e4:	f104 0e14 	add.w	lr, r4, #20
 80071e8:	f100 0b14 	add.w	fp, r0, #20
 80071ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80071f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	46d9      	mov	r9, fp
 80071f8:	f04f 0c00 	mov.w	ip, #0
 80071fc:	9b01      	ldr	r3, [sp, #4]
 80071fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007202:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	fa1f f38a 	uxth.w	r3, sl
 800720c:	4619      	mov	r1, r3
 800720e:	b283      	uxth	r3, r0
 8007210:	1acb      	subs	r3, r1, r3
 8007212:	0c00      	lsrs	r0, r0, #16
 8007214:	4463      	add	r3, ip
 8007216:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800721a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800721e:	b29b      	uxth	r3, r3
 8007220:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007224:	4576      	cmp	r6, lr
 8007226:	f849 3b04 	str.w	r3, [r9], #4
 800722a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800722e:	d8e5      	bhi.n	80071fc <__mdiff+0x88>
 8007230:	1b33      	subs	r3, r6, r4
 8007232:	3b15      	subs	r3, #21
 8007234:	f023 0303 	bic.w	r3, r3, #3
 8007238:	3415      	adds	r4, #21
 800723a:	3304      	adds	r3, #4
 800723c:	42a6      	cmp	r6, r4
 800723e:	bf38      	it	cc
 8007240:	2304      	movcc	r3, #4
 8007242:	441d      	add	r5, r3
 8007244:	445b      	add	r3, fp
 8007246:	461e      	mov	r6, r3
 8007248:	462c      	mov	r4, r5
 800724a:	4544      	cmp	r4, r8
 800724c:	d30e      	bcc.n	800726c <__mdiff+0xf8>
 800724e:	f108 0103 	add.w	r1, r8, #3
 8007252:	1b49      	subs	r1, r1, r5
 8007254:	f021 0103 	bic.w	r1, r1, #3
 8007258:	3d03      	subs	r5, #3
 800725a:	45a8      	cmp	r8, r5
 800725c:	bf38      	it	cc
 800725e:	2100      	movcc	r1, #0
 8007260:	440b      	add	r3, r1
 8007262:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007266:	b191      	cbz	r1, 800728e <__mdiff+0x11a>
 8007268:	6117      	str	r7, [r2, #16]
 800726a:	e79d      	b.n	80071a8 <__mdiff+0x34>
 800726c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007270:	46e6      	mov	lr, ip
 8007272:	0c08      	lsrs	r0, r1, #16
 8007274:	fa1c fc81 	uxtah	ip, ip, r1
 8007278:	4471      	add	r1, lr
 800727a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800727e:	b289      	uxth	r1, r1
 8007280:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007284:	f846 1b04 	str.w	r1, [r6], #4
 8007288:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800728c:	e7dd      	b.n	800724a <__mdiff+0xd6>
 800728e:	3f01      	subs	r7, #1
 8007290:	e7e7      	b.n	8007262 <__mdiff+0xee>
 8007292:	bf00      	nop
 8007294:	08007fc0 	.word	0x08007fc0
 8007298:	08007fd1 	.word	0x08007fd1

0800729c <__d2b>:
 800729c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072a0:	460f      	mov	r7, r1
 80072a2:	2101      	movs	r1, #1
 80072a4:	ec59 8b10 	vmov	r8, r9, d0
 80072a8:	4616      	mov	r6, r2
 80072aa:	f7ff fccd 	bl	8006c48 <_Balloc>
 80072ae:	4604      	mov	r4, r0
 80072b0:	b930      	cbnz	r0, 80072c0 <__d2b+0x24>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b23      	ldr	r3, [pc, #140]	@ (8007344 <__d2b+0xa8>)
 80072b6:	4824      	ldr	r0, [pc, #144]	@ (8007348 <__d2b+0xac>)
 80072b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80072bc:	f000 fa82 	bl	80077c4 <__assert_func>
 80072c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072c8:	b10d      	cbz	r5, 80072ce <__d2b+0x32>
 80072ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	f1b8 0300 	subs.w	r3, r8, #0
 80072d4:	d023      	beq.n	800731e <__d2b+0x82>
 80072d6:	4668      	mov	r0, sp
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	f7ff fd7c 	bl	8006dd6 <__lo0bits>
 80072de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072e2:	b1d0      	cbz	r0, 800731a <__d2b+0x7e>
 80072e4:	f1c0 0320 	rsb	r3, r0, #32
 80072e8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ec:	430b      	orrs	r3, r1
 80072ee:	40c2      	lsrs	r2, r0
 80072f0:	6163      	str	r3, [r4, #20]
 80072f2:	9201      	str	r2, [sp, #4]
 80072f4:	9b01      	ldr	r3, [sp, #4]
 80072f6:	61a3      	str	r3, [r4, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bf0c      	ite	eq
 80072fc:	2201      	moveq	r2, #1
 80072fe:	2202      	movne	r2, #2
 8007300:	6122      	str	r2, [r4, #16]
 8007302:	b1a5      	cbz	r5, 800732e <__d2b+0x92>
 8007304:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007308:	4405      	add	r5, r0
 800730a:	603d      	str	r5, [r7, #0]
 800730c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007310:	6030      	str	r0, [r6, #0]
 8007312:	4620      	mov	r0, r4
 8007314:	b003      	add	sp, #12
 8007316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800731a:	6161      	str	r1, [r4, #20]
 800731c:	e7ea      	b.n	80072f4 <__d2b+0x58>
 800731e:	a801      	add	r0, sp, #4
 8007320:	f7ff fd59 	bl	8006dd6 <__lo0bits>
 8007324:	9b01      	ldr	r3, [sp, #4]
 8007326:	6163      	str	r3, [r4, #20]
 8007328:	3020      	adds	r0, #32
 800732a:	2201      	movs	r2, #1
 800732c:	e7e8      	b.n	8007300 <__d2b+0x64>
 800732e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007332:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007336:	6038      	str	r0, [r7, #0]
 8007338:	6918      	ldr	r0, [r3, #16]
 800733a:	f7ff fd2d 	bl	8006d98 <__hi0bits>
 800733e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007342:	e7e5      	b.n	8007310 <__d2b+0x74>
 8007344:	08007fc0 	.word	0x08007fc0
 8007348:	08007fd1 	.word	0x08007fd1

0800734c <__ssputs_r>:
 800734c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007350:	688e      	ldr	r6, [r1, #8]
 8007352:	461f      	mov	r7, r3
 8007354:	42be      	cmp	r6, r7
 8007356:	680b      	ldr	r3, [r1, #0]
 8007358:	4682      	mov	sl, r0
 800735a:	460c      	mov	r4, r1
 800735c:	4690      	mov	r8, r2
 800735e:	d82d      	bhi.n	80073bc <__ssputs_r+0x70>
 8007360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007364:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007368:	d026      	beq.n	80073b8 <__ssputs_r+0x6c>
 800736a:	6965      	ldr	r5, [r4, #20]
 800736c:	6909      	ldr	r1, [r1, #16]
 800736e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007372:	eba3 0901 	sub.w	r9, r3, r1
 8007376:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800737a:	1c7b      	adds	r3, r7, #1
 800737c:	444b      	add	r3, r9
 800737e:	106d      	asrs	r5, r5, #1
 8007380:	429d      	cmp	r5, r3
 8007382:	bf38      	it	cc
 8007384:	461d      	movcc	r5, r3
 8007386:	0553      	lsls	r3, r2, #21
 8007388:	d527      	bpl.n	80073da <__ssputs_r+0x8e>
 800738a:	4629      	mov	r1, r5
 800738c:	f7ff fbd0 	bl	8006b30 <_malloc_r>
 8007390:	4606      	mov	r6, r0
 8007392:	b360      	cbz	r0, 80073ee <__ssputs_r+0xa2>
 8007394:	6921      	ldr	r1, [r4, #16]
 8007396:	464a      	mov	r2, r9
 8007398:	f000 fa06 	bl	80077a8 <memcpy>
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a6:	81a3      	strh	r3, [r4, #12]
 80073a8:	6126      	str	r6, [r4, #16]
 80073aa:	6165      	str	r5, [r4, #20]
 80073ac:	444e      	add	r6, r9
 80073ae:	eba5 0509 	sub.w	r5, r5, r9
 80073b2:	6026      	str	r6, [r4, #0]
 80073b4:	60a5      	str	r5, [r4, #8]
 80073b6:	463e      	mov	r6, r7
 80073b8:	42be      	cmp	r6, r7
 80073ba:	d900      	bls.n	80073be <__ssputs_r+0x72>
 80073bc:	463e      	mov	r6, r7
 80073be:	6820      	ldr	r0, [r4, #0]
 80073c0:	4632      	mov	r2, r6
 80073c2:	4641      	mov	r1, r8
 80073c4:	f000 f9c6 	bl	8007754 <memmove>
 80073c8:	68a3      	ldr	r3, [r4, #8]
 80073ca:	1b9b      	subs	r3, r3, r6
 80073cc:	60a3      	str	r3, [r4, #8]
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	4433      	add	r3, r6
 80073d2:	6023      	str	r3, [r4, #0]
 80073d4:	2000      	movs	r0, #0
 80073d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073da:	462a      	mov	r2, r5
 80073dc:	f000 fa36 	bl	800784c <_realloc_r>
 80073e0:	4606      	mov	r6, r0
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d1e0      	bne.n	80073a8 <__ssputs_r+0x5c>
 80073e6:	6921      	ldr	r1, [r4, #16]
 80073e8:	4650      	mov	r0, sl
 80073ea:	f7ff fb2d 	bl	8006a48 <_free_r>
 80073ee:	230c      	movs	r3, #12
 80073f0:	f8ca 3000 	str.w	r3, [sl]
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	e7e9      	b.n	80073d6 <__ssputs_r+0x8a>
	...

08007404 <_svfiprintf_r>:
 8007404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	4698      	mov	r8, r3
 800740a:	898b      	ldrh	r3, [r1, #12]
 800740c:	061b      	lsls	r3, r3, #24
 800740e:	b09d      	sub	sp, #116	@ 0x74
 8007410:	4607      	mov	r7, r0
 8007412:	460d      	mov	r5, r1
 8007414:	4614      	mov	r4, r2
 8007416:	d510      	bpl.n	800743a <_svfiprintf_r+0x36>
 8007418:	690b      	ldr	r3, [r1, #16]
 800741a:	b973      	cbnz	r3, 800743a <_svfiprintf_r+0x36>
 800741c:	2140      	movs	r1, #64	@ 0x40
 800741e:	f7ff fb87 	bl	8006b30 <_malloc_r>
 8007422:	6028      	str	r0, [r5, #0]
 8007424:	6128      	str	r0, [r5, #16]
 8007426:	b930      	cbnz	r0, 8007436 <_svfiprintf_r+0x32>
 8007428:	230c      	movs	r3, #12
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	b01d      	add	sp, #116	@ 0x74
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	2340      	movs	r3, #64	@ 0x40
 8007438:	616b      	str	r3, [r5, #20]
 800743a:	2300      	movs	r3, #0
 800743c:	9309      	str	r3, [sp, #36]	@ 0x24
 800743e:	2320      	movs	r3, #32
 8007440:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007444:	f8cd 800c 	str.w	r8, [sp, #12]
 8007448:	2330      	movs	r3, #48	@ 0x30
 800744a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075e8 <_svfiprintf_r+0x1e4>
 800744e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007452:	f04f 0901 	mov.w	r9, #1
 8007456:	4623      	mov	r3, r4
 8007458:	469a      	mov	sl, r3
 800745a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800745e:	b10a      	cbz	r2, 8007464 <_svfiprintf_r+0x60>
 8007460:	2a25      	cmp	r2, #37	@ 0x25
 8007462:	d1f9      	bne.n	8007458 <_svfiprintf_r+0x54>
 8007464:	ebba 0b04 	subs.w	fp, sl, r4
 8007468:	d00b      	beq.n	8007482 <_svfiprintf_r+0x7e>
 800746a:	465b      	mov	r3, fp
 800746c:	4622      	mov	r2, r4
 800746e:	4629      	mov	r1, r5
 8007470:	4638      	mov	r0, r7
 8007472:	f7ff ff6b 	bl	800734c <__ssputs_r>
 8007476:	3001      	adds	r0, #1
 8007478:	f000 80a7 	beq.w	80075ca <_svfiprintf_r+0x1c6>
 800747c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800747e:	445a      	add	r2, fp
 8007480:	9209      	str	r2, [sp, #36]	@ 0x24
 8007482:	f89a 3000 	ldrb.w	r3, [sl]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 809f 	beq.w	80075ca <_svfiprintf_r+0x1c6>
 800748c:	2300      	movs	r3, #0
 800748e:	f04f 32ff 	mov.w	r2, #4294967295
 8007492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007496:	f10a 0a01 	add.w	sl, sl, #1
 800749a:	9304      	str	r3, [sp, #16]
 800749c:	9307      	str	r3, [sp, #28]
 800749e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80074a4:	4654      	mov	r4, sl
 80074a6:	2205      	movs	r2, #5
 80074a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ac:	484e      	ldr	r0, [pc, #312]	@ (80075e8 <_svfiprintf_r+0x1e4>)
 80074ae:	f7f8 fe8f 	bl	80001d0 <memchr>
 80074b2:	9a04      	ldr	r2, [sp, #16]
 80074b4:	b9d8      	cbnz	r0, 80074ee <_svfiprintf_r+0xea>
 80074b6:	06d0      	lsls	r0, r2, #27
 80074b8:	bf44      	itt	mi
 80074ba:	2320      	movmi	r3, #32
 80074bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074c0:	0711      	lsls	r1, r2, #28
 80074c2:	bf44      	itt	mi
 80074c4:	232b      	movmi	r3, #43	@ 0x2b
 80074c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ca:	f89a 3000 	ldrb.w	r3, [sl]
 80074ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80074d0:	d015      	beq.n	80074fe <_svfiprintf_r+0xfa>
 80074d2:	9a07      	ldr	r2, [sp, #28]
 80074d4:	4654      	mov	r4, sl
 80074d6:	2000      	movs	r0, #0
 80074d8:	f04f 0c0a 	mov.w	ip, #10
 80074dc:	4621      	mov	r1, r4
 80074de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e2:	3b30      	subs	r3, #48	@ 0x30
 80074e4:	2b09      	cmp	r3, #9
 80074e6:	d94b      	bls.n	8007580 <_svfiprintf_r+0x17c>
 80074e8:	b1b0      	cbz	r0, 8007518 <_svfiprintf_r+0x114>
 80074ea:	9207      	str	r2, [sp, #28]
 80074ec:	e014      	b.n	8007518 <_svfiprintf_r+0x114>
 80074ee:	eba0 0308 	sub.w	r3, r0, r8
 80074f2:	fa09 f303 	lsl.w	r3, r9, r3
 80074f6:	4313      	orrs	r3, r2
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	46a2      	mov	sl, r4
 80074fc:	e7d2      	b.n	80074a4 <_svfiprintf_r+0xa0>
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	1d19      	adds	r1, r3, #4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	9103      	str	r1, [sp, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	bfbb      	ittet	lt
 800750a:	425b      	neglt	r3, r3
 800750c:	f042 0202 	orrlt.w	r2, r2, #2
 8007510:	9307      	strge	r3, [sp, #28]
 8007512:	9307      	strlt	r3, [sp, #28]
 8007514:	bfb8      	it	lt
 8007516:	9204      	strlt	r2, [sp, #16]
 8007518:	7823      	ldrb	r3, [r4, #0]
 800751a:	2b2e      	cmp	r3, #46	@ 0x2e
 800751c:	d10a      	bne.n	8007534 <_svfiprintf_r+0x130>
 800751e:	7863      	ldrb	r3, [r4, #1]
 8007520:	2b2a      	cmp	r3, #42	@ 0x2a
 8007522:	d132      	bne.n	800758a <_svfiprintf_r+0x186>
 8007524:	9b03      	ldr	r3, [sp, #12]
 8007526:	1d1a      	adds	r2, r3, #4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	9203      	str	r2, [sp, #12]
 800752c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007530:	3402      	adds	r4, #2
 8007532:	9305      	str	r3, [sp, #20]
 8007534:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075f8 <_svfiprintf_r+0x1f4>
 8007538:	7821      	ldrb	r1, [r4, #0]
 800753a:	2203      	movs	r2, #3
 800753c:	4650      	mov	r0, sl
 800753e:	f7f8 fe47 	bl	80001d0 <memchr>
 8007542:	b138      	cbz	r0, 8007554 <_svfiprintf_r+0x150>
 8007544:	9b04      	ldr	r3, [sp, #16]
 8007546:	eba0 000a 	sub.w	r0, r0, sl
 800754a:	2240      	movs	r2, #64	@ 0x40
 800754c:	4082      	lsls	r2, r0
 800754e:	4313      	orrs	r3, r2
 8007550:	3401      	adds	r4, #1
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007558:	4824      	ldr	r0, [pc, #144]	@ (80075ec <_svfiprintf_r+0x1e8>)
 800755a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800755e:	2206      	movs	r2, #6
 8007560:	f7f8 fe36 	bl	80001d0 <memchr>
 8007564:	2800      	cmp	r0, #0
 8007566:	d036      	beq.n	80075d6 <_svfiprintf_r+0x1d2>
 8007568:	4b21      	ldr	r3, [pc, #132]	@ (80075f0 <_svfiprintf_r+0x1ec>)
 800756a:	bb1b      	cbnz	r3, 80075b4 <_svfiprintf_r+0x1b0>
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	3307      	adds	r3, #7
 8007570:	f023 0307 	bic.w	r3, r3, #7
 8007574:	3308      	adds	r3, #8
 8007576:	9303      	str	r3, [sp, #12]
 8007578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757a:	4433      	add	r3, r6
 800757c:	9309      	str	r3, [sp, #36]	@ 0x24
 800757e:	e76a      	b.n	8007456 <_svfiprintf_r+0x52>
 8007580:	fb0c 3202 	mla	r2, ip, r2, r3
 8007584:	460c      	mov	r4, r1
 8007586:	2001      	movs	r0, #1
 8007588:	e7a8      	b.n	80074dc <_svfiprintf_r+0xd8>
 800758a:	2300      	movs	r3, #0
 800758c:	3401      	adds	r4, #1
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	4619      	mov	r1, r3
 8007592:	f04f 0c0a 	mov.w	ip, #10
 8007596:	4620      	mov	r0, r4
 8007598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800759c:	3a30      	subs	r2, #48	@ 0x30
 800759e:	2a09      	cmp	r2, #9
 80075a0:	d903      	bls.n	80075aa <_svfiprintf_r+0x1a6>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0c6      	beq.n	8007534 <_svfiprintf_r+0x130>
 80075a6:	9105      	str	r1, [sp, #20]
 80075a8:	e7c4      	b.n	8007534 <_svfiprintf_r+0x130>
 80075aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80075ae:	4604      	mov	r4, r0
 80075b0:	2301      	movs	r3, #1
 80075b2:	e7f0      	b.n	8007596 <_svfiprintf_r+0x192>
 80075b4:	ab03      	add	r3, sp, #12
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	462a      	mov	r2, r5
 80075ba:	4b0e      	ldr	r3, [pc, #56]	@ (80075f4 <_svfiprintf_r+0x1f0>)
 80075bc:	a904      	add	r1, sp, #16
 80075be:	4638      	mov	r0, r7
 80075c0:	f7fd fe96 	bl	80052f0 <_printf_float>
 80075c4:	1c42      	adds	r2, r0, #1
 80075c6:	4606      	mov	r6, r0
 80075c8:	d1d6      	bne.n	8007578 <_svfiprintf_r+0x174>
 80075ca:	89ab      	ldrh	r3, [r5, #12]
 80075cc:	065b      	lsls	r3, r3, #25
 80075ce:	f53f af2d 	bmi.w	800742c <_svfiprintf_r+0x28>
 80075d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075d4:	e72c      	b.n	8007430 <_svfiprintf_r+0x2c>
 80075d6:	ab03      	add	r3, sp, #12
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	462a      	mov	r2, r5
 80075dc:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <_svfiprintf_r+0x1f0>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	4638      	mov	r0, r7
 80075e2:	f7fe f91d 	bl	8005820 <_printf_i>
 80075e6:	e7ed      	b.n	80075c4 <_svfiprintf_r+0x1c0>
 80075e8:	08008128 	.word	0x08008128
 80075ec:	08008132 	.word	0x08008132
 80075f0:	080052f1 	.word	0x080052f1
 80075f4:	0800734d 	.word	0x0800734d
 80075f8:	0800812e 	.word	0x0800812e

080075fc <__sflush_r>:
 80075fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	0716      	lsls	r6, r2, #28
 8007606:	4605      	mov	r5, r0
 8007608:	460c      	mov	r4, r1
 800760a:	d454      	bmi.n	80076b6 <__sflush_r+0xba>
 800760c:	684b      	ldr	r3, [r1, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dc02      	bgt.n	8007618 <__sflush_r+0x1c>
 8007612:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	dd48      	ble.n	80076aa <__sflush_r+0xae>
 8007618:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800761a:	2e00      	cmp	r6, #0
 800761c:	d045      	beq.n	80076aa <__sflush_r+0xae>
 800761e:	2300      	movs	r3, #0
 8007620:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007624:	682f      	ldr	r7, [r5, #0]
 8007626:	6a21      	ldr	r1, [r4, #32]
 8007628:	602b      	str	r3, [r5, #0]
 800762a:	d030      	beq.n	800768e <__sflush_r+0x92>
 800762c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	0759      	lsls	r1, r3, #29
 8007632:	d505      	bpl.n	8007640 <__sflush_r+0x44>
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800763a:	b10b      	cbz	r3, 8007640 <__sflush_r+0x44>
 800763c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	2300      	movs	r3, #0
 8007642:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007644:	6a21      	ldr	r1, [r4, #32]
 8007646:	4628      	mov	r0, r5
 8007648:	47b0      	blx	r6
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	d106      	bne.n	800765e <__sflush_r+0x62>
 8007650:	6829      	ldr	r1, [r5, #0]
 8007652:	291d      	cmp	r1, #29
 8007654:	d82b      	bhi.n	80076ae <__sflush_r+0xb2>
 8007656:	4a2a      	ldr	r2, [pc, #168]	@ (8007700 <__sflush_r+0x104>)
 8007658:	410a      	asrs	r2, r1
 800765a:	07d6      	lsls	r6, r2, #31
 800765c:	d427      	bmi.n	80076ae <__sflush_r+0xb2>
 800765e:	2200      	movs	r2, #0
 8007660:	6062      	str	r2, [r4, #4]
 8007662:	04d9      	lsls	r1, r3, #19
 8007664:	6922      	ldr	r2, [r4, #16]
 8007666:	6022      	str	r2, [r4, #0]
 8007668:	d504      	bpl.n	8007674 <__sflush_r+0x78>
 800766a:	1c42      	adds	r2, r0, #1
 800766c:	d101      	bne.n	8007672 <__sflush_r+0x76>
 800766e:	682b      	ldr	r3, [r5, #0]
 8007670:	b903      	cbnz	r3, 8007674 <__sflush_r+0x78>
 8007672:	6560      	str	r0, [r4, #84]	@ 0x54
 8007674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007676:	602f      	str	r7, [r5, #0]
 8007678:	b1b9      	cbz	r1, 80076aa <__sflush_r+0xae>
 800767a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800767e:	4299      	cmp	r1, r3
 8007680:	d002      	beq.n	8007688 <__sflush_r+0x8c>
 8007682:	4628      	mov	r0, r5
 8007684:	f7ff f9e0 	bl	8006a48 <_free_r>
 8007688:	2300      	movs	r3, #0
 800768a:	6363      	str	r3, [r4, #52]	@ 0x34
 800768c:	e00d      	b.n	80076aa <__sflush_r+0xae>
 800768e:	2301      	movs	r3, #1
 8007690:	4628      	mov	r0, r5
 8007692:	47b0      	blx	r6
 8007694:	4602      	mov	r2, r0
 8007696:	1c50      	adds	r0, r2, #1
 8007698:	d1c9      	bne.n	800762e <__sflush_r+0x32>
 800769a:	682b      	ldr	r3, [r5, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0c6      	beq.n	800762e <__sflush_r+0x32>
 80076a0:	2b1d      	cmp	r3, #29
 80076a2:	d001      	beq.n	80076a8 <__sflush_r+0xac>
 80076a4:	2b16      	cmp	r3, #22
 80076a6:	d11e      	bne.n	80076e6 <__sflush_r+0xea>
 80076a8:	602f      	str	r7, [r5, #0]
 80076aa:	2000      	movs	r0, #0
 80076ac:	e022      	b.n	80076f4 <__sflush_r+0xf8>
 80076ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076b2:	b21b      	sxth	r3, r3
 80076b4:	e01b      	b.n	80076ee <__sflush_r+0xf2>
 80076b6:	690f      	ldr	r7, [r1, #16]
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	d0f6      	beq.n	80076aa <__sflush_r+0xae>
 80076bc:	0793      	lsls	r3, r2, #30
 80076be:	680e      	ldr	r6, [r1, #0]
 80076c0:	bf08      	it	eq
 80076c2:	694b      	ldreq	r3, [r1, #20]
 80076c4:	600f      	str	r7, [r1, #0]
 80076c6:	bf18      	it	ne
 80076c8:	2300      	movne	r3, #0
 80076ca:	eba6 0807 	sub.w	r8, r6, r7
 80076ce:	608b      	str	r3, [r1, #8]
 80076d0:	f1b8 0f00 	cmp.w	r8, #0
 80076d4:	dde9      	ble.n	80076aa <__sflush_r+0xae>
 80076d6:	6a21      	ldr	r1, [r4, #32]
 80076d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076da:	4643      	mov	r3, r8
 80076dc:	463a      	mov	r2, r7
 80076de:	4628      	mov	r0, r5
 80076e0:	47b0      	blx	r6
 80076e2:	2800      	cmp	r0, #0
 80076e4:	dc08      	bgt.n	80076f8 <__sflush_r+0xfc>
 80076e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f8:	4407      	add	r7, r0
 80076fa:	eba8 0800 	sub.w	r8, r8, r0
 80076fe:	e7e7      	b.n	80076d0 <__sflush_r+0xd4>
 8007700:	dfbffffe 	.word	0xdfbffffe

08007704 <_fflush_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	690b      	ldr	r3, [r1, #16]
 8007708:	4605      	mov	r5, r0
 800770a:	460c      	mov	r4, r1
 800770c:	b913      	cbnz	r3, 8007714 <_fflush_r+0x10>
 800770e:	2500      	movs	r5, #0
 8007710:	4628      	mov	r0, r5
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	b118      	cbz	r0, 800771e <_fflush_r+0x1a>
 8007716:	6a03      	ldr	r3, [r0, #32]
 8007718:	b90b      	cbnz	r3, 800771e <_fflush_r+0x1a>
 800771a:	f7fe fa2d 	bl	8005b78 <__sinit>
 800771e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f3      	beq.n	800770e <_fflush_r+0xa>
 8007726:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007728:	07d0      	lsls	r0, r2, #31
 800772a:	d404      	bmi.n	8007736 <_fflush_r+0x32>
 800772c:	0599      	lsls	r1, r3, #22
 800772e:	d402      	bmi.n	8007736 <_fflush_r+0x32>
 8007730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007732:	f7fe fb38 	bl	8005da6 <__retarget_lock_acquire_recursive>
 8007736:	4628      	mov	r0, r5
 8007738:	4621      	mov	r1, r4
 800773a:	f7ff ff5f 	bl	80075fc <__sflush_r>
 800773e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007740:	07da      	lsls	r2, r3, #31
 8007742:	4605      	mov	r5, r0
 8007744:	d4e4      	bmi.n	8007710 <_fflush_r+0xc>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	059b      	lsls	r3, r3, #22
 800774a:	d4e1      	bmi.n	8007710 <_fflush_r+0xc>
 800774c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800774e:	f7fe fb2b 	bl	8005da8 <__retarget_lock_release_recursive>
 8007752:	e7dd      	b.n	8007710 <_fflush_r+0xc>

08007754 <memmove>:
 8007754:	4288      	cmp	r0, r1
 8007756:	b510      	push	{r4, lr}
 8007758:	eb01 0402 	add.w	r4, r1, r2
 800775c:	d902      	bls.n	8007764 <memmove+0x10>
 800775e:	4284      	cmp	r4, r0
 8007760:	4623      	mov	r3, r4
 8007762:	d807      	bhi.n	8007774 <memmove+0x20>
 8007764:	1e43      	subs	r3, r0, #1
 8007766:	42a1      	cmp	r1, r4
 8007768:	d008      	beq.n	800777c <memmove+0x28>
 800776a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800776e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007772:	e7f8      	b.n	8007766 <memmove+0x12>
 8007774:	4402      	add	r2, r0
 8007776:	4601      	mov	r1, r0
 8007778:	428a      	cmp	r2, r1
 800777a:	d100      	bne.n	800777e <memmove+0x2a>
 800777c:	bd10      	pop	{r4, pc}
 800777e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007786:	e7f7      	b.n	8007778 <memmove+0x24>

08007788 <_sbrk_r>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	4d06      	ldr	r5, [pc, #24]	@ (80077a4 <_sbrk_r+0x1c>)
 800778c:	2300      	movs	r3, #0
 800778e:	4604      	mov	r4, r0
 8007790:	4608      	mov	r0, r1
 8007792:	602b      	str	r3, [r5, #0]
 8007794:	f7fa f824 	bl	80017e0 <_sbrk>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_sbrk_r+0x1a>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_sbrk_r+0x1a>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	20000fd8 	.word	0x20000fd8

080077a8 <memcpy>:
 80077a8:	440a      	add	r2, r1
 80077aa:	4291      	cmp	r1, r2
 80077ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80077b0:	d100      	bne.n	80077b4 <memcpy+0xc>
 80077b2:	4770      	bx	lr
 80077b4:	b510      	push	{r4, lr}
 80077b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077be:	4291      	cmp	r1, r2
 80077c0:	d1f9      	bne.n	80077b6 <memcpy+0xe>
 80077c2:	bd10      	pop	{r4, pc}

080077c4 <__assert_func>:
 80077c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077c6:	4614      	mov	r4, r2
 80077c8:	461a      	mov	r2, r3
 80077ca:	4b09      	ldr	r3, [pc, #36]	@ (80077f0 <__assert_func+0x2c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4605      	mov	r5, r0
 80077d0:	68d8      	ldr	r0, [r3, #12]
 80077d2:	b954      	cbnz	r4, 80077ea <__assert_func+0x26>
 80077d4:	4b07      	ldr	r3, [pc, #28]	@ (80077f4 <__assert_func+0x30>)
 80077d6:	461c      	mov	r4, r3
 80077d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077dc:	9100      	str	r1, [sp, #0]
 80077de:	462b      	mov	r3, r5
 80077e0:	4905      	ldr	r1, [pc, #20]	@ (80077f8 <__assert_func+0x34>)
 80077e2:	f000 f86f 	bl	80078c4 <fiprintf>
 80077e6:	f000 f87f 	bl	80078e8 <abort>
 80077ea:	4b04      	ldr	r3, [pc, #16]	@ (80077fc <__assert_func+0x38>)
 80077ec:	e7f4      	b.n	80077d8 <__assert_func+0x14>
 80077ee:	bf00      	nop
 80077f0:	20000018 	.word	0x20000018
 80077f4:	0800817e 	.word	0x0800817e
 80077f8:	08008150 	.word	0x08008150
 80077fc:	08008143 	.word	0x08008143

08007800 <_calloc_r>:
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	fba1 5402 	umull	r5, r4, r1, r2
 8007806:	b93c      	cbnz	r4, 8007818 <_calloc_r+0x18>
 8007808:	4629      	mov	r1, r5
 800780a:	f7ff f991 	bl	8006b30 <_malloc_r>
 800780e:	4606      	mov	r6, r0
 8007810:	b928      	cbnz	r0, 800781e <_calloc_r+0x1e>
 8007812:	2600      	movs	r6, #0
 8007814:	4630      	mov	r0, r6
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	220c      	movs	r2, #12
 800781a:	6002      	str	r2, [r0, #0]
 800781c:	e7f9      	b.n	8007812 <_calloc_r+0x12>
 800781e:	462a      	mov	r2, r5
 8007820:	4621      	mov	r1, r4
 8007822:	f7fe fa42 	bl	8005caa <memset>
 8007826:	e7f5      	b.n	8007814 <_calloc_r+0x14>

08007828 <__ascii_mbtowc>:
 8007828:	b082      	sub	sp, #8
 800782a:	b901      	cbnz	r1, 800782e <__ascii_mbtowc+0x6>
 800782c:	a901      	add	r1, sp, #4
 800782e:	b142      	cbz	r2, 8007842 <__ascii_mbtowc+0x1a>
 8007830:	b14b      	cbz	r3, 8007846 <__ascii_mbtowc+0x1e>
 8007832:	7813      	ldrb	r3, [r2, #0]
 8007834:	600b      	str	r3, [r1, #0]
 8007836:	7812      	ldrb	r2, [r2, #0]
 8007838:	1e10      	subs	r0, r2, #0
 800783a:	bf18      	it	ne
 800783c:	2001      	movne	r0, #1
 800783e:	b002      	add	sp, #8
 8007840:	4770      	bx	lr
 8007842:	4610      	mov	r0, r2
 8007844:	e7fb      	b.n	800783e <__ascii_mbtowc+0x16>
 8007846:	f06f 0001 	mvn.w	r0, #1
 800784a:	e7f8      	b.n	800783e <__ascii_mbtowc+0x16>

0800784c <_realloc_r>:
 800784c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007850:	4680      	mov	r8, r0
 8007852:	4615      	mov	r5, r2
 8007854:	460c      	mov	r4, r1
 8007856:	b921      	cbnz	r1, 8007862 <_realloc_r+0x16>
 8007858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800785c:	4611      	mov	r1, r2
 800785e:	f7ff b967 	b.w	8006b30 <_malloc_r>
 8007862:	b92a      	cbnz	r2, 8007870 <_realloc_r+0x24>
 8007864:	f7ff f8f0 	bl	8006a48 <_free_r>
 8007868:	2400      	movs	r4, #0
 800786a:	4620      	mov	r0, r4
 800786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007870:	f000 f841 	bl	80078f6 <_malloc_usable_size_r>
 8007874:	4285      	cmp	r5, r0
 8007876:	4606      	mov	r6, r0
 8007878:	d802      	bhi.n	8007880 <_realloc_r+0x34>
 800787a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800787e:	d8f4      	bhi.n	800786a <_realloc_r+0x1e>
 8007880:	4629      	mov	r1, r5
 8007882:	4640      	mov	r0, r8
 8007884:	f7ff f954 	bl	8006b30 <_malloc_r>
 8007888:	4607      	mov	r7, r0
 800788a:	2800      	cmp	r0, #0
 800788c:	d0ec      	beq.n	8007868 <_realloc_r+0x1c>
 800788e:	42b5      	cmp	r5, r6
 8007890:	462a      	mov	r2, r5
 8007892:	4621      	mov	r1, r4
 8007894:	bf28      	it	cs
 8007896:	4632      	movcs	r2, r6
 8007898:	f7ff ff86 	bl	80077a8 <memcpy>
 800789c:	4621      	mov	r1, r4
 800789e:	4640      	mov	r0, r8
 80078a0:	f7ff f8d2 	bl	8006a48 <_free_r>
 80078a4:	463c      	mov	r4, r7
 80078a6:	e7e0      	b.n	800786a <_realloc_r+0x1e>

080078a8 <__ascii_wctomb>:
 80078a8:	4603      	mov	r3, r0
 80078aa:	4608      	mov	r0, r1
 80078ac:	b141      	cbz	r1, 80078c0 <__ascii_wctomb+0x18>
 80078ae:	2aff      	cmp	r2, #255	@ 0xff
 80078b0:	d904      	bls.n	80078bc <__ascii_wctomb+0x14>
 80078b2:	228a      	movs	r2, #138	@ 0x8a
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ba:	4770      	bx	lr
 80078bc:	700a      	strb	r2, [r1, #0]
 80078be:	2001      	movs	r0, #1
 80078c0:	4770      	bx	lr
	...

080078c4 <fiprintf>:
 80078c4:	b40e      	push	{r1, r2, r3}
 80078c6:	b503      	push	{r0, r1, lr}
 80078c8:	4601      	mov	r1, r0
 80078ca:	ab03      	add	r3, sp, #12
 80078cc:	4805      	ldr	r0, [pc, #20]	@ (80078e4 <fiprintf+0x20>)
 80078ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d2:	6800      	ldr	r0, [r0, #0]
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	f000 f83f 	bl	8007958 <_vfiprintf_r>
 80078da:	b002      	add	sp, #8
 80078dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078e0:	b003      	add	sp, #12
 80078e2:	4770      	bx	lr
 80078e4:	20000018 	.word	0x20000018

080078e8 <abort>:
 80078e8:	b508      	push	{r3, lr}
 80078ea:	2006      	movs	r0, #6
 80078ec:	f000 fa08 	bl	8007d00 <raise>
 80078f0:	2001      	movs	r0, #1
 80078f2:	f7f9 fefd 	bl	80016f0 <_exit>

080078f6 <_malloc_usable_size_r>:
 80078f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078fa:	1f18      	subs	r0, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bfbc      	itt	lt
 8007900:	580b      	ldrlt	r3, [r1, r0]
 8007902:	18c0      	addlt	r0, r0, r3
 8007904:	4770      	bx	lr

08007906 <__sfputc_r>:
 8007906:	6893      	ldr	r3, [r2, #8]
 8007908:	3b01      	subs	r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	b410      	push	{r4}
 800790e:	6093      	str	r3, [r2, #8]
 8007910:	da08      	bge.n	8007924 <__sfputc_r+0x1e>
 8007912:	6994      	ldr	r4, [r2, #24]
 8007914:	42a3      	cmp	r3, r4
 8007916:	db01      	blt.n	800791c <__sfputc_r+0x16>
 8007918:	290a      	cmp	r1, #10
 800791a:	d103      	bne.n	8007924 <__sfputc_r+0x1e>
 800791c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007920:	f000 b932 	b.w	8007b88 <__swbuf_r>
 8007924:	6813      	ldr	r3, [r2, #0]
 8007926:	1c58      	adds	r0, r3, #1
 8007928:	6010      	str	r0, [r2, #0]
 800792a:	7019      	strb	r1, [r3, #0]
 800792c:	4608      	mov	r0, r1
 800792e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007932:	4770      	bx	lr

08007934 <__sfputs_r>:
 8007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007936:	4606      	mov	r6, r0
 8007938:	460f      	mov	r7, r1
 800793a:	4614      	mov	r4, r2
 800793c:	18d5      	adds	r5, r2, r3
 800793e:	42ac      	cmp	r4, r5
 8007940:	d101      	bne.n	8007946 <__sfputs_r+0x12>
 8007942:	2000      	movs	r0, #0
 8007944:	e007      	b.n	8007956 <__sfputs_r+0x22>
 8007946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800794a:	463a      	mov	r2, r7
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff ffda 	bl	8007906 <__sfputc_r>
 8007952:	1c43      	adds	r3, r0, #1
 8007954:	d1f3      	bne.n	800793e <__sfputs_r+0xa>
 8007956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007958 <_vfiprintf_r>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	460d      	mov	r5, r1
 800795e:	b09d      	sub	sp, #116	@ 0x74
 8007960:	4614      	mov	r4, r2
 8007962:	4698      	mov	r8, r3
 8007964:	4606      	mov	r6, r0
 8007966:	b118      	cbz	r0, 8007970 <_vfiprintf_r+0x18>
 8007968:	6a03      	ldr	r3, [r0, #32]
 800796a:	b90b      	cbnz	r3, 8007970 <_vfiprintf_r+0x18>
 800796c:	f7fe f904 	bl	8005b78 <__sinit>
 8007970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007972:	07d9      	lsls	r1, r3, #31
 8007974:	d405      	bmi.n	8007982 <_vfiprintf_r+0x2a>
 8007976:	89ab      	ldrh	r3, [r5, #12]
 8007978:	059a      	lsls	r2, r3, #22
 800797a:	d402      	bmi.n	8007982 <_vfiprintf_r+0x2a>
 800797c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800797e:	f7fe fa12 	bl	8005da6 <__retarget_lock_acquire_recursive>
 8007982:	89ab      	ldrh	r3, [r5, #12]
 8007984:	071b      	lsls	r3, r3, #28
 8007986:	d501      	bpl.n	800798c <_vfiprintf_r+0x34>
 8007988:	692b      	ldr	r3, [r5, #16]
 800798a:	b99b      	cbnz	r3, 80079b4 <_vfiprintf_r+0x5c>
 800798c:	4629      	mov	r1, r5
 800798e:	4630      	mov	r0, r6
 8007990:	f000 f938 	bl	8007c04 <__swsetup_r>
 8007994:	b170      	cbz	r0, 80079b4 <_vfiprintf_r+0x5c>
 8007996:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007998:	07dc      	lsls	r4, r3, #31
 800799a:	d504      	bpl.n	80079a6 <_vfiprintf_r+0x4e>
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	b01d      	add	sp, #116	@ 0x74
 80079a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a6:	89ab      	ldrh	r3, [r5, #12]
 80079a8:	0598      	lsls	r0, r3, #22
 80079aa:	d4f7      	bmi.n	800799c <_vfiprintf_r+0x44>
 80079ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079ae:	f7fe f9fb 	bl	8005da8 <__retarget_lock_release_recursive>
 80079b2:	e7f3      	b.n	800799c <_vfiprintf_r+0x44>
 80079b4:	2300      	movs	r3, #0
 80079b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80079b8:	2320      	movs	r3, #32
 80079ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079be:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c2:	2330      	movs	r3, #48	@ 0x30
 80079c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007b74 <_vfiprintf_r+0x21c>
 80079c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079cc:	f04f 0901 	mov.w	r9, #1
 80079d0:	4623      	mov	r3, r4
 80079d2:	469a      	mov	sl, r3
 80079d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d8:	b10a      	cbz	r2, 80079de <_vfiprintf_r+0x86>
 80079da:	2a25      	cmp	r2, #37	@ 0x25
 80079dc:	d1f9      	bne.n	80079d2 <_vfiprintf_r+0x7a>
 80079de:	ebba 0b04 	subs.w	fp, sl, r4
 80079e2:	d00b      	beq.n	80079fc <_vfiprintf_r+0xa4>
 80079e4:	465b      	mov	r3, fp
 80079e6:	4622      	mov	r2, r4
 80079e8:	4629      	mov	r1, r5
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7ff ffa2 	bl	8007934 <__sfputs_r>
 80079f0:	3001      	adds	r0, #1
 80079f2:	f000 80a7 	beq.w	8007b44 <_vfiprintf_r+0x1ec>
 80079f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079f8:	445a      	add	r2, fp
 80079fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80079fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 809f 	beq.w	8007b44 <_vfiprintf_r+0x1ec>
 8007a06:	2300      	movs	r3, #0
 8007a08:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a10:	f10a 0a01 	add.w	sl, sl, #1
 8007a14:	9304      	str	r3, [sp, #16]
 8007a16:	9307      	str	r3, [sp, #28]
 8007a18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a1e:	4654      	mov	r4, sl
 8007a20:	2205      	movs	r2, #5
 8007a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a26:	4853      	ldr	r0, [pc, #332]	@ (8007b74 <_vfiprintf_r+0x21c>)
 8007a28:	f7f8 fbd2 	bl	80001d0 <memchr>
 8007a2c:	9a04      	ldr	r2, [sp, #16]
 8007a2e:	b9d8      	cbnz	r0, 8007a68 <_vfiprintf_r+0x110>
 8007a30:	06d1      	lsls	r1, r2, #27
 8007a32:	bf44      	itt	mi
 8007a34:	2320      	movmi	r3, #32
 8007a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a3a:	0713      	lsls	r3, r2, #28
 8007a3c:	bf44      	itt	mi
 8007a3e:	232b      	movmi	r3, #43	@ 0x2b
 8007a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a44:	f89a 3000 	ldrb.w	r3, [sl]
 8007a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a4a:	d015      	beq.n	8007a78 <_vfiprintf_r+0x120>
 8007a4c:	9a07      	ldr	r2, [sp, #28]
 8007a4e:	4654      	mov	r4, sl
 8007a50:	2000      	movs	r0, #0
 8007a52:	f04f 0c0a 	mov.w	ip, #10
 8007a56:	4621      	mov	r1, r4
 8007a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a5c:	3b30      	subs	r3, #48	@ 0x30
 8007a5e:	2b09      	cmp	r3, #9
 8007a60:	d94b      	bls.n	8007afa <_vfiprintf_r+0x1a2>
 8007a62:	b1b0      	cbz	r0, 8007a92 <_vfiprintf_r+0x13a>
 8007a64:	9207      	str	r2, [sp, #28]
 8007a66:	e014      	b.n	8007a92 <_vfiprintf_r+0x13a>
 8007a68:	eba0 0308 	sub.w	r3, r0, r8
 8007a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a70:	4313      	orrs	r3, r2
 8007a72:	9304      	str	r3, [sp, #16]
 8007a74:	46a2      	mov	sl, r4
 8007a76:	e7d2      	b.n	8007a1e <_vfiprintf_r+0xc6>
 8007a78:	9b03      	ldr	r3, [sp, #12]
 8007a7a:	1d19      	adds	r1, r3, #4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	9103      	str	r1, [sp, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	bfbb      	ittet	lt
 8007a84:	425b      	neglt	r3, r3
 8007a86:	f042 0202 	orrlt.w	r2, r2, #2
 8007a8a:	9307      	strge	r3, [sp, #28]
 8007a8c:	9307      	strlt	r3, [sp, #28]
 8007a8e:	bfb8      	it	lt
 8007a90:	9204      	strlt	r2, [sp, #16]
 8007a92:	7823      	ldrb	r3, [r4, #0]
 8007a94:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a96:	d10a      	bne.n	8007aae <_vfiprintf_r+0x156>
 8007a98:	7863      	ldrb	r3, [r4, #1]
 8007a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a9c:	d132      	bne.n	8007b04 <_vfiprintf_r+0x1ac>
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	1d1a      	adds	r2, r3, #4
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	9203      	str	r2, [sp, #12]
 8007aa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007aaa:	3402      	adds	r4, #2
 8007aac:	9305      	str	r3, [sp, #20]
 8007aae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007b84 <_vfiprintf_r+0x22c>
 8007ab2:	7821      	ldrb	r1, [r4, #0]
 8007ab4:	2203      	movs	r2, #3
 8007ab6:	4650      	mov	r0, sl
 8007ab8:	f7f8 fb8a 	bl	80001d0 <memchr>
 8007abc:	b138      	cbz	r0, 8007ace <_vfiprintf_r+0x176>
 8007abe:	9b04      	ldr	r3, [sp, #16]
 8007ac0:	eba0 000a 	sub.w	r0, r0, sl
 8007ac4:	2240      	movs	r2, #64	@ 0x40
 8007ac6:	4082      	lsls	r2, r0
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	3401      	adds	r4, #1
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad2:	4829      	ldr	r0, [pc, #164]	@ (8007b78 <_vfiprintf_r+0x220>)
 8007ad4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ad8:	2206      	movs	r2, #6
 8007ada:	f7f8 fb79 	bl	80001d0 <memchr>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d03f      	beq.n	8007b62 <_vfiprintf_r+0x20a>
 8007ae2:	4b26      	ldr	r3, [pc, #152]	@ (8007b7c <_vfiprintf_r+0x224>)
 8007ae4:	bb1b      	cbnz	r3, 8007b2e <_vfiprintf_r+0x1d6>
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	3307      	adds	r3, #7
 8007aea:	f023 0307 	bic.w	r3, r3, #7
 8007aee:	3308      	adds	r3, #8
 8007af0:	9303      	str	r3, [sp, #12]
 8007af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af4:	443b      	add	r3, r7
 8007af6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af8:	e76a      	b.n	80079d0 <_vfiprintf_r+0x78>
 8007afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007afe:	460c      	mov	r4, r1
 8007b00:	2001      	movs	r0, #1
 8007b02:	e7a8      	b.n	8007a56 <_vfiprintf_r+0xfe>
 8007b04:	2300      	movs	r3, #0
 8007b06:	3401      	adds	r4, #1
 8007b08:	9305      	str	r3, [sp, #20]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	f04f 0c0a 	mov.w	ip, #10
 8007b10:	4620      	mov	r0, r4
 8007b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b16:	3a30      	subs	r2, #48	@ 0x30
 8007b18:	2a09      	cmp	r2, #9
 8007b1a:	d903      	bls.n	8007b24 <_vfiprintf_r+0x1cc>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0c6      	beq.n	8007aae <_vfiprintf_r+0x156>
 8007b20:	9105      	str	r1, [sp, #20]
 8007b22:	e7c4      	b.n	8007aae <_vfiprintf_r+0x156>
 8007b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b28:	4604      	mov	r4, r0
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e7f0      	b.n	8007b10 <_vfiprintf_r+0x1b8>
 8007b2e:	ab03      	add	r3, sp, #12
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	462a      	mov	r2, r5
 8007b34:	4b12      	ldr	r3, [pc, #72]	@ (8007b80 <_vfiprintf_r+0x228>)
 8007b36:	a904      	add	r1, sp, #16
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f7fd fbd9 	bl	80052f0 <_printf_float>
 8007b3e:	4607      	mov	r7, r0
 8007b40:	1c78      	adds	r0, r7, #1
 8007b42:	d1d6      	bne.n	8007af2 <_vfiprintf_r+0x19a>
 8007b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b46:	07d9      	lsls	r1, r3, #31
 8007b48:	d405      	bmi.n	8007b56 <_vfiprintf_r+0x1fe>
 8007b4a:	89ab      	ldrh	r3, [r5, #12]
 8007b4c:	059a      	lsls	r2, r3, #22
 8007b4e:	d402      	bmi.n	8007b56 <_vfiprintf_r+0x1fe>
 8007b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b52:	f7fe f929 	bl	8005da8 <__retarget_lock_release_recursive>
 8007b56:	89ab      	ldrh	r3, [r5, #12]
 8007b58:	065b      	lsls	r3, r3, #25
 8007b5a:	f53f af1f 	bmi.w	800799c <_vfiprintf_r+0x44>
 8007b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b60:	e71e      	b.n	80079a0 <_vfiprintf_r+0x48>
 8007b62:	ab03      	add	r3, sp, #12
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	462a      	mov	r2, r5
 8007b68:	4b05      	ldr	r3, [pc, #20]	@ (8007b80 <_vfiprintf_r+0x228>)
 8007b6a:	a904      	add	r1, sp, #16
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7fd fe57 	bl	8005820 <_printf_i>
 8007b72:	e7e4      	b.n	8007b3e <_vfiprintf_r+0x1e6>
 8007b74:	08008128 	.word	0x08008128
 8007b78:	08008132 	.word	0x08008132
 8007b7c:	080052f1 	.word	0x080052f1
 8007b80:	08007935 	.word	0x08007935
 8007b84:	0800812e 	.word	0x0800812e

08007b88 <__swbuf_r>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	460e      	mov	r6, r1
 8007b8c:	4614      	mov	r4, r2
 8007b8e:	4605      	mov	r5, r0
 8007b90:	b118      	cbz	r0, 8007b9a <__swbuf_r+0x12>
 8007b92:	6a03      	ldr	r3, [r0, #32]
 8007b94:	b90b      	cbnz	r3, 8007b9a <__swbuf_r+0x12>
 8007b96:	f7fd ffef 	bl	8005b78 <__sinit>
 8007b9a:	69a3      	ldr	r3, [r4, #24]
 8007b9c:	60a3      	str	r3, [r4, #8]
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	071a      	lsls	r2, r3, #28
 8007ba2:	d501      	bpl.n	8007ba8 <__swbuf_r+0x20>
 8007ba4:	6923      	ldr	r3, [r4, #16]
 8007ba6:	b943      	cbnz	r3, 8007bba <__swbuf_r+0x32>
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 f82a 	bl	8007c04 <__swsetup_r>
 8007bb0:	b118      	cbz	r0, 8007bba <__swbuf_r+0x32>
 8007bb2:	f04f 37ff 	mov.w	r7, #4294967295
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	6922      	ldr	r2, [r4, #16]
 8007bbe:	1a98      	subs	r0, r3, r2
 8007bc0:	6963      	ldr	r3, [r4, #20]
 8007bc2:	b2f6      	uxtb	r6, r6
 8007bc4:	4283      	cmp	r3, r0
 8007bc6:	4637      	mov	r7, r6
 8007bc8:	dc05      	bgt.n	8007bd6 <__swbuf_r+0x4e>
 8007bca:	4621      	mov	r1, r4
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f7ff fd99 	bl	8007704 <_fflush_r>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d1ed      	bne.n	8007bb2 <__swbuf_r+0x2a>
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	60a3      	str	r3, [r4, #8]
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	6022      	str	r2, [r4, #0]
 8007be2:	701e      	strb	r6, [r3, #0]
 8007be4:	6962      	ldr	r2, [r4, #20]
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d004      	beq.n	8007bf6 <__swbuf_r+0x6e>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	07db      	lsls	r3, r3, #31
 8007bf0:	d5e1      	bpl.n	8007bb6 <__swbuf_r+0x2e>
 8007bf2:	2e0a      	cmp	r6, #10
 8007bf4:	d1df      	bne.n	8007bb6 <__swbuf_r+0x2e>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f7ff fd83 	bl	8007704 <_fflush_r>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d0d9      	beq.n	8007bb6 <__swbuf_r+0x2e>
 8007c02:	e7d6      	b.n	8007bb2 <__swbuf_r+0x2a>

08007c04 <__swsetup_r>:
 8007c04:	b538      	push	{r3, r4, r5, lr}
 8007c06:	4b29      	ldr	r3, [pc, #164]	@ (8007cac <__swsetup_r+0xa8>)
 8007c08:	4605      	mov	r5, r0
 8007c0a:	6818      	ldr	r0, [r3, #0]
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	b118      	cbz	r0, 8007c18 <__swsetup_r+0x14>
 8007c10:	6a03      	ldr	r3, [r0, #32]
 8007c12:	b90b      	cbnz	r3, 8007c18 <__swsetup_r+0x14>
 8007c14:	f7fd ffb0 	bl	8005b78 <__sinit>
 8007c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c1c:	0719      	lsls	r1, r3, #28
 8007c1e:	d422      	bmi.n	8007c66 <__swsetup_r+0x62>
 8007c20:	06da      	lsls	r2, r3, #27
 8007c22:	d407      	bmi.n	8007c34 <__swsetup_r+0x30>
 8007c24:	2209      	movs	r2, #9
 8007c26:	602a      	str	r2, [r5, #0]
 8007c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c32:	e033      	b.n	8007c9c <__swsetup_r+0x98>
 8007c34:	0758      	lsls	r0, r3, #29
 8007c36:	d512      	bpl.n	8007c5e <__swsetup_r+0x5a>
 8007c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c3a:	b141      	cbz	r1, 8007c4e <__swsetup_r+0x4a>
 8007c3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c40:	4299      	cmp	r1, r3
 8007c42:	d002      	beq.n	8007c4a <__swsetup_r+0x46>
 8007c44:	4628      	mov	r0, r5
 8007c46:	f7fe feff 	bl	8006a48 <_free_r>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	2300      	movs	r3, #0
 8007c58:	6063      	str	r3, [r4, #4]
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	f043 0308 	orr.w	r3, r3, #8
 8007c64:	81a3      	strh	r3, [r4, #12]
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	b94b      	cbnz	r3, 8007c7e <__swsetup_r+0x7a>
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c74:	d003      	beq.n	8007c7e <__swsetup_r+0x7a>
 8007c76:	4621      	mov	r1, r4
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f000 f883 	bl	8007d84 <__smakebuf_r>
 8007c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c82:	f013 0201 	ands.w	r2, r3, #1
 8007c86:	d00a      	beq.n	8007c9e <__swsetup_r+0x9a>
 8007c88:	2200      	movs	r2, #0
 8007c8a:	60a2      	str	r2, [r4, #8]
 8007c8c:	6962      	ldr	r2, [r4, #20]
 8007c8e:	4252      	negs	r2, r2
 8007c90:	61a2      	str	r2, [r4, #24]
 8007c92:	6922      	ldr	r2, [r4, #16]
 8007c94:	b942      	cbnz	r2, 8007ca8 <__swsetup_r+0xa4>
 8007c96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c9a:	d1c5      	bne.n	8007c28 <__swsetup_r+0x24>
 8007c9c:	bd38      	pop	{r3, r4, r5, pc}
 8007c9e:	0799      	lsls	r1, r3, #30
 8007ca0:	bf58      	it	pl
 8007ca2:	6962      	ldrpl	r2, [r4, #20]
 8007ca4:	60a2      	str	r2, [r4, #8]
 8007ca6:	e7f4      	b.n	8007c92 <__swsetup_r+0x8e>
 8007ca8:	2000      	movs	r0, #0
 8007caa:	e7f7      	b.n	8007c9c <__swsetup_r+0x98>
 8007cac:	20000018 	.word	0x20000018

08007cb0 <_raise_r>:
 8007cb0:	291f      	cmp	r1, #31
 8007cb2:	b538      	push	{r3, r4, r5, lr}
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	d904      	bls.n	8007cc4 <_raise_r+0x14>
 8007cba:	2316      	movs	r3, #22
 8007cbc:	6003      	str	r3, [r0, #0]
 8007cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007cc6:	b112      	cbz	r2, 8007cce <_raise_r+0x1e>
 8007cc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ccc:	b94b      	cbnz	r3, 8007ce2 <_raise_r+0x32>
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f000 f830 	bl	8007d34 <_getpid_r>
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	4628      	mov	r0, r5
 8007cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cde:	f000 b817 	b.w	8007d10 <_kill_r>
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d00a      	beq.n	8007cfc <_raise_r+0x4c>
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	d103      	bne.n	8007cf2 <_raise_r+0x42>
 8007cea:	2316      	movs	r3, #22
 8007cec:	6003      	str	r3, [r0, #0]
 8007cee:	2001      	movs	r0, #1
 8007cf0:	e7e7      	b.n	8007cc2 <_raise_r+0x12>
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	4798      	blx	r3
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	e7e0      	b.n	8007cc2 <_raise_r+0x12>

08007d00 <raise>:
 8007d00:	4b02      	ldr	r3, [pc, #8]	@ (8007d0c <raise+0xc>)
 8007d02:	4601      	mov	r1, r0
 8007d04:	6818      	ldr	r0, [r3, #0]
 8007d06:	f7ff bfd3 	b.w	8007cb0 <_raise_r>
 8007d0a:	bf00      	nop
 8007d0c:	20000018 	.word	0x20000018

08007d10 <_kill_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4d07      	ldr	r5, [pc, #28]	@ (8007d30 <_kill_r+0x20>)
 8007d14:	2300      	movs	r3, #0
 8007d16:	4604      	mov	r4, r0
 8007d18:	4608      	mov	r0, r1
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	602b      	str	r3, [r5, #0]
 8007d1e:	f7f9 fcd7 	bl	80016d0 <_kill>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	d102      	bne.n	8007d2c <_kill_r+0x1c>
 8007d26:	682b      	ldr	r3, [r5, #0]
 8007d28:	b103      	cbz	r3, 8007d2c <_kill_r+0x1c>
 8007d2a:	6023      	str	r3, [r4, #0]
 8007d2c:	bd38      	pop	{r3, r4, r5, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000fd8 	.word	0x20000fd8

08007d34 <_getpid_r>:
 8007d34:	f7f9 bcc4 	b.w	80016c0 <_getpid>

08007d38 <__swhatbuf_r>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d40:	2900      	cmp	r1, #0
 8007d42:	b096      	sub	sp, #88	@ 0x58
 8007d44:	4615      	mov	r5, r2
 8007d46:	461e      	mov	r6, r3
 8007d48:	da0d      	bge.n	8007d66 <__swhatbuf_r+0x2e>
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d50:	f04f 0100 	mov.w	r1, #0
 8007d54:	bf14      	ite	ne
 8007d56:	2340      	movne	r3, #64	@ 0x40
 8007d58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	6031      	str	r1, [r6, #0]
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	b016      	add	sp, #88	@ 0x58
 8007d64:	bd70      	pop	{r4, r5, r6, pc}
 8007d66:	466a      	mov	r2, sp
 8007d68:	f000 f848 	bl	8007dfc <_fstat_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	dbec      	blt.n	8007d4a <__swhatbuf_r+0x12>
 8007d70:	9901      	ldr	r1, [sp, #4]
 8007d72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d7a:	4259      	negs	r1, r3
 8007d7c:	4159      	adcs	r1, r3
 8007d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d82:	e7eb      	b.n	8007d5c <__swhatbuf_r+0x24>

08007d84 <__smakebuf_r>:
 8007d84:	898b      	ldrh	r3, [r1, #12]
 8007d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d88:	079d      	lsls	r5, r3, #30
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	d507      	bpl.n	8007da0 <__smakebuf_r+0x1c>
 8007d90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	6123      	str	r3, [r4, #16]
 8007d98:	2301      	movs	r3, #1
 8007d9a:	6163      	str	r3, [r4, #20]
 8007d9c:	b003      	add	sp, #12
 8007d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007da0:	ab01      	add	r3, sp, #4
 8007da2:	466a      	mov	r2, sp
 8007da4:	f7ff ffc8 	bl	8007d38 <__swhatbuf_r>
 8007da8:	9f00      	ldr	r7, [sp, #0]
 8007daa:	4605      	mov	r5, r0
 8007dac:	4639      	mov	r1, r7
 8007dae:	4630      	mov	r0, r6
 8007db0:	f7fe febe 	bl	8006b30 <_malloc_r>
 8007db4:	b948      	cbnz	r0, 8007dca <__smakebuf_r+0x46>
 8007db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dba:	059a      	lsls	r2, r3, #22
 8007dbc:	d4ee      	bmi.n	8007d9c <__smakebuf_r+0x18>
 8007dbe:	f023 0303 	bic.w	r3, r3, #3
 8007dc2:	f043 0302 	orr.w	r3, r3, #2
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	e7e2      	b.n	8007d90 <__smakebuf_r+0xc>
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	6020      	str	r0, [r4, #0]
 8007dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd2:	81a3      	strh	r3, [r4, #12]
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007dda:	b15b      	cbz	r3, 8007df4 <__smakebuf_r+0x70>
 8007ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 f81d 	bl	8007e20 <_isatty_r>
 8007de6:	b128      	cbz	r0, 8007df4 <__smakebuf_r+0x70>
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f023 0303 	bic.w	r3, r3, #3
 8007dee:	f043 0301 	orr.w	r3, r3, #1
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	431d      	orrs	r5, r3
 8007df8:	81a5      	strh	r5, [r4, #12]
 8007dfa:	e7cf      	b.n	8007d9c <__smakebuf_r+0x18>

08007dfc <_fstat_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	4d07      	ldr	r5, [pc, #28]	@ (8007e1c <_fstat_r+0x20>)
 8007e00:	2300      	movs	r3, #0
 8007e02:	4604      	mov	r4, r0
 8007e04:	4608      	mov	r0, r1
 8007e06:	4611      	mov	r1, r2
 8007e08:	602b      	str	r3, [r5, #0]
 8007e0a:	f7f9 fcc1 	bl	8001790 <_fstat>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	d102      	bne.n	8007e18 <_fstat_r+0x1c>
 8007e12:	682b      	ldr	r3, [r5, #0]
 8007e14:	b103      	cbz	r3, 8007e18 <_fstat_r+0x1c>
 8007e16:	6023      	str	r3, [r4, #0]
 8007e18:	bd38      	pop	{r3, r4, r5, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20000fd8 	.word	0x20000fd8

08007e20 <_isatty_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4d06      	ldr	r5, [pc, #24]	@ (8007e3c <_isatty_r+0x1c>)
 8007e24:	2300      	movs	r3, #0
 8007e26:	4604      	mov	r4, r0
 8007e28:	4608      	mov	r0, r1
 8007e2a:	602b      	str	r3, [r5, #0]
 8007e2c:	f7f9 fcc0 	bl	80017b0 <_isatty>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_isatty_r+0x1a>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_isatty_r+0x1a>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	20000fd8 	.word	0x20000fd8

08007e40 <_init>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	bf00      	nop
 8007e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e46:	bc08      	pop	{r3}
 8007e48:	469e      	mov	lr, r3
 8007e4a:	4770      	bx	lr

08007e4c <_fini>:
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4e:	bf00      	nop
 8007e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e52:	bc08      	pop	{r3}
 8007e54:	469e      	mov	lr, r3
 8007e56:	4770      	bx	lr
